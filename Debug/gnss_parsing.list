
gnss_parsing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007734  08000250  08000250  00010250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  08007984  08007984  00017984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007cd0  08007cd0  00017cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007cd8  08007cd8  00017cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007cdc  08007cdc  00017cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08007ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002ec  20000070  08007d50  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000035c  08007d50  0002035c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   000100a9  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001e08  00000000  00000000  0003014f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c78  00000000  00000000  00031f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000bc0  00000000  00000000  00032bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032fcc  00000000  00000000  00033790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000f45a  00000000  00000000  0006675c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00140285  00000000  00000000  00075bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001b5e3b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003be8  00000000  00000000  001b5e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	e000      	b.n	8000262 <__do_global_dtors_aux+0x12>
 8000260:	bf00      	nop
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000070 	.word	0x20000070
 800026c:	00000000 	.word	0x00000000
 8000270:	0800796c 	.word	0x0800796c

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	e000      	b.n	8000282 <frame_dummy+0xe>
 8000280:	bf00      	nop
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000074 	.word	0x20000074
 800028c:	0800796c 	.word	0x0800796c

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b982 	b.w	80005bc <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002d6:	4604      	mov	r4, r0
 80002d8:	460f      	mov	r7, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d148      	bne.n	8000370 <__udivmoddi4+0xa0>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d961      	bls.n	80003a8 <__udivmoddi4+0xd8>
 80002e4:	fab2 f382 	clz	r3, r2
 80002e8:	b143      	cbz	r3, 80002fc <__udivmoddi4+0x2c>
 80002ea:	f1c3 0120 	rsb	r1, r3, #32
 80002ee:	409f      	lsls	r7, r3
 80002f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f4:	409c      	lsls	r4, r3
 80002f6:	fa20 f101 	lsr.w	r1, r0, r1
 80002fa:	430f      	orrs	r7, r1
 80002fc:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000300:	fa1f fe8c 	uxth.w	lr, ip
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	fbb7 f6f1 	udiv	r6, r7, r1
 800030a:	fb01 7716 	mls	r7, r1, r6, r7
 800030e:	fb06 f00e 	mul.w	r0, r6, lr
 8000312:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x5c>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f106 37ff 	add.w	r7, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x5a>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 8137 	bhi.w	8000598 <__udivmoddi4+0x2c8>
 800032a:	463e      	mov	r6, r7
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f1 	udiv	r0, r2, r1
 8000334:	fb01 2210 	mls	r2, r1, r0, r2
 8000338:	fb00 fe0e 	mul.w	lr, r0, lr
 800033c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x86>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x84>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 811c 	bhi.w	800058c <__udivmoddi4+0x2bc>
 8000354:	4610      	mov	r0, r2
 8000356:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	2600      	movs	r6, #0
 8000360:	b11d      	cbz	r5, 800036a <__udivmoddi4+0x9a>
 8000362:	40dc      	lsrs	r4, r3
 8000364:	2300      	movs	r3, #0
 8000366:	e9c5 4300 	strd	r4, r3, [r5]
 800036a:	4631      	mov	r1, r6
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	428b      	cmp	r3, r1
 8000372:	d909      	bls.n	8000388 <__udivmoddi4+0xb8>
 8000374:	2d00      	cmp	r5, #0
 8000376:	f000 80fd 	beq.w	8000574 <__udivmoddi4+0x2a4>
 800037a:	2600      	movs	r6, #0
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	4630      	mov	r0, r6
 8000382:	4631      	mov	r1, r6
 8000384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000388:	fab3 f683 	clz	r6, r3
 800038c:	2e00      	cmp	r6, #0
 800038e:	d14b      	bne.n	8000428 <__udivmoddi4+0x158>
 8000390:	428b      	cmp	r3, r1
 8000392:	f0c0 80f2 	bcc.w	800057a <__udivmoddi4+0x2aa>
 8000396:	4282      	cmp	r2, r0
 8000398:	f240 80ef 	bls.w	800057a <__udivmoddi4+0x2aa>
 800039c:	4630      	mov	r0, r6
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e3      	beq.n	800036a <__udivmoddi4+0x9a>
 80003a2:	e9c5 4700 	strd	r4, r7, [r5]
 80003a6:	e7e0      	b.n	800036a <__udivmoddi4+0x9a>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xdc>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f382 	clz	r3, r2
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	f040 809d 	bne.w	80004f0 <__udivmoddi4+0x220>
 80003b6:	1a89      	subs	r1, r1, r2
 80003b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003bc:	b297      	uxth	r7, r2
 80003be:	2601      	movs	r6, #1
 80003c0:	0c20      	lsrs	r0, r4, #16
 80003c2:	fbb1 f2fe 	udiv	r2, r1, lr
 80003c6:	fb0e 1112 	mls	r1, lr, r2, r1
 80003ca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ce:	fb07 f002 	mul.w	r0, r7, r2
 80003d2:	4288      	cmp	r0, r1
 80003d4:	d90f      	bls.n	80003f6 <__udivmoddi4+0x126>
 80003d6:	eb1c 0101 	adds.w	r1, ip, r1
 80003da:	f102 38ff 	add.w	r8, r2, #4294967295
 80003de:	bf2c      	ite	cs
 80003e0:	f04f 0901 	movcs.w	r9, #1
 80003e4:	f04f 0900 	movcc.w	r9, #0
 80003e8:	4288      	cmp	r0, r1
 80003ea:	d903      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003ec:	f1b9 0f00 	cmp.w	r9, #0
 80003f0:	f000 80cf 	beq.w	8000592 <__udivmoddi4+0x2c2>
 80003f4:	4642      	mov	r2, r8
 80003f6:	1a09      	subs	r1, r1, r0
 80003f8:	b2a4      	uxth	r4, r4
 80003fa:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000402:	fb00 f707 	mul.w	r7, r0, r7
 8000406:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040a:	42a7      	cmp	r7, r4
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x150>
 800040e:	eb1c 0404 	adds.w	r4, ip, r4
 8000412:	f100 31ff 	add.w	r1, r0, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0x14e>
 8000418:	42a7      	cmp	r7, r4
 800041a:	f200 80b4 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041e:	4608      	mov	r0, r1
 8000420:	1be4      	subs	r4, r4, r7
 8000422:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000426:	e79b      	b.n	8000360 <__udivmoddi4+0x90>
 8000428:	f1c6 0720 	rsb	r7, r6, #32
 800042c:	40b3      	lsls	r3, r6
 800042e:	fa01 f406 	lsl.w	r4, r1, r6
 8000432:	fa22 fc07 	lsr.w	ip, r2, r7
 8000436:	40f9      	lsrs	r1, r7
 8000438:	40b2      	lsls	r2, r6
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f307 	lsr.w	r3, r0, r7
 8000442:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000446:	431c      	orrs	r4, r3
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fa00 f306 	lsl.w	r3, r0, r6
 8000450:	0c20      	lsrs	r0, r4, #16
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	fb09 1118 	mls	r1, r9, r8, r1
 800045a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800045e:	fb08 f00e 	mul.w	r0, r8, lr
 8000462:	4288      	cmp	r0, r1
 8000464:	d90f      	bls.n	8000486 <__udivmoddi4+0x1b6>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f108 3aff 	add.w	sl, r8, #4294967295
 800046e:	bf2c      	ite	cs
 8000470:	f04f 0b01 	movcs.w	fp, #1
 8000474:	f04f 0b00 	movcc.w	fp, #0
 8000478:	4288      	cmp	r0, r1
 800047a:	d903      	bls.n	8000484 <__udivmoddi4+0x1b4>
 800047c:	f1bb 0f00 	cmp.w	fp, #0
 8000480:	f000 808d 	beq.w	800059e <__udivmoddi4+0x2ce>
 8000484:	46d0      	mov	r8, sl
 8000486:	1a09      	subs	r1, r1, r0
 8000488:	b2a4      	uxth	r4, r4
 800048a:	fbb1 f0f9 	udiv	r0, r1, r9
 800048e:	fb09 1110 	mls	r1, r9, r0, r1
 8000492:	fb00 fe0e 	mul.w	lr, r0, lr
 8000496:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800049a:	458e      	cmp	lr, r1
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x1de>
 800049e:	eb1c 0101 	adds.w	r1, ip, r1
 80004a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a6:	d201      	bcs.n	80004ac <__udivmoddi4+0x1dc>
 80004a8:	458e      	cmp	lr, r1
 80004aa:	d87f      	bhi.n	80005ac <__udivmoddi4+0x2dc>
 80004ac:	4620      	mov	r0, r4
 80004ae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b2:	eba1 010e 	sub.w	r1, r1, lr
 80004b6:	fba0 9802 	umull	r9, r8, r0, r2
 80004ba:	4541      	cmp	r1, r8
 80004bc:	464c      	mov	r4, r9
 80004be:	46c6      	mov	lr, r8
 80004c0:	d302      	bcc.n	80004c8 <__udivmoddi4+0x1f8>
 80004c2:	d106      	bne.n	80004d2 <__udivmoddi4+0x202>
 80004c4:	454b      	cmp	r3, r9
 80004c6:	d204      	bcs.n	80004d2 <__udivmoddi4+0x202>
 80004c8:	3801      	subs	r0, #1
 80004ca:	ebb9 0402 	subs.w	r4, r9, r2
 80004ce:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004d2:	2d00      	cmp	r5, #0
 80004d4:	d070      	beq.n	80005b8 <__udivmoddi4+0x2e8>
 80004d6:	1b1a      	subs	r2, r3, r4
 80004d8:	eb61 010e 	sbc.w	r1, r1, lr
 80004dc:	fa22 f306 	lsr.w	r3, r2, r6
 80004e0:	fa01 f707 	lsl.w	r7, r1, r7
 80004e4:	40f1      	lsrs	r1, r6
 80004e6:	2600      	movs	r6, #0
 80004e8:	431f      	orrs	r7, r3
 80004ea:	e9c5 7100 	strd	r7, r1, [r5]
 80004ee:	e73c      	b.n	800036a <__udivmoddi4+0x9a>
 80004f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f4:	f1c3 0020 	rsb	r0, r3, #32
 80004f8:	fa01 f203 	lsl.w	r2, r1, r3
 80004fc:	fa21 f600 	lsr.w	r6, r1, r0
 8000500:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000504:	fa24 f100 	lsr.w	r1, r4, r0
 8000508:	fa1f f78c 	uxth.w	r7, ip
 800050c:	409c      	lsls	r4, r3
 800050e:	4311      	orrs	r1, r2
 8000510:	fbb6 f0fe 	udiv	r0, r6, lr
 8000514:	0c0a      	lsrs	r2, r1, #16
 8000516:	fb0e 6610 	mls	r6, lr, r0, r6
 800051a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800051e:	fb00 f607 	mul.w	r6, r0, r7
 8000522:	4296      	cmp	r6, r2
 8000524:	d90e      	bls.n	8000544 <__udivmoddi4+0x274>
 8000526:	eb1c 0202 	adds.w	r2, ip, r2
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	bf2c      	ite	cs
 8000530:	f04f 0901 	movcs.w	r9, #1
 8000534:	f04f 0900 	movcc.w	r9, #0
 8000538:	4296      	cmp	r6, r2
 800053a:	d902      	bls.n	8000542 <__udivmoddi4+0x272>
 800053c:	f1b9 0f00 	cmp.w	r9, #0
 8000540:	d031      	beq.n	80005a6 <__udivmoddi4+0x2d6>
 8000542:	4640      	mov	r0, r8
 8000544:	1b92      	subs	r2, r2, r6
 8000546:	b289      	uxth	r1, r1
 8000548:	fbb2 f6fe 	udiv	r6, r2, lr
 800054c:	fb0e 2216 	mls	r2, lr, r6, r2
 8000550:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000554:	fb06 f207 	mul.w	r2, r6, r7
 8000558:	428a      	cmp	r2, r1
 800055a:	d907      	bls.n	800056c <__udivmoddi4+0x29c>
 800055c:	eb1c 0101 	adds.w	r1, ip, r1
 8000560:	f106 38ff 	add.w	r8, r6, #4294967295
 8000564:	d201      	bcs.n	800056a <__udivmoddi4+0x29a>
 8000566:	428a      	cmp	r2, r1
 8000568:	d823      	bhi.n	80005b2 <__udivmoddi4+0x2e2>
 800056a:	4646      	mov	r6, r8
 800056c:	1a89      	subs	r1, r1, r2
 800056e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000572:	e725      	b.n	80003c0 <__udivmoddi4+0xf0>
 8000574:	462e      	mov	r6, r5
 8000576:	4628      	mov	r0, r5
 8000578:	e6f7      	b.n	800036a <__udivmoddi4+0x9a>
 800057a:	1a84      	subs	r4, r0, r2
 800057c:	eb61 0303 	sbc.w	r3, r1, r3
 8000580:	2001      	movs	r0, #1
 8000582:	461f      	mov	r7, r3
 8000584:	e70b      	b.n	800039e <__udivmoddi4+0xce>
 8000586:	4464      	add	r4, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e749      	b.n	8000420 <__udivmoddi4+0x150>
 800058c:	4464      	add	r4, ip
 800058e:	3802      	subs	r0, #2
 8000590:	e6e1      	b.n	8000356 <__udivmoddi4+0x86>
 8000592:	3a02      	subs	r2, #2
 8000594:	4461      	add	r1, ip
 8000596:	e72e      	b.n	80003f6 <__udivmoddi4+0x126>
 8000598:	3e02      	subs	r6, #2
 800059a:	4462      	add	r2, ip
 800059c:	e6c6      	b.n	800032c <__udivmoddi4+0x5c>
 800059e:	f1a8 0802 	sub.w	r8, r8, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e76f      	b.n	8000486 <__udivmoddi4+0x1b6>
 80005a6:	3802      	subs	r0, #2
 80005a8:	4462      	add	r2, ip
 80005aa:	e7cb      	b.n	8000544 <__udivmoddi4+0x274>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4461      	add	r1, ip
 80005b0:	e77d      	b.n	80004ae <__udivmoddi4+0x1de>
 80005b2:	3e02      	subs	r6, #2
 80005b4:	4461      	add	r1, ip
 80005b6:	e7d9      	b.n	800056c <__udivmoddi4+0x29c>
 80005b8:	462e      	mov	r6, r5
 80005ba:	e6d6      	b.n	800036a <__udivmoddi4+0x9a>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <GNSS_PRINT>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int GNSS_PRINT(char *pBuffer)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  if (HAL_UART_Transmit(&huart4, (uint8_t*)pBuffer, (uint16_t)strlen((char *)pBuffer), 1000) != HAL_OK)
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f7ff fe61 	bl	8000290 <strlen>
 80005ce:	4603      	mov	r3, r0
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d6:	6879      	ldr	r1, [r7, #4]
 80005d8:	4806      	ldr	r0, [pc, #24]	; (80005f4 <GNSS_PRINT+0x34>)
 80005da:	f005 fa11 	bl	8005a00 <HAL_UART_Transmit>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <GNSS_PRINT+0x28>
  {
    return 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	e000      	b.n	80005ea <GNSS_PRINT+0x2a>
  }

  return 0;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000008c 	.word	0x2000008c

080005f8 <GNSS_DATA_SendCommand>:


void GNSS_DATA_SendCommand(uint8_t *pCommand)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  int32_t status;

  if (pCommand[0] != 36U) /* An NMEA command must begin with '$' */
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b24      	cmp	r3, #36	; 0x24
 8000606:	d003      	beq.n	8000610 <GNSS_DATA_SendCommand+0x18>
  {
    PRINT_INFO("Invalid command (an NMEA command begins with '$').\n\r");
 8000608:	480e      	ldr	r0, [pc, #56]	; (8000644 <GNSS_DATA_SendCommand+0x4c>)
 800060a:	f7ff ffd9 	bl	80005c0 <GNSS_PRINT>
    {
      status = HAL_UART_Transmit(&huart4, (uint8_t*)gnssCmd, (uint16_t)strlen((char *)gnssCmd), 1000);
    }
    while(status != 0);
  }
}
 800060e:	e015      	b.n	800063c <GNSS_DATA_SendCommand+0x44>
    snprintf((char *)gnssCmd, 90, "%s\r\n", (char *)pCommand);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a0d      	ldr	r2, [pc, #52]	; (8000648 <GNSS_DATA_SendCommand+0x50>)
 8000614:	215a      	movs	r1, #90	; 0x5a
 8000616:	480d      	ldr	r0, [pc, #52]	; (800064c <GNSS_DATA_SendCommand+0x54>)
 8000618:	f006 f844 	bl	80066a4 <sniprintf>
      status = HAL_UART_Transmit(&huart4, (uint8_t*)gnssCmd, (uint16_t)strlen((char *)gnssCmd), 1000);
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <GNSS_DATA_SendCommand+0x54>)
 800061e:	f7ff fe37 	bl	8000290 <strlen>
 8000622:	4603      	mov	r3, r0
 8000624:	b29a      	uxth	r2, r3
 8000626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062a:	4908      	ldr	r1, [pc, #32]	; (800064c <GNSS_DATA_SendCommand+0x54>)
 800062c:	4808      	ldr	r0, [pc, #32]	; (8000650 <GNSS_DATA_SendCommand+0x58>)
 800062e:	f005 f9e7 	bl	8005a00 <HAL_UART_Transmit>
 8000632:	4603      	mov	r3, r0
 8000634:	60fb      	str	r3, [r7, #12]
    while(status != 0);
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d1ef      	bne.n	800061c <GNSS_DATA_SendCommand+0x24>
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	08007984 	.word	0x08007984
 8000648:	080079bc 	.word	0x080079bc
 800064c:	200001b4 	.word	0x200001b4
 8000650:	2000008c 	.word	0x2000008c

08000654 <GPS_ParseGPGGA>:

void GPS_ParseGPGGA(const char* data, char* time, char* latitude, char* longitude,
                    char* fix, char* satellites, char* hdop, char* altitude) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b08e      	sub	sp, #56	; 0x38
 8000658:	af08      	add	r7, sp, #32
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	607a      	str	r2, [r7, #4]
 8000660:	603b      	str	r3, [r7, #0]
    // Example GPGGA data: "$GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47"
    char* gpgga = strstr(data, "$GPGGA");
 8000662:	4911      	ldr	r1, [pc, #68]	; (80006a8 <GPS_ParseGPGGA+0x54>)
 8000664:	68f8      	ldr	r0, [r7, #12]
 8000666:	f006 f87f 	bl	8006768 <strstr>
 800066a:	6178      	str	r0, [r7, #20]

    if (gpgga != NULL) {
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d015      	beq.n	800069e <GPS_ParseGPGGA+0x4a>
        // Extract GPGGA sentence
        // Implement a more sophisticated parser based on your data format
        // For simplicity, this example extracts the time, latitude, longitude,
        // fix status, number of satellites, HDOP, and altitude

        sscanf(gpgga, "$GPGGA,%6s,%9s,%c,%10s,%c,%1s,%2s,%3s,%6s", time, latitude,
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	3309      	adds	r3, #9
 8000676:	683a      	ldr	r2, [r7, #0]
 8000678:	320a      	adds	r2, #10
 800067a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800067c:	9106      	str	r1, [sp, #24]
 800067e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000680:	9105      	str	r1, [sp, #20]
 8000682:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000684:	9104      	str	r1, [sp, #16]
 8000686:	6a39      	ldr	r1, [r7, #32]
 8000688:	9103      	str	r1, [sp, #12]
 800068a:	9202      	str	r2, [sp, #8]
 800068c:	683a      	ldr	r2, [r7, #0]
 800068e:	9201      	str	r2, [sp, #4]
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	68ba      	ldr	r2, [r7, #8]
 8000696:	4905      	ldr	r1, [pc, #20]	; (80006ac <GPS_ParseGPGGA+0x58>)
 8000698:	6978      	ldr	r0, [r7, #20]
 800069a:	f006 f837 	bl	800670c <siscanf>
               &latitude[9], longitude, &longitude[10], fix, satellites, hdop, altitude);
    }
}
 800069e:	bf00      	nop
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	080079c4 	.word	0x080079c4
 80006ac:	080079cc 	.word	0x080079cc

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b6:	f000 fafd 	bl	8000cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 f857 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006be:	f000 f947 	bl	8000950 <MX_GPIO_Init>
  MX_UART4_Init();
 80006c2:	f000 f8ad 	bl	8000820 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80006c6:	f000 f8f7 	bl	80008b8 <MX_USART1_UART_Init>
  MX_ICACHE_Init();
 80006ca:	f000 f896 	bl	80007fa <MX_ICACHE_Init>
     * 0x100000 $GPGLL Message
     */
  //  int lowMask = 0x18004F;


  int lowMask = 0x2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	607b      	str	r3, [r7, #4]
  int highMask = 0x0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]
  snprintf((char *)gnssCmd, 90, "$PSTMCFGMSGL,%d,%d,%x,%x",
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	9302      	str	r3, [sp, #8]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2301      	movs	r3, #1
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2300      	movs	r3, #0
 80006e4:	4a16      	ldr	r2, [pc, #88]	; (8000740 <main+0x90>)
 80006e6:	215a      	movs	r1, #90	; 0x5a
 80006e8:	4816      	ldr	r0, [pc, #88]	; (8000744 <main+0x94>)
 80006ea:	f005 ffdb 	bl	80066a4 <sniprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  GNSS_DATA_SendCommand(gnssCmd);
 80006ee:	4815      	ldr	r0, [pc, #84]	; (8000744 <main+0x94>)
 80006f0:	f7ff ff82 	bl	80005f8 <GNSS_DATA_SendCommand>
	  HAL_Delay(500);
 80006f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f8:	f000 fb60 	bl	8000dbc <HAL_Delay>

	  HAL_UART_Receive(&huart4, (uint8_t*)gpsBuffer, (uint16_t)strlen((char *)gpsBuffer), 1000);
 80006fc:	4812      	ldr	r0, [pc, #72]	; (8000748 <main+0x98>)
 80006fe:	f7ff fdc7 	bl	8000290 <strlen>
 8000702:	4603      	mov	r3, r0
 8000704:	b29a      	uxth	r2, r3
 8000706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070a:	490f      	ldr	r1, [pc, #60]	; (8000748 <main+0x98>)
 800070c:	480f      	ldr	r0, [pc, #60]	; (800074c <main+0x9c>)
 800070e:	f005 fa05 	bl	8005b1c <HAL_UART_Receive>
	  gpsBuffer[sizeof(gpsBuffer) - 1] = '\0';  // Ensure null-terminated string
 8000712:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <main+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff

	  GPS_ParseGPGGA(gpsBuffer, time, latitude, longitude, fix, satellites, hdop, altitude);
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <main+0xa0>)
 800071c:	9303      	str	r3, [sp, #12]
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <main+0xa4>)
 8000720:	9302      	str	r3, [sp, #8]
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <main+0xa8>)
 8000724:	9301      	str	r3, [sp, #4]
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <main+0xac>)
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <main+0xb0>)
 800072c:	4a0d      	ldr	r2, [pc, #52]	; (8000764 <main+0xb4>)
 800072e:	490e      	ldr	r1, [pc, #56]	; (8000768 <main+0xb8>)
 8000730:	4805      	ldr	r0, [pc, #20]	; (8000748 <main+0x98>)
 8000732:	f7ff ff8f 	bl	8000654 <GPS_ParseGPGGA>
		// Print the parsed data
//	  printf("Time: %s, Latitude: %s, Longitude: %s, Fix: %s, Satellites: %s, HDOP: %s, Altitude: %s\n",
//			   time, latitude, longitude, fix, satellites, hdop, altitude);

		// Wait for a longer duration before sending the next set of commands
	   HAL_Delay(5000);
 8000736:	f241 3088 	movw	r0, #5000	; 0x1388
 800073a:	f000 fb3f 	bl	8000dbc <HAL_Delay>
  {
 800073e:	e7d6      	b.n	80006ee <main+0x3e>
 8000740:	080079f8 	.word	0x080079f8
 8000744:	200001b4 	.word	0x200001b4
 8000748:	20000210 	.word	0x20000210
 800074c:	2000008c 	.word	0x2000008c
 8000750:	2000033c 	.word	0x2000033c
 8000754:	20000338 	.word	0x20000338
 8000758:	20000334 	.word	0x20000334
 800075c:	20000330 	.word	0x20000330
 8000760:	20000324 	.word	0x20000324
 8000764:	20000318 	.word	0x20000318
 8000768:	20000310 	.word	0x20000310

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b09e      	sub	sp, #120	; 0x78
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0318 	add.w	r3, r7, #24
 8000776:	2260      	movs	r2, #96	; 0x60
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f005 ff8a 	bl	8006694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	463b      	mov	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
 800078e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8000790:	2000      	movs	r0, #0
 8000792:	f000 fe23 	bl	80013dc <HAL_PWREx_ControlVoltageScaling>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800079c:	f000 f8f2 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a0:	2302      	movs	r3, #2
 80007a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007aa:	2310      	movs	r3, #16
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b2:	f107 0318 	add.w	r3, r7, #24
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 fe9c 	bl	80014f4 <HAL_RCC_OscConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80007c2:	f000 f8df 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c6:	231f      	movs	r3, #31
 80007c8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007ca:	2301      	movs	r3, #1
 80007cc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007de:	463b      	mov	r3, r7
 80007e0:	2101      	movs	r1, #1
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 fd62 	bl	80022ac <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80007ee:	f000 f8c9 	bl	8000984 <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3778      	adds	r7, #120	; 0x78
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80007fe:	2000      	movs	r0, #0
 8000800:	f000 fdbc 	bl	800137c <HAL_ICACHE_ConfigAssociativityMode>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800080a:	f000 f8bb 	bl	8000984 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800080e:	f000 fdd5 	bl	80013bc <HAL_ICACHE_Enable>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000818:	f000 f8b4 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}

08000820 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000824:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <MX_UART4_Init+0x90>)
 8000826:	4a23      	ldr	r2, [pc, #140]	; (80008b4 <MX_UART4_Init+0x94>)
 8000828:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800082a:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <MX_UART4_Init+0x90>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <MX_UART4_Init+0x90>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <MX_UART4_Init+0x90>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800083e:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <MX_UART4_Init+0x90>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_UART4_Init+0x90>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_UART4_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_UART4_Init+0x90>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_UART4_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_UART4_Init+0x90>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_UART4_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000868:	4811      	ldr	r0, [pc, #68]	; (80008b0 <MX_UART4_Init+0x90>)
 800086a:	f005 f879 	bl	8005960 <HAL_UART_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000874:	f000 f886 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000878:	2100      	movs	r1, #0
 800087a:	480d      	ldr	r0, [pc, #52]	; (80008b0 <MX_UART4_Init+0x90>)
 800087c:	f005 fe16 	bl	80064ac <HAL_UARTEx_SetTxFifoThreshold>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000886:	f000 f87d 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088a:	2100      	movs	r1, #0
 800088c:	4808      	ldr	r0, [pc, #32]	; (80008b0 <MX_UART4_Init+0x90>)
 800088e:	f005 fe4b 	bl	8006528 <HAL_UARTEx_SetRxFifoThreshold>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000898:	f000 f874 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_UART4_Init+0x90>)
 800089e:	f005 fdcc 	bl	800643a <HAL_UARTEx_DisableFifoMode>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80008a8:	f000 f86c 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2000008c 	.word	0x2000008c
 80008b4:	40004c00 	.word	0x40004c00

080008b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <MX_USART1_UART_Init+0x90>)
 80008be:	4a23      	ldr	r2, [pc, #140]	; (800094c <MX_USART1_UART_Init+0x94>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <MX_USART1_UART_Init+0x90>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <MX_USART1_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <MX_USART1_UART_Init+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <MX_USART1_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_USART1_UART_Init+0x90>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_USART1_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_USART1_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_USART1_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_USART1_UART_Init+0x90>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_USART1_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000900:	4811      	ldr	r0, [pc, #68]	; (8000948 <MX_USART1_UART_Init+0x90>)
 8000902:	f005 f82d 	bl	8005960 <HAL_UART_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800090c:	f000 f83a 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000910:	2100      	movs	r1, #0
 8000912:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_USART1_UART_Init+0x90>)
 8000914:	f005 fdca 	bl	80064ac <HAL_UARTEx_SetTxFifoThreshold>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800091e:	f000 f831 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000922:	2100      	movs	r1, #0
 8000924:	4808      	ldr	r0, [pc, #32]	; (8000948 <MX_USART1_UART_Init+0x90>)
 8000926:	f005 fdff 	bl	8006528 <HAL_UARTEx_SetRxFifoThreshold>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000930:	f000 f828 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_USART1_UART_Init+0x90>)
 8000936:	f005 fd80 	bl	800643a <HAL_UARTEx_DisableFifoMode>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000940:	f000 f820 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000120 	.word	0x20000120
 800094c:	40013800 	.word	0x40013800

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <MX_GPIO_Init+0x30>)
 8000958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800095c:	4a08      	ldr	r2, [pc, #32]	; (8000980 <MX_GPIO_Init+0x30>)
 800095e:	f043 0301 	orr.w	r3, r3, #1
 8000962:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_GPIO_Init+0x30>)
 8000968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	46020c00 	.word	0x46020c00

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>

0800098e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b0c2      	sub	sp, #264	; 0x108
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80009a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80009aa:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009bc:	f107 0318 	add.w	r3, r7, #24
 80009c0:	22d8      	movs	r2, #216	; 0xd8
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f005 fe65 	bl	8006694 <memset>
  if(huart->Instance==UART4)
 80009ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80009ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a52      	ldr	r2, [pc, #328]	; (8000b20 <HAL_UART_MspInit+0x184>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d145      	bne.n	8000a68 <HAL_UART_MspInit+0xcc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80009dc:	f04f 0208 	mov.w	r2, #8
 80009e0:	f04f 0300 	mov.w	r3, #0
 80009e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ec:	f107 0318 	add.w	r3, r7, #24
 80009f0:	4618      	mov	r0, r3
 80009f2:	f002 f831 	bl	8002a58 <HAL_RCCEx_PeriphCLKConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 80009fc:	f7ff ffc2 	bl	8000984 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000a00:	4b48      	ldr	r3, [pc, #288]	; (8000b24 <HAL_UART_MspInit+0x188>)
 8000a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000a06:	4a47      	ldr	r2, [pc, #284]	; (8000b24 <HAL_UART_MspInit+0x188>)
 8000a08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a0c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000a10:	4b44      	ldr	r3, [pc, #272]	; (8000b24 <HAL_UART_MspInit+0x188>)
 8000a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000a16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4b41      	ldr	r3, [pc, #260]	; (8000b24 <HAL_UART_MspInit+0x188>)
 8000a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a24:	4a3f      	ldr	r2, [pc, #252]	; (8000b24 <HAL_UART_MspInit+0x188>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a2e:	4b3d      	ldr	r3, [pc, #244]	; (8000b24 <HAL_UART_MspInit+0x188>)
 8000a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a54:	2308      	movs	r3, #8
 8000a56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4831      	ldr	r0, [pc, #196]	; (8000b28 <HAL_UART_MspInit+0x18c>)
 8000a62:	f000 fab3 	bl	8000fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a66:	e056      	b.n	8000b16 <HAL_UART_MspInit+0x17a>
  else if(huart->Instance==USART1)
 8000a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000a6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a2d      	ldr	r2, [pc, #180]	; (8000b2c <HAL_UART_MspInit+0x190>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d14d      	bne.n	8000b16 <HAL_UART_MspInit+0x17a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a7a:	f04f 0201 	mov.w	r2, #1
 8000a7e:	f04f 0300 	mov.w	r3, #0
 8000a82:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a86:	2300      	movs	r3, #0
 8000a88:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8a:	f107 0318 	add.w	r3, r7, #24
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 ffe2 	bl	8002a58 <HAL_RCCEx_PeriphCLKConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_UART_MspInit+0x102>
      Error_Handler();
 8000a9a:	f7ff ff73 	bl	8000984 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a9e:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <HAL_UART_MspInit+0x188>)
 8000aa0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000aa4:	4a1f      	ldr	r2, [pc, #124]	; (8000b24 <HAL_UART_MspInit+0x188>)
 8000aa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aaa:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000aae:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <HAL_UART_MspInit+0x188>)
 8000ab0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <HAL_UART_MspInit+0x188>)
 8000abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ac2:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <HAL_UART_MspInit+0x188>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_UART_MspInit+0x188>)
 8000ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ad2:	f003 0201 	and.w	r2, r3, #1
 8000ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000ada:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000ae4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000ae8:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000aea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000aee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b04:	2307      	movs	r3, #7
 8000b06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <HAL_UART_MspInit+0x18c>)
 8000b12:	f000 fa5b 	bl	8000fcc <HAL_GPIO_Init>
}
 8000b16:	bf00      	nop
 8000b18:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40004c00 	.word	0x40004c00
 8000b24:	46020c00 	.word	0x46020c00
 8000b28:	42020000 	.word	0x42020000
 8000b2c:	40013800 	.word	0x40013800

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <NMI_Handler+0x4>

08000b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <HardFault_Handler+0x4>

08000b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <MemManage_Handler+0x4>

08000b42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <BusFault_Handler+0x4>

08000b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <UsageFault_Handler+0x4>

08000b4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7c:	f000 f8fe 	bl	8000d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b8c:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <_sbrk+0x5c>)
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <_sbrk+0x60>)
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d102      	bne.n	8000ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <_sbrk+0x64>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <_sbrk+0x68>)
 8000ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d207      	bcs.n	8000bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb4:	f005 fd44 	bl	8006640 <__errno>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	220c      	movs	r2, #12
 8000bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc2:	e009      	b.n	8000bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <_sbrk+0x64>)
 8000bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20270000 	.word	0x20270000
 8000be4:	00000400 	.word	0x00000400
 8000be8:	20000344 	.word	0x20000344
 8000bec:	20000360 	.word	0x20000360

08000bf0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bf4:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <SystemInit+0x68>)
 8000bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfa:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <SystemInit+0x68>)
 8000bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <SystemInit+0x6c>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <SystemInit+0x6c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <SystemInit+0x6c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <SystemInit+0x6c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <SystemInit+0x6c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <SystemInit+0x6c>)
 8000c22:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c26:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c2a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <SystemInit+0x6c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <SystemInit+0x6c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a09      	ldr	r2, [pc, #36]	; (8000c5c <SystemInit+0x6c>)
 8000c38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c3c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <SystemInit+0x6c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <SystemInit+0x68>)
 8000c46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c4a:	609a      	str	r2, [r3, #8]
  #endif
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00
 8000c5c:	46020c00 	.word	0x46020c00

08000c60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c98 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c64:	f7ff ffc4 	bl	8000bf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c68:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c6a:	e003      	b.n	8000c74 <LoopCopyDataInit>

08000c6c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c6e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c70:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c72:	3104      	adds	r1, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c74:	480a      	ldr	r0, [pc, #40]	; (8000ca0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c78:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c7a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c7c:	d3f6      	bcc.n	8000c6c <CopyDataInit>
	ldr	r2, =_sbss
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c80:	e002      	b.n	8000c88 <LoopFillZerobss>

08000c82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c82:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c84:	f842 3b04 	str.w	r3, [r2], #4

08000c88 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <LoopForever+0x16>)
	cmp	r2, r3
 8000c8a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c8c:	d3f9      	bcc.n	8000c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f005 fcdd 	bl	800664c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c92:	f7ff fd0d 	bl	80006b0 <main>

08000c96 <LoopForever>:

LoopForever:
    b LoopForever
 8000c96:	e7fe      	b.n	8000c96 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000c98:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8000c9c:	08007ce0 	.word	0x08007ce0
	ldr	r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ca4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000ca8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000cac:	2000035c 	.word	0x2000035c

08000cb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC1_2_IRQHandler>
	...

08000cb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_Init+0x4c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <HAL_Init+0x4c>)
 8000cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f000 f94f 	bl	8000f68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000cca:	f001 fce1 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <HAL_Init+0x50>)
 8000cd2:	6a1b      	ldr	r3, [r3, #32]
 8000cd4:	f003 030f 	and.w	r3, r3, #15
 8000cd8:	490b      	ldr	r1, [pc, #44]	; (8000d08 <HAL_Init+0x54>)
 8000cda:	5ccb      	ldrb	r3, [r1, r3]
 8000cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <HAL_Init+0x58>)
 8000ce2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ce4:	200f      	movs	r0, #15
 8000ce6:	f000 f813 	bl	8000d10 <HAL_InitTick>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e002      	b.n	8000cfa <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf4:	f7ff fe4b 	bl	800098e <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40022000 	.word	0x40022000
 8000d04:	46020c00 	.word	0x46020c00
 8000d08:	08007a20 	.word	0x08007a20
 8000d0c:	20000000 	.word	0x20000000

08000d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_InitTick+0x60>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d101      	bne.n	8000d24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e021      	b.n	8000d68 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <HAL_InitTick+0x64>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_InitTick+0x60>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f939 	bl	8000fb2 <HAL_SYSTICK_Config>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e00e      	b.n	8000d68 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d80a      	bhi.n	8000d66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d50:	2200      	movs	r2, #0
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295
 8000d58:	f000 f911 	bl	8000f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d5c:	4a06      	ldr	r2, [pc, #24]	; (8000d78 <HAL_InitTick+0x68>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e000      	b.n	8000d68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000000 	.word	0x20000000
 8000d78:	20000004 	.word	0x20000004

08000d7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x20>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x24>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <HAL_IncTick+0x24>)
 8000d8e:	6013      	str	r3, [r2, #0]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	20000348 	.word	0x20000348

08000da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <HAL_GetTick+0x14>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000348 	.word	0x20000348

08000dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc4:	f7ff ffee 	bl	8000da4 <HAL_GetTick>
 8000dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd4:	d005      	beq.n	8000de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <HAL_Delay+0x44>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4413      	add	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000de2:	bf00      	nop
 8000de4:	f7ff ffde 	bl	8000da4 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d8f7      	bhi.n	8000de4 <HAL_Delay+0x28>
  {
  }
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000008 	.word	0x20000008

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	db0a      	blt.n	8000e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	490c      	ldr	r1, [pc, #48]	; (8000eb4 <__NVIC_SetPriority+0x4c>)
 8000e82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e86:	0112      	lsls	r2, r2, #4
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e90:	e00a      	b.n	8000ea8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4908      	ldr	r1, [pc, #32]	; (8000eb8 <__NVIC_SetPriority+0x50>)
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	3b04      	subs	r3, #4
 8000ea0:	0112      	lsls	r2, r2, #4
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	761a      	strb	r2, [r3, #24]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	; 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f1c3 0307 	rsb	r3, r3, #7
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	bf28      	it	cs
 8000eda:	2304      	movcs	r3, #4
 8000edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	2b06      	cmp	r3, #6
 8000ee4:	d902      	bls.n	8000eec <NVIC_EncodePriority+0x30>
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3b03      	subs	r3, #3
 8000eea:	e000      	b.n	8000eee <NVIC_EncodePriority+0x32>
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43da      	mvns	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f04:	f04f 31ff 	mov.w	r1, #4294967295
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	43d9      	mvns	r1, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	4313      	orrs	r3, r2
         );
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3724      	adds	r7, #36	; 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f34:	d301      	bcc.n	8000f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00f      	b.n	8000f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <SysTick_Config+0x40>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f42:	210f      	movs	r1, #15
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f7ff ff8e 	bl	8000e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <SysTick_Config+0x40>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f52:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <SysTick_Config+0x40>)
 8000f54:	2207      	movs	r2, #7
 8000f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	e000e010 	.word	0xe000e010

08000f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ff47 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b086      	sub	sp, #24
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8c:	f7ff ff5e 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000f90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	6978      	ldr	r0, [r7, #20]
 8000f98:	f7ff ff90 	bl	8000ebc <NVIC_EncodePriority>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff5f 	bl	8000e68 <__NVIC_SetPriority>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffb2 	bl	8000f24 <SysTick_Config>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000fde:	e1ba      	b.n	8001356 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fec:	4013      	ands	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f000 81aa 	beq.w	8001350 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a55      	ldr	r2, [pc, #340]	; (8001154 <HAL_GPIO_Init+0x188>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d15d      	bne.n	80010c0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800100a:	2201      	movs	r2, #1
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	69fa      	ldr	r2, [r7, #28]
 8001016:	4013      	ands	r3, r2
 8001018:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0201 	and.w	r2, r3, #1
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69fa      	ldr	r2, [r7, #28]
 800102a:	4313      	orrs	r3, r2
 800102c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69fa      	ldr	r2, [r7, #28]
 8001032:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001034:	4a48      	ldr	r2, [pc, #288]	; (8001158 <HAL_GPIO_Init+0x18c>)
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800103c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800103e:	4a46      	ldr	r2, [pc, #280]	; (8001158 <HAL_GPIO_Init+0x18c>)
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	4413      	add	r3, r2
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	08da      	lsrs	r2, r3, #3
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	3208      	adds	r2, #8
 8001052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001056:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	220f      	movs	r2, #15
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	69fa      	ldr	r2, [r7, #28]
 800106a:	4013      	ands	r3, r2
 800106c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	220b      	movs	r2, #11
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69fa      	ldr	r2, [r7, #28]
 800107e:	4313      	orrs	r3, r2
 8001080:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	08da      	lsrs	r2, r3, #3
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	3208      	adds	r2, #8
 800108a:	69f9      	ldr	r1, [r7, #28]
 800108c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69fa      	ldr	r2, [r7, #28]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2202      	movs	r2, #2
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	69fa      	ldr	r2, [r7, #28]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	69fa      	ldr	r2, [r7, #28]
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	e067      	b.n	8001190 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x104>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b12      	cmp	r3, #18
 80010ce:	d145      	bne.n	800115c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	08da      	lsrs	r2, r3, #3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3208      	adds	r2, #8
 80010d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	220f      	movs	r2, #15
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69fa      	ldr	r2, [r7, #28]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	f003 020f 	and.w	r2, r3, #15
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69fa      	ldr	r2, [r7, #28]
 800110a:	4313      	orrs	r3, r2
 800110c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	08da      	lsrs	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3208      	adds	r2, #8
 8001116:	69f9      	ldr	r1, [r7, #28]
 8001118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69fa      	ldr	r2, [r7, #28]
 8001130:	4013      	ands	r3, r2
 8001132:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0203 	and.w	r2, r3, #3
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69fa      	ldr	r2, [r7, #28]
 8001146:	4313      	orrs	r3, r2
 8001148:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	69fa      	ldr	r2, [r7, #28]
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	e01e      	b.n	8001190 <HAL_GPIO_Init+0x1c4>
 8001152:	bf00      	nop
 8001154:	46020000 	.word	0x46020000
 8001158:	08007a78 	.word	0x08007a78
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	2203      	movs	r2, #3
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69fa      	ldr	r2, [r7, #28]
 8001170:	4013      	ands	r3, r2
 8001172:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0203 	and.w	r2, r3, #3
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	4313      	orrs	r3, r2
 8001188:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	69fa      	ldr	r2, [r7, #28]
 800118e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d00b      	beq.n	80011b0 <HAL_GPIO_Init+0x1e4>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b02      	cmp	r3, #2
 800119e:	d007      	beq.n	80011b0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a4:	2b11      	cmp	r3, #17
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b12      	cmp	r3, #18
 80011ae:	d130      	bne.n	8001212 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	2203      	movs	r2, #3
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69fa      	ldr	r2, [r7, #28]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69fa      	ldr	r2, [r7, #28]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	69fa      	ldr	r2, [r7, #28]
 80011de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80011e6:	2201      	movs	r2, #1
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69fa      	ldr	r2, [r7, #28]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	091b      	lsrs	r3, r3, #4
 80011fc:	f003 0201 	and.w	r2, r3, #1
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	69fa      	ldr	r2, [r7, #28]
 8001208:	4313      	orrs	r3, r2
 800120a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	69fa      	ldr	r2, [r7, #28]
 8001210:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b03      	cmp	r3, #3
 8001218:	d017      	beq.n	800124a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	2203      	movs	r2, #3
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	4013      	ands	r3, r2
 8001230:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	69fa      	ldr	r2, [r7, #28]
 8001240:	4313      	orrs	r3, r2
 8001242:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	69fa      	ldr	r2, [r7, #28]
 8001248:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d07c      	beq.n	8001350 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001256:	4a47      	ldr	r2, [pc, #284]	; (8001374 <HAL_GPIO_Init+0x3a8>)
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	3318      	adds	r3, #24
 800125e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001262:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	220f      	movs	r2, #15
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	69fa      	ldr	r2, [r7, #28]
 8001276:	4013      	ands	r3, r2
 8001278:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	0a9a      	lsrs	r2, r3, #10
 800127e:	4b3e      	ldr	r3, [pc, #248]	; (8001378 <HAL_GPIO_Init+0x3ac>)
 8001280:	4013      	ands	r3, r2
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	f002 0203 	and.w	r2, r2, #3
 8001288:	00d2      	lsls	r2, r2, #3
 800128a:	4093      	lsls	r3, r2
 800128c:	69fa      	ldr	r2, [r7, #28]
 800128e:	4313      	orrs	r3, r2
 8001290:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001292:	4938      	ldr	r1, [pc, #224]	; (8001374 <HAL_GPIO_Init+0x3a8>)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	3318      	adds	r3, #24
 800129a:	69fa      	ldr	r2, [r7, #28]
 800129c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80012a0:	4b34      	ldr	r3, [pc, #208]	; (8001374 <HAL_GPIO_Init+0x3a8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69fa      	ldr	r2, [r7, #28]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80012bc:	69fa      	ldr	r2, [r7, #28]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80012c4:	4a2b      	ldr	r2, [pc, #172]	; (8001374 <HAL_GPIO_Init+0x3a8>)
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80012ca:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <HAL_GPIO_Init+0x3a8>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69fa      	ldr	r2, [r7, #28]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80012e6:	69fa      	ldr	r2, [r7, #28]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80012ee:	4a21      	ldr	r2, [pc, #132]	; (8001374 <HAL_GPIO_Init+0x3a8>)
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80012f4:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <HAL_GPIO_Init+0x3a8>)
 80012f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	43db      	mvns	r3, r3
 8001300:	69fa      	ldr	r2, [r7, #28]
 8001302:	4013      	ands	r3, r2
 8001304:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001312:	69fa      	ldr	r2, [r7, #28]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800131a:	4a16      	ldr	r2, [pc, #88]	; (8001374 <HAL_GPIO_Init+0x3a8>)
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <HAL_GPIO_Init+0x3a8>)
 8001324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001328:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	43db      	mvns	r3, r3
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	4013      	ands	r3, r2
 8001332:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4313      	orrs	r3, r2
 8001346:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001348:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <HAL_GPIO_Init+0x3a8>)
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	3301      	adds	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	fa22 f303 	lsr.w	r3, r2, r3
 8001360:	2b00      	cmp	r3, #0
 8001362:	f47f ae3d 	bne.w	8000fe0 <HAL_GPIO_Init+0x14>
  }
}
 8001366:	bf00      	nop
 8001368:	bf00      	nop
 800136a:	3724      	adds	r7, #36	; 0x24
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	46022000 	.word	0x46022000
 8001378:	002f7f7f 	.word	0x002f7f7f

0800137c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	73fb      	strb	r3, [r7, #15]
 8001398:	e007      	b.n	80013aa <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800139a:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 0204 	bic.w	r2, r3, #4
 80013a2:	4905      	ldr	r1, [pc, #20]	; (80013b8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	40030400 	.word	0x40030400

080013bc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_ICACHE_Enable+0x1c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <HAL_ICACHE_Enable+0x1c>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	40030400 	.word	0x40030400

080013dc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80013e4:	4b39      	ldr	r3, [pc, #228]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80013e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ec:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d10b      	bne.n	800140e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013fc:	d905      	bls.n	800140a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80013fe:	4b33      	ldr	r3, [pc, #204]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	4a32      	ldr	r2, [pc, #200]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001408:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	e057      	b.n	80014be <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001414:	d90a      	bls.n	800142c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8001416:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4313      	orrs	r3, r2
 8001422:	4a2a      	ldr	r2, [pc, #168]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001428:	60d3      	str	r3, [r2, #12]
 800142a:	e007      	b.n	800143c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800142c:	4b27      	ldr	r3, [pc, #156]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001434:	4925      	ldr	r1, [pc, #148]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4313      	orrs	r3, r2
 800143a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800143c:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a24      	ldr	r2, [pc, #144]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001442:	fba2 2303 	umull	r2, r3, r2, r3
 8001446:	099b      	lsrs	r3, r3, #6
 8001448:	2232      	movs	r2, #50	; 0x32
 800144a:	fb02 f303 	mul.w	r3, r2, r3
 800144e:	4a21      	ldr	r2, [pc, #132]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001450:	fba2 2303 	umull	r2, r3, r2, r3
 8001454:	099b      	lsrs	r3, r3, #6
 8001456:	3301      	adds	r3, #1
 8001458:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800145a:	e002      	b.n	8001462 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3b01      	subs	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d102      	bne.n	8001474 <HAL_PWREx_ControlVoltageScaling+0x98>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1f3      	bne.n	800145c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d01b      	beq.n	80014b2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a15      	ldr	r2, [pc, #84]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	099b      	lsrs	r3, r3, #6
 8001486:	2232      	movs	r2, #50	; 0x32
 8001488:	fb02 f303 	mul.w	r3, r2, r3
 800148c:	4a11      	ldr	r2, [pc, #68]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800148e:	fba2 2303 	umull	r2, r3, r2, r3
 8001492:	099b      	lsrs	r3, r3, #6
 8001494:	3301      	adds	r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001498:	e002      	b.n	80014a0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3b01      	subs	r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80014a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d102      	bne.n	80014b2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f3      	bne.n	800149a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e000      	b.n	80014be <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	46020800 	.word	0x46020800
 80014d0:	20000000 	.word	0x20000000
 80014d4:	10624dd3 	.word	0x10624dd3

080014d8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80014dc:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80014de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	46020800 	.word	0x46020800

080014f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08e      	sub	sp, #56	; 0x38
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	f000 bec8 	b.w	800229e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800150e:	4b99      	ldr	r3, [pc, #612]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001518:	4b96      	ldr	r3, [pc, #600]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 800151a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 816c 	beq.w	8001808 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001532:	2b00      	cmp	r3, #0
 8001534:	d007      	beq.n	8001546 <HAL_RCC_OscConfig+0x52>
 8001536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001538:	2b0c      	cmp	r3, #12
 800153a:	f040 80de 	bne.w	80016fa <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800153e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001540:	2b01      	cmp	r3, #1
 8001542:	f040 80da 	bne.w	80016fa <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d102      	bne.n	8001554 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	f000 bea5 	b.w	800229e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001558:	4b86      	ldr	r3, [pc, #536]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d004      	beq.n	800156e <HAL_RCC_OscConfig+0x7a>
 8001564:	4b83      	ldr	r3, [pc, #524]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800156c:	e005      	b.n	800157a <HAL_RCC_OscConfig+0x86>
 800156e:	4b81      	ldr	r3, [pc, #516]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001570:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001574:	041b      	lsls	r3, r3, #16
 8001576:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800157a:	4293      	cmp	r3, r2
 800157c:	d255      	bcs.n	800162a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800157e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001580:	2b00      	cmp	r3, #0
 8001582:	d10a      	bne.n	800159a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	4618      	mov	r0, r3
 800158a:	f001 f9df 	bl	800294c <RCC_SetFlashLatencyFromMSIRange>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d002      	beq.n	800159a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	f000 be82 	b.w	800229e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800159a:	4b76      	ldr	r3, [pc, #472]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	4a75      	ldr	r2, [pc, #468]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 80015a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015a4:	6093      	str	r3, [r2, #8]
 80015a6:	4b73      	ldr	r3, [pc, #460]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	4970      	ldr	r1, [pc, #448]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80015c0:	d309      	bcc.n	80015d6 <HAL_RCC_OscConfig+0xe2>
 80015c2:	4b6c      	ldr	r3, [pc, #432]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f023 021f 	bic.w	r2, r3, #31
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	4969      	ldr	r1, [pc, #420]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	60cb      	str	r3, [r1, #12]
 80015d4:	e07e      	b.n	80016d4 <HAL_RCC_OscConfig+0x1e0>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	2b00      	cmp	r3, #0
 80015dc:	da0a      	bge.n	80015f4 <HAL_RCC_OscConfig+0x100>
 80015de:	4b65      	ldr	r3, [pc, #404]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	015b      	lsls	r3, r3, #5
 80015ec:	4961      	ldr	r1, [pc, #388]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	60cb      	str	r3, [r1, #12]
 80015f2:	e06f      	b.n	80016d4 <HAL_RCC_OscConfig+0x1e0>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015fc:	d30a      	bcc.n	8001614 <HAL_RCC_OscConfig+0x120>
 80015fe:	4b5d      	ldr	r3, [pc, #372]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	029b      	lsls	r3, r3, #10
 800160c:	4959      	ldr	r1, [pc, #356]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 800160e:	4313      	orrs	r3, r2
 8001610:	60cb      	str	r3, [r1, #12]
 8001612:	e05f      	b.n	80016d4 <HAL_RCC_OscConfig+0x1e0>
 8001614:	4b57      	ldr	r3, [pc, #348]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	03db      	lsls	r3, r3, #15
 8001622:	4954      	ldr	r1, [pc, #336]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001624:	4313      	orrs	r3, r2
 8001626:	60cb      	str	r3, [r1, #12]
 8001628:	e054      	b.n	80016d4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800162a:	4b52      	ldr	r3, [pc, #328]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	4a51      	ldr	r2, [pc, #324]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001630:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001634:	6093      	str	r3, [r2, #8]
 8001636:	4b4f      	ldr	r3, [pc, #316]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	494c      	ldr	r1, [pc, #304]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001644:	4313      	orrs	r3, r2
 8001646:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001650:	d309      	bcc.n	8001666 <HAL_RCC_OscConfig+0x172>
 8001652:	4b48      	ldr	r3, [pc, #288]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	f023 021f 	bic.w	r2, r3, #31
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	4945      	ldr	r1, [pc, #276]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001660:	4313      	orrs	r3, r2
 8001662:	60cb      	str	r3, [r1, #12]
 8001664:	e028      	b.n	80016b8 <HAL_RCC_OscConfig+0x1c4>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	2b00      	cmp	r3, #0
 800166c:	da0a      	bge.n	8001684 <HAL_RCC_OscConfig+0x190>
 800166e:	4b41      	ldr	r3, [pc, #260]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	015b      	lsls	r3, r3, #5
 800167c:	493d      	ldr	r1, [pc, #244]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 800167e:	4313      	orrs	r3, r2
 8001680:	60cb      	str	r3, [r1, #12]
 8001682:	e019      	b.n	80016b8 <HAL_RCC_OscConfig+0x1c4>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800168c:	d30a      	bcc.n	80016a4 <HAL_RCC_OscConfig+0x1b0>
 800168e:	4b39      	ldr	r3, [pc, #228]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	029b      	lsls	r3, r3, #10
 800169c:	4935      	ldr	r1, [pc, #212]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	60cb      	str	r3, [r1, #12]
 80016a2:	e009      	b.n	80016b8 <HAL_RCC_OscConfig+0x1c4>
 80016a4:	4b33      	ldr	r3, [pc, #204]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	03db      	lsls	r3, r3, #15
 80016b2:	4930      	ldr	r1, [pc, #192]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80016b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10a      	bne.n	80016d4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	4618      	mov	r0, r3
 80016c4:	f001 f942 	bl	800294c <RCC_SetFlashLatencyFromMSIRange>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d002      	beq.n	80016d4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	f000 bde5 	b.w	800229e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80016d4:	f001 f8e4 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016d8:	4b27      	ldr	r3, [pc, #156]	; (8001778 <HAL_RCC_OscConfig+0x284>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fb17 	bl	8000d10 <HAL_InitTick>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 80016e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 808a 	beq.w	8001806 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80016f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016f6:	f000 bdd2 	b.w	800229e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d066      	beq.n	80017d0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001702:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a1b      	ldr	r2, [pc, #108]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800170e:	f7ff fb49 	bl	8000da4 <HAL_GetTick>
 8001712:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001714:	e009      	b.n	800172a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001716:	f7ff fb45 	bl	8000da4 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d902      	bls.n	800172a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	f000 bdba 	b.w	800229e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0ef      	beq.n	8001716 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 800173c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001740:	6093      	str	r3, [r2, #8]
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	4909      	ldr	r1, [pc, #36]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001750:	4313      	orrs	r3, r2
 8001752:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800175c:	d30e      	bcc.n	800177c <HAL_RCC_OscConfig+0x288>
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	f023 021f 	bic.w	r2, r3, #31
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	4902      	ldr	r1, [pc, #8]	; (8001774 <HAL_RCC_OscConfig+0x280>)
 800176c:	4313      	orrs	r3, r2
 800176e:	60cb      	str	r3, [r1, #12]
 8001770:	e04a      	b.n	8001808 <HAL_RCC_OscConfig+0x314>
 8001772:	bf00      	nop
 8001774:	46020c00 	.word	0x46020c00
 8001778:	20000004 	.word	0x20000004
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	2b00      	cmp	r3, #0
 8001782:	da0a      	bge.n	800179a <HAL_RCC_OscConfig+0x2a6>
 8001784:	4b98      	ldr	r3, [pc, #608]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	015b      	lsls	r3, r3, #5
 8001792:	4995      	ldr	r1, [pc, #596]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 8001794:	4313      	orrs	r3, r2
 8001796:	60cb      	str	r3, [r1, #12]
 8001798:	e036      	b.n	8001808 <HAL_RCC_OscConfig+0x314>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a2:	d30a      	bcc.n	80017ba <HAL_RCC_OscConfig+0x2c6>
 80017a4:	4b90      	ldr	r3, [pc, #576]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	029b      	lsls	r3, r3, #10
 80017b2:	498d      	ldr	r1, [pc, #564]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	60cb      	str	r3, [r1, #12]
 80017b8:	e026      	b.n	8001808 <HAL_RCC_OscConfig+0x314>
 80017ba:	4b8b      	ldr	r3, [pc, #556]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	03db      	lsls	r3, r3, #15
 80017c8:	4987      	ldr	r1, [pc, #540]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	60cb      	str	r3, [r1, #12]
 80017ce:	e01b      	b.n	8001808 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80017d0:	4b85      	ldr	r3, [pc, #532]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a84      	ldr	r2, [pc, #528]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80017d6:	f023 0301 	bic.w	r3, r3, #1
 80017da:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80017dc:	f7ff fae2 	bl	8000da4 <HAL_GetTick>
 80017e0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80017e2:	e009      	b.n	80017f8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017e4:	f7ff fade 	bl	8000da4 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d902      	bls.n	80017f8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	f000 bd53 	b.w	800229e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80017f8:	4b7b      	ldr	r3, [pc, #492]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1ef      	bne.n	80017e4 <HAL_RCC_OscConfig+0x2f0>
 8001804:	e000      	b.n	8001808 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001806:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 808b 	beq.w	800192c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001818:	2b08      	cmp	r3, #8
 800181a:	d005      	beq.n	8001828 <HAL_RCC_OscConfig+0x334>
 800181c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800181e:	2b0c      	cmp	r3, #12
 8001820:	d109      	bne.n	8001836 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001824:	2b03      	cmp	r3, #3
 8001826:	d106      	bne.n	8001836 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d17d      	bne.n	800192c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	f000 bd34 	b.w	800229e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800183e:	d106      	bne.n	800184e <HAL_RCC_OscConfig+0x35a>
 8001840:	4b69      	ldr	r3, [pc, #420]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a68      	ldr	r2, [pc, #416]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 8001846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	e041      	b.n	80018d2 <HAL_RCC_OscConfig+0x3de>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001856:	d112      	bne.n	800187e <HAL_RCC_OscConfig+0x38a>
 8001858:	4b63      	ldr	r3, [pc, #396]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a62      	ldr	r2, [pc, #392]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 800185e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	4b60      	ldr	r3, [pc, #384]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a5f      	ldr	r2, [pc, #380]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 800186a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b5d      	ldr	r3, [pc, #372]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a5c      	ldr	r2, [pc, #368]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 8001876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	e029      	b.n	80018d2 <HAL_RCC_OscConfig+0x3de>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001886:	d112      	bne.n	80018ae <HAL_RCC_OscConfig+0x3ba>
 8001888:	4b57      	ldr	r3, [pc, #348]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a56      	ldr	r2, [pc, #344]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 800188e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	4b54      	ldr	r3, [pc, #336]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a53      	ldr	r2, [pc, #332]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 800189a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	4b51      	ldr	r3, [pc, #324]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a50      	ldr	r2, [pc, #320]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80018a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	e011      	b.n	80018d2 <HAL_RCC_OscConfig+0x3de>
 80018ae:	4b4e      	ldr	r3, [pc, #312]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a4d      	ldr	r2, [pc, #308]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80018b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b4b      	ldr	r3, [pc, #300]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a4a      	ldr	r2, [pc, #296]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80018c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	4b48      	ldr	r3, [pc, #288]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a47      	ldr	r2, [pc, #284]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80018cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80018d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d014      	beq.n	8001904 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80018da:	f7ff fa63 	bl	8000da4 <HAL_GetTick>
 80018de:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018e0:	e009      	b.n	80018f6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e2:	f7ff fa5f 	bl	8000da4 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b64      	cmp	r3, #100	; 0x64
 80018ee:	d902      	bls.n	80018f6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	f000 bcd4 	b.w	800229e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018f6:	4b3c      	ldr	r3, [pc, #240]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0ef      	beq.n	80018e2 <HAL_RCC_OscConfig+0x3ee>
 8001902:	e013      	b.n	800192c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001904:	f7ff fa4e 	bl	8000da4 <HAL_GetTick>
 8001908:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800190a:	e009      	b.n	8001920 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800190c:	f7ff fa4a 	bl	8000da4 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b64      	cmp	r3, #100	; 0x64
 8001918:	d902      	bls.n	8001920 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	f000 bcbf 	b.w	800229e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001920:	4b31      	ldr	r3, [pc, #196]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1ef      	bne.n	800190c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d05f      	beq.n	80019f8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800193a:	2b04      	cmp	r3, #4
 800193c:	d005      	beq.n	800194a <HAL_RCC_OscConfig+0x456>
 800193e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001940:	2b0c      	cmp	r3, #12
 8001942:	d114      	bne.n	800196e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001946:	2b02      	cmp	r3, #2
 8001948:	d111      	bne.n	800196e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	f000 bca3 	b.w	800229e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001958:	4b23      	ldr	r3, [pc, #140]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	041b      	lsls	r3, r3, #16
 8001966:	4920      	ldr	r1, [pc, #128]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 8001968:	4313      	orrs	r3, r2
 800196a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800196c:	e044      	b.n	80019f8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d024      	beq.n	80019c0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a1b      	ldr	r2, [pc, #108]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 800197c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001980:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001982:	f7ff fa0f 	bl	8000da4 <HAL_GetTick>
 8001986:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001988:	e009      	b.n	800199e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800198a:	f7ff fa0b 	bl	8000da4 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d902      	bls.n	800199e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	f000 bc80 	b.w	800229e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0ef      	beq.n	800198a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80019aa:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	041b      	lsls	r3, r3, #16
 80019b8:	490b      	ldr	r1, [pc, #44]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	610b      	str	r3, [r1, #16]
 80019be:	e01b      	b.n	80019f8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a08      	ldr	r2, [pc, #32]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80019c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019ca:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80019cc:	f7ff f9ea 	bl	8000da4 <HAL_GetTick>
 80019d0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019d2:	e00b      	b.n	80019ec <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d4:	f7ff f9e6 	bl	8000da4 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d904      	bls.n	80019ec <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	f000 bc5b 	b.w	800229e <HAL_RCC_OscConfig+0xdaa>
 80019e8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019ec:	4baf      	ldr	r3, [pc, #700]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1ed      	bne.n	80019d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80c8 	beq.w	8001b96 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a0c:	4ba7      	ldr	r3, [pc, #668]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d111      	bne.n	8001a3e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1a:	4ba4      	ldr	r3, [pc, #656]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a20:	4aa2      	ldr	r2, [pc, #648]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001a22:	f043 0304 	orr.w	r3, r3, #4
 8001a26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001a2a:	4ba0      	ldr	r3, [pc, #640]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001a3e:	4b9c      	ldr	r3, [pc, #624]	; (8001cb0 <HAL_RCC_OscConfig+0x7bc>)
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d119      	bne.n	8001a7e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001a4a:	4b99      	ldr	r3, [pc, #612]	; (8001cb0 <HAL_RCC_OscConfig+0x7bc>)
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	4a98      	ldr	r2, [pc, #608]	; (8001cb0 <HAL_RCC_OscConfig+0x7bc>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a56:	f7ff f9a5 	bl	8000da4 <HAL_GetTick>
 8001a5a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001a5c:	e009      	b.n	8001a72 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5e:	f7ff f9a1 	bl	8000da4 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d902      	bls.n	8001a72 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	f000 bc16 	b.w	800229e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001a72:	4b8f      	ldr	r3, [pc, #572]	; (8001cb0 <HAL_RCC_OscConfig+0x7bc>)
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0ef      	beq.n	8001a5e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d05f      	beq.n	8001b46 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001a86:	4b89      	ldr	r3, [pc, #548]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a8c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	699a      	ldr	r2, [r3, #24]
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d037      	beq.n	8001b0c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d006      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e3f4      	b.n	800229e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d01b      	beq.n	8001af6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8001abe:	4b7b      	ldr	r3, [pc, #492]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001ac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ac4:	4a79      	ldr	r2, [pc, #484]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001ac6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001aca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8001ace:	f7ff f969 	bl	8000da4 <HAL_GetTick>
 8001ad2:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad6:	f7ff f965 	bl	8000da4 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e3da      	b.n	800229e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001ae8:	4b70      	ldr	r3, [pc, #448]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001aea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1ef      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001af6:	4b6d      	ldr	r3, [pc, #436]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001af8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001afc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4969      	ldr	r1, [pc, #420]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001b0c:	4b67      	ldr	r3, [pc, #412]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001b0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b12:	4a66      	ldr	r2, [pc, #408]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001b14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b18:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001b1c:	f7ff f942 	bl	8000da4 <HAL_GetTick>
 8001b20:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b24:	f7ff f93e 	bl	8000da4 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b05      	cmp	r3, #5
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e3b3      	b.n	800229e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001b36:	4b5d      	ldr	r3, [pc, #372]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001b38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0ef      	beq.n	8001b24 <HAL_RCC_OscConfig+0x630>
 8001b44:	e01b      	b.n	8001b7e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001b46:	4b59      	ldr	r3, [pc, #356]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001b48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b4c:	4a57      	ldr	r2, [pc, #348]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001b4e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001b52:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001b56:	f7ff f925 	bl	8000da4 <HAL_GetTick>
 8001b5a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5e:	f7ff f921 	bl	8000da4 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b05      	cmp	r3, #5
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e396      	b.n	800229e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001b70:	4b4e      	ldr	r3, [pc, #312]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001b72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1ef      	bne.n	8001b5e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b7e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b86:	4b49      	ldr	r3, [pc, #292]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8c:	4a47      	ldr	r2, [pc, #284]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001b8e:	f023 0304 	bic.w	r3, r3, #4
 8001b92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 8111 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001baa:	4b40      	ldr	r3, [pc, #256]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d111      	bne.n	8001bdc <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb8:	4b3c      	ldr	r3, [pc, #240]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bbe:	4a3b      	ldr	r2, [pc, #236]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001bc8:	4b38      	ldr	r3, [pc, #224]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001bdc:	4b34      	ldr	r3, [pc, #208]	; (8001cb0 <HAL_RCC_OscConfig+0x7bc>)
 8001bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d118      	bne.n	8001c1a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001be8:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <HAL_RCC_OscConfig+0x7bc>)
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	4a30      	ldr	r2, [pc, #192]	; (8001cb0 <HAL_RCC_OscConfig+0x7bc>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf4:	f7ff f8d6 	bl	8000da4 <HAL_GetTick>
 8001bf8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bfc:	f7ff f8d2 	bl	8000da4 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e347      	b.n	800229e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001c0e:	4b28      	ldr	r3, [pc, #160]	; (8001cb0 <HAL_RCC_OscConfig+0x7bc>)
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d01f      	beq.n	8001c66 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d010      	beq.n	8001c54 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001c34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c38:	4a1c      	ldr	r2, [pc, #112]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001c3a:	f043 0304 	orr.w	r3, r3, #4
 8001c3e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c42:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c48:	4a18      	ldr	r2, [pc, #96]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c52:	e018      	b.n	8001c86 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c54:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001c56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c5a:	4a14      	ldr	r2, [pc, #80]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c64:	e00f      	b.n	8001c86 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001c68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c6c:	4a0f      	ldr	r2, [pc, #60]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001c6e:	f023 0301 	bic.w	r3, r3, #1
 8001c72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001c78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <HAL_RCC_OscConfig+0x7b8>)
 8001c7e:	f023 0304 	bic.w	r3, r3, #4
 8001c82:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d057      	beq.n	8001d3e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8001c8e:	f7ff f889 	bl	8000da4 <HAL_GetTick>
 8001c92:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c94:	e00e      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c96:	f7ff f885 	bl	8000da4 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d905      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e2f8      	b.n	800229e <HAL_RCC_OscConfig+0xdaa>
 8001cac:	46020c00 	.word	0x46020c00
 8001cb0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cb4:	4b9c      	ldr	r3, [pc, #624]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001cb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0e9      	beq.n	8001c96 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d01b      	beq.n	8001d06 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001cce:	4b96      	ldr	r3, [pc, #600]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001cd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cd4:	4a94      	ldr	r2, [pc, #592]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cda:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce0:	f7ff f860 	bl	8000da4 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e2d3      	b.n	800229e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001cf6:	4b8c      	ldr	r3, [pc, #560]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001cf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0ed      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x7ec>
 8001d04:	e053      	b.n	8001dae <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001d06:	4b88      	ldr	r3, [pc, #544]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001d08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d0c:	4a86      	ldr	r2, [pc, #536]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d12:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d16:	e00a      	b.n	8001d2e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d18:	f7ff f844 	bl	8000da4 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e2b7      	b.n	800229e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d2e:	4b7e      	ldr	r3, [pc, #504]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001d30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1ed      	bne.n	8001d18 <HAL_RCC_OscConfig+0x824>
 8001d3c:	e037      	b.n	8001dae <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001d3e:	f7ff f831 	bl	8000da4 <HAL_GetTick>
 8001d42:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d44:	e00a      	b.n	8001d5c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d46:	f7ff f82d 	bl	8000da4 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e2a0      	b.n	800229e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d5c:	4b72      	ldr	r3, [pc, #456]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001d5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1ed      	bne.n	8001d46 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001d6a:	4b6f      	ldr	r3, [pc, #444]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d01a      	beq.n	8001dae <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001d78:	4b6b      	ldr	r3, [pc, #428]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001d7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d7e:	4a6a      	ldr	r2, [pc, #424]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001d80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d84:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d88:	e00a      	b.n	8001da0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8a:	f7ff f80b 	bl	8000da4 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e27e      	b.n	800229e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001da0:	4b61      	ldr	r3, [pc, #388]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001da2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001da6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1ed      	bne.n	8001d8a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dae:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db6:	4b5c      	ldr	r3, [pc, #368]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dbc:	4a5a      	ldr	r2, [pc, #360]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001dbe:	f023 0304 	bic.w	r3, r3, #4
 8001dc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0320 	and.w	r3, r3, #32
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d036      	beq.n	8001e40 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d019      	beq.n	8001e0e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001dda:	4b53      	ldr	r3, [pc, #332]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a52      	ldr	r2, [pc, #328]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001de0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001de4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001de6:	f7fe ffdd 	bl	8000da4 <HAL_GetTick>
 8001dea:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dee:	f7fe ffd9 	bl	8000da4 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e24e      	b.n	800229e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001e00:	4b49      	ldr	r3, [pc, #292]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0f0      	beq.n	8001dee <HAL_RCC_OscConfig+0x8fa>
 8001e0c:	e018      	b.n	8001e40 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001e0e:	4b46      	ldr	r3, [pc, #280]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a45      	ldr	r2, [pc, #276]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001e14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e18:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001e1a:	f7fe ffc3 	bl	8000da4 <HAL_GetTick>
 8001e1e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e22:	f7fe ffbf 	bl	8000da4 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e234      	b.n	800229e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001e34:	4b3c      	ldr	r3, [pc, #240]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1f0      	bne.n	8001e22 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d036      	beq.n	8001eba <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d019      	beq.n	8001e88 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001e54:	4b34      	ldr	r3, [pc, #208]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a33      	ldr	r2, [pc, #204]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001e5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e5e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001e60:	f7fe ffa0 	bl	8000da4 <HAL_GetTick>
 8001e64:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001e68:	f7fe ff9c 	bl	8000da4 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e211      	b.n	800229e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001e7a:	4b2b      	ldr	r3, [pc, #172]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0x974>
 8001e86:	e018      	b.n	8001eba <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001e88:	4b27      	ldr	r3, [pc, #156]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a26      	ldr	r2, [pc, #152]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001e8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e92:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001e94:	f7fe ff86 	bl	8000da4 <HAL_GetTick>
 8001e98:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001e9c:	f7fe ff82 	bl	8000da4 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e1f7      	b.n	800229e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001eae:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d07f      	beq.n	8001fc6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d062      	beq.n	8001f94 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8001ece:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	4a15      	ldr	r2, [pc, #84]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001ed4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ed8:	6093      	str	r3, [r2, #8]
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee6:	4910      	ldr	r1, [pc, #64]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001ef4:	d309      	bcc.n	8001f0a <HAL_RCC_OscConfig+0xa16>
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f023 021f 	bic.w	r2, r3, #31
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4909      	ldr	r1, [pc, #36]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	60cb      	str	r3, [r1, #12]
 8001f08:	e02a      	b.n	8001f60 <HAL_RCC_OscConfig+0xa6c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	da0c      	bge.n	8001f2c <HAL_RCC_OscConfig+0xa38>
 8001f12:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	015b      	lsls	r3, r3, #5
 8001f20:	4901      	ldr	r1, [pc, #4]	; (8001f28 <HAL_RCC_OscConfig+0xa34>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	60cb      	str	r3, [r1, #12]
 8001f26:	e01b      	b.n	8001f60 <HAL_RCC_OscConfig+0xa6c>
 8001f28:	46020c00 	.word	0x46020c00
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f34:	d30a      	bcc.n	8001f4c <HAL_RCC_OscConfig+0xa58>
 8001f36:	4ba1      	ldr	r3, [pc, #644]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	029b      	lsls	r3, r3, #10
 8001f44:	499d      	ldr	r1, [pc, #628]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60cb      	str	r3, [r1, #12]
 8001f4a:	e009      	b.n	8001f60 <HAL_RCC_OscConfig+0xa6c>
 8001f4c:	4b9b      	ldr	r3, [pc, #620]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	03db      	lsls	r3, r3, #15
 8001f5a:	4998      	ldr	r1, [pc, #608]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001f60:	4b96      	ldr	r3, [pc, #600]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a95      	ldr	r2, [pc, #596]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 8001f66:	f043 0310 	orr.w	r3, r3, #16
 8001f6a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001f6c:	f7fe ff1a 	bl	8000da4 <HAL_GetTick>
 8001f70:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001f74:	f7fe ff16 	bl	8000da4 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e18b      	b.n	800229e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001f86:	4b8d      	ldr	r3, [pc, #564]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0320 	and.w	r3, r3, #32
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0xa80>
 8001f92:	e018      	b.n	8001fc6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8001f94:	4b89      	ldr	r3, [pc, #548]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a88      	ldr	r2, [pc, #544]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 8001f9a:	f023 0310 	bic.w	r3, r3, #16
 8001f9e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001fa0:	f7fe ff00 	bl	8000da4 <HAL_GetTick>
 8001fa4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001fa8:	f7fe fefc 	bl	8000da4 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e171      	b.n	800229e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001fba:	4b80      	ldr	r3, [pc, #512]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0320 	and.w	r3, r3, #32
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8166 	beq.w	800229c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fd6:	4b79      	ldr	r3, [pc, #484]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b0c      	cmp	r3, #12
 8001fe0:	f000 80f2 	beq.w	80021c8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	f040 80c5 	bne.w	8002178 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001fee:	4b73      	ldr	r3, [pc, #460]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a72      	ldr	r2, [pc, #456]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 8001ff4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ff8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001ffa:	f7fe fed3 	bl	8000da4 <HAL_GetTick>
 8001ffe:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002002:	f7fe fecf 	bl	8000da4 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e144      	b.n	800229e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002014:	4b69      	ldr	r3, [pc, #420]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f0      	bne.n	8002002 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002020:	4b66      	ldr	r3, [pc, #408]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 8002022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b00      	cmp	r3, #0
 800202c:	d111      	bne.n	8002052 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	4b63      	ldr	r3, [pc, #396]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 8002030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002034:	4a61      	ldr	r2, [pc, #388]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 8002036:	f043 0304 	orr.w	r3, r3, #4
 800203a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800203e:	4b5f      	ldr	r3, [pc, #380]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 8002040:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800204c:	2301      	movs	r3, #1
 800204e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002052:	4b5b      	ldr	r3, [pc, #364]	; (80021c0 <HAL_RCC_OscConfig+0xccc>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800205a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800205e:	d102      	bne.n	8002066 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002060:	2301      	movs	r3, #1
 8002062:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002066:	4b56      	ldr	r3, [pc, #344]	; (80021c0 <HAL_RCC_OscConfig+0xccc>)
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	4a55      	ldr	r2, [pc, #340]	; (80021c0 <HAL_RCC_OscConfig+0xccc>)
 800206c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002070:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002072:	4b52      	ldr	r3, [pc, #328]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 8002074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800207a:	f023 0303 	bic.w	r3, r3, #3
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002086:	3a01      	subs	r2, #1
 8002088:	0212      	lsls	r2, r2, #8
 800208a:	4311      	orrs	r1, r2
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002090:	430a      	orrs	r2, r1
 8002092:	494a      	ldr	r1, [pc, #296]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 8002094:	4313      	orrs	r3, r2
 8002096:	628b      	str	r3, [r1, #40]	; 0x28
 8002098:	4b48      	ldr	r3, [pc, #288]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 800209a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800209c:	4b49      	ldr	r3, [pc, #292]	; (80021c4 <HAL_RCC_OscConfig+0xcd0>)
 800209e:	4013      	ands	r3, r2
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020a4:	3a01      	subs	r2, #1
 80020a6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80020ae:	3a01      	subs	r2, #1
 80020b0:	0252      	lsls	r2, r2, #9
 80020b2:	b292      	uxth	r2, r2
 80020b4:	4311      	orrs	r1, r2
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020ba:	3a01      	subs	r2, #1
 80020bc:	0412      	lsls	r2, r2, #16
 80020be:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80020c2:	4311      	orrs	r1, r2
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80020c8:	3a01      	subs	r2, #1
 80020ca:	0612      	lsls	r2, r2, #24
 80020cc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80020d0:	430a      	orrs	r2, r1
 80020d2:	493a      	ldr	r1, [pc, #232]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80020d8:	4b38      	ldr	r3, [pc, #224]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 80020da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020dc:	4a37      	ldr	r2, [pc, #220]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 80020de:	f023 0310 	bic.w	r3, r3, #16
 80020e2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e8:	4a34      	ldr	r2, [pc, #208]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80020ee:	4b33      	ldr	r3, [pc, #204]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 80020f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f2:	4a32      	ldr	r2, [pc, #200]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 80020f4:	f043 0310 	orr.w	r3, r3, #16
 80020f8:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80020fa:	4b30      	ldr	r3, [pc, #192]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 80020fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fe:	f023 020c 	bic.w	r2, r3, #12
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002106:	492d      	ldr	r1, [pc, #180]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 8002108:	4313      	orrs	r3, r2
 800210a:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800210c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002110:	2b01      	cmp	r3, #1
 8002112:	d105      	bne.n	8002120 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002114:	4b2a      	ldr	r3, [pc, #168]	; (80021c0 <HAL_RCC_OscConfig+0xccc>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4a29      	ldr	r2, [pc, #164]	; (80021c0 <HAL_RCC_OscConfig+0xccc>)
 800211a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800211e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002120:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002124:	2b01      	cmp	r3, #1
 8002126:	d107      	bne.n	8002138 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002128:	4b24      	ldr	r3, [pc, #144]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 800212a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800212e:	4a23      	ldr	r2, [pc, #140]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 8002130:	f023 0304 	bic.w	r3, r3, #4
 8002134:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002138:	4b20      	ldr	r3, [pc, #128]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 800213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213c:	4a1f      	ldr	r2, [pc, #124]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 800213e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002142:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002144:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1c      	ldr	r2, [pc, #112]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 800214a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800214e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002150:	f7fe fe28 	bl	8000da4 <HAL_GetTick>
 8002154:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7fe fe24 	bl	8000da4 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e099      	b.n	800229e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800216a:	4b14      	ldr	r3, [pc, #80]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0xc64>
 8002176:	e091      	b.n	800229c <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002178:	4b10      	ldr	r3, [pc, #64]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0f      	ldr	r2, [pc, #60]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 800217e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002182:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002184:	f7fe fe0e 	bl	8000da4 <HAL_GetTick>
 8002188:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218c:	f7fe fe0a 	bl	8000da4 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e07f      	b.n	800229e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800219e:	4b07      	ldr	r3, [pc, #28]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80021aa:	4b04      	ldr	r3, [pc, #16]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 80021ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ae:	4a03      	ldr	r2, [pc, #12]	; (80021bc <HAL_RCC_OscConfig+0xcc8>)
 80021b0:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80021b4:	f023 0303 	bic.w	r3, r3, #3
 80021b8:	6293      	str	r3, [r2, #40]	; 0x28
 80021ba:	e06f      	b.n	800229c <HAL_RCC_OscConfig+0xda8>
 80021bc:	46020c00 	.word	0x46020c00
 80021c0:	46020800 	.word	0x46020800
 80021c4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80021c8:	4b37      	ldr	r3, [pc, #220]	; (80022a8 <HAL_RCC_OscConfig+0xdb4>)
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80021ce:	4b36      	ldr	r3, [pc, #216]	; (80022a8 <HAL_RCC_OscConfig+0xdb4>)
 80021d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d039      	beq.n	8002250 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0203 	and.w	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d132      	bne.n	8002250 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	0a1b      	lsrs	r3, r3, #8
 80021ee:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d129      	bne.n	8002250 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002206:	429a      	cmp	r2, r3
 8002208:	d122      	bne.n	8002250 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002214:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002216:	429a      	cmp	r2, r3
 8002218:	d11a      	bne.n	8002250 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	0a5b      	lsrs	r3, r3, #9
 800221e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002226:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002228:	429a      	cmp	r2, r3
 800222a:	d111      	bne.n	8002250 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	0c1b      	lsrs	r3, r3, #16
 8002230:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002238:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800223a:	429a      	cmp	r2, r3
 800223c:	d108      	bne.n	8002250 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	0e1b      	lsrs	r3, r3, #24
 8002242:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e024      	b.n	800229e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002254:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <HAL_RCC_OscConfig+0xdb4>)
 8002256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002258:	08db      	lsrs	r3, r3, #3
 800225a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002262:	429a      	cmp	r2, r3
 8002264:	d01a      	beq.n	800229c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <HAL_RCC_OscConfig+0xdb4>)
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	4a0f      	ldr	r2, [pc, #60]	; (80022a8 <HAL_RCC_OscConfig+0xdb4>)
 800226c:	f023 0310 	bic.w	r3, r3, #16
 8002270:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002272:	f7fe fd97 	bl	8000da4 <HAL_GetTick>
 8002276:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002278:	bf00      	nop
 800227a:	f7fe fd93 	bl	8000da4 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002282:	4293      	cmp	r3, r2
 8002284:	d0f9      	beq.n	800227a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228a:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <HAL_RCC_OscConfig+0xdb4>)
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_RCC_OscConfig+0xdb4>)
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <HAL_RCC_OscConfig+0xdb4>)
 8002296:	f043 0310 	orr.w	r3, r3, #16
 800229a:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3738      	adds	r7, #56	; 0x38
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	46020c00 	.word	0x46020c00

080022ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e1d9      	b.n	8002674 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022c0:	4b9b      	ldr	r3, [pc, #620]	; (8002530 <HAL_RCC_ClockConfig+0x284>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d910      	bls.n	80022f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b98      	ldr	r3, [pc, #608]	; (8002530 <HAL_RCC_ClockConfig+0x284>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 020f 	bic.w	r2, r3, #15
 80022d6:	4996      	ldr	r1, [pc, #600]	; (8002530 <HAL_RCC_ClockConfig+0x284>)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	4b94      	ldr	r3, [pc, #592]	; (8002530 <HAL_RCC_ClockConfig+0x284>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e1c1      	b.n	8002674 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d010      	beq.n	800231e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	4b8c      	ldr	r3, [pc, #560]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002308:	429a      	cmp	r2, r3
 800230a:	d908      	bls.n	800231e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800230c:	4b89      	ldr	r3, [pc, #548]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	4986      	ldr	r1, [pc, #536]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 800231a:	4313      	orrs	r3, r2
 800231c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d012      	beq.n	8002350 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	4b81      	ldr	r3, [pc, #516]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002338:	429a      	cmp	r2, r3
 800233a:	d909      	bls.n	8002350 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800233c:	4b7d      	ldr	r3, [pc, #500]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	497a      	ldr	r1, [pc, #488]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 800234c:	4313      	orrs	r3, r2
 800234e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d010      	beq.n	800237e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	4b74      	ldr	r3, [pc, #464]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002368:	429a      	cmp	r2, r3
 800236a:	d908      	bls.n	800237e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800236c:	4b71      	ldr	r3, [pc, #452]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	496e      	ldr	r1, [pc, #440]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 800237a:	4313      	orrs	r3, r2
 800237c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d010      	beq.n	80023ac <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	4b69      	ldr	r3, [pc, #420]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	429a      	cmp	r2, r3
 8002398:	d908      	bls.n	80023ac <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800239a:	4b66      	ldr	r3, [pc, #408]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	f023 020f 	bic.w	r2, r3, #15
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	4963      	ldr	r1, [pc, #396]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80d2 	beq.w	800255e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	d143      	bne.n	800244e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c6:	4b5b      	ldr	r3, [pc, #364]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 80023c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d110      	bne.n	80023f6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80023d4:	4b57      	ldr	r3, [pc, #348]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 80023d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023da:	4a56      	ldr	r2, [pc, #344]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 80023dc:	f043 0304 	orr.w	r3, r3, #4
 80023e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80023e4:	4b53      	ldr	r3, [pc, #332]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 80023e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80023f2:	2301      	movs	r3, #1
 80023f4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80023f6:	f7fe fcd5 	bl	8000da4 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80023fc:	4b4e      	ldr	r3, [pc, #312]	; (8002538 <HAL_RCC_ClockConfig+0x28c>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00f      	beq.n	8002428 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002408:	e008      	b.n	800241c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800240a:	f7fe fccb 	bl	8000da4 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e12b      	b.n	8002674 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800241c:	4b46      	ldr	r3, [pc, #280]	; (8002538 <HAL_RCC_ClockConfig+0x28c>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002428:	7dfb      	ldrb	r3, [r7, #23]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800242e:	4b41      	ldr	r3, [pc, #260]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 8002430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002434:	4a3f      	ldr	r2, [pc, #252]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 8002436:	f023 0304 	bic.w	r3, r3, #4
 800243a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800243e:	4b3d      	ldr	r3, [pc, #244]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d121      	bne.n	800248e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e112      	b.n	8002674 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d107      	bne.n	8002466 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002456:	4b37      	ldr	r3, [pc, #220]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d115      	bne.n	800248e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e106      	b.n	8002674 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d107      	bne.n	800247e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800246e:	4b31      	ldr	r3, [pc, #196]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0fa      	b.n	8002674 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800247e:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e0f2      	b.n	8002674 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800248e:	4b29      	ldr	r3, [pc, #164]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f023 0203 	bic.w	r2, r3, #3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4926      	ldr	r1, [pc, #152]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 800249c:	4313      	orrs	r3, r2
 800249e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80024a0:	f7fe fc80 	bl	8000da4 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d112      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b0:	f7fe fc78 	bl	8000da4 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e0d6      	b.n	8002674 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c6:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b0c      	cmp	r3, #12
 80024d0:	d1ee      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x204>
 80024d2:	e044      	b.n	800255e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d112      	bne.n	8002502 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024dc:	e00a      	b.n	80024f4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024de:	f7fe fc61 	bl	8000da4 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e0bf      	b.n	8002674 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024f4:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	f003 030c 	and.w	r3, r3, #12
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d1ee      	bne.n	80024de <HAL_RCC_ClockConfig+0x232>
 8002500:	e02d      	b.n	800255e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d123      	bne.n	8002552 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800250a:	e00a      	b.n	8002522 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800250c:	f7fe fc4a 	bl	8000da4 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f241 3288 	movw	r2, #5000	; 0x1388
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e0a8      	b.n	8002674 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002522:	4b04      	ldr	r3, [pc, #16]	; (8002534 <HAL_RCC_ClockConfig+0x288>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1ee      	bne.n	800250c <HAL_RCC_ClockConfig+0x260>
 800252e:	e016      	b.n	800255e <HAL_RCC_ClockConfig+0x2b2>
 8002530:	40022000 	.word	0x40022000
 8002534:	46020c00 	.word	0x46020c00
 8002538:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253c:	f7fe fc32 	bl	8000da4 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	f241 3288 	movw	r2, #5000	; 0x1388
 800254a:	4293      	cmp	r3, r2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e090      	b.n	8002674 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002552:	4b4a      	ldr	r3, [pc, #296]	; (800267c <HAL_RCC_ClockConfig+0x3d0>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b04      	cmp	r3, #4
 800255c:	d1ee      	bne.n	800253c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d010      	beq.n	800258c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	4b43      	ldr	r3, [pc, #268]	; (800267c <HAL_RCC_ClockConfig+0x3d0>)
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	429a      	cmp	r2, r3
 8002578:	d208      	bcs.n	800258c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800257a:	4b40      	ldr	r3, [pc, #256]	; (800267c <HAL_RCC_ClockConfig+0x3d0>)
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	f023 020f 	bic.w	r2, r3, #15
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	493d      	ldr	r1, [pc, #244]	; (800267c <HAL_RCC_ClockConfig+0x3d0>)
 8002588:	4313      	orrs	r3, r2
 800258a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800258c:	4b3c      	ldr	r3, [pc, #240]	; (8002680 <HAL_RCC_ClockConfig+0x3d4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 030f 	and.w	r3, r3, #15
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d210      	bcs.n	80025bc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259a:	4b39      	ldr	r3, [pc, #228]	; (8002680 <HAL_RCC_ClockConfig+0x3d4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 020f 	bic.w	r2, r3, #15
 80025a2:	4937      	ldr	r1, [pc, #220]	; (8002680 <HAL_RCC_ClockConfig+0x3d4>)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b35      	ldr	r3, [pc, #212]	; (8002680 <HAL_RCC_ClockConfig+0x3d4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e05b      	b.n	8002674 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d010      	beq.n	80025ea <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	4b2b      	ldr	r3, [pc, #172]	; (800267c <HAL_RCC_ClockConfig+0x3d0>)
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d208      	bcs.n	80025ea <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80025d8:	4b28      	ldr	r3, [pc, #160]	; (800267c <HAL_RCC_ClockConfig+0x3d0>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4925      	ldr	r1, [pc, #148]	; (800267c <HAL_RCC_ClockConfig+0x3d0>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d012      	beq.n	800261c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	4b20      	ldr	r3, [pc, #128]	; (800267c <HAL_RCC_ClockConfig+0x3d0>)
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002604:	429a      	cmp	r2, r3
 8002606:	d209      	bcs.n	800261c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002608:	4b1c      	ldr	r3, [pc, #112]	; (800267c <HAL_RCC_ClockConfig+0x3d0>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	4919      	ldr	r1, [pc, #100]	; (800267c <HAL_RCC_ClockConfig+0x3d0>)
 8002618:	4313      	orrs	r3, r2
 800261a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b00      	cmp	r3, #0
 8002626:	d010      	beq.n	800264a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	695a      	ldr	r2, [r3, #20]
 800262c:	4b13      	ldr	r3, [pc, #76]	; (800267c <HAL_RCC_ClockConfig+0x3d0>)
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002634:	429a      	cmp	r2, r3
 8002636:	d208      	bcs.n	800264a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002638:	4b10      	ldr	r3, [pc, #64]	; (800267c <HAL_RCC_ClockConfig+0x3d0>)
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	490d      	ldr	r1, [pc, #52]	; (800267c <HAL_RCC_ClockConfig+0x3d0>)
 8002646:	4313      	orrs	r3, r2
 8002648:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800264a:	f000 f821 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 800264e:	4602      	mov	r2, r0
 8002650:	4b0a      	ldr	r3, [pc, #40]	; (800267c <HAL_RCC_ClockConfig+0x3d0>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	f003 030f 	and.w	r3, r3, #15
 8002658:	490a      	ldr	r1, [pc, #40]	; (8002684 <HAL_RCC_ClockConfig+0x3d8>)
 800265a:	5ccb      	ldrb	r3, [r1, r3]
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
 8002660:	4a09      	ldr	r2, [pc, #36]	; (8002688 <HAL_RCC_ClockConfig+0x3dc>)
 8002662:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002664:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_RCC_ClockConfig+0x3e0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe fb51 	bl	8000d10 <HAL_InitTick>
 800266e:	4603      	mov	r3, r0
 8002670:	73fb      	strb	r3, [r7, #15]

  return status;
 8002672:	7bfb      	ldrb	r3, [r7, #15]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	46020c00 	.word	0x46020c00
 8002680:	40022000 	.word	0x40022000
 8002684:	08007a20 	.word	0x08007a20
 8002688:	20000000 	.word	0x20000000
 800268c:	20000004 	.word	0x20000004

08002690 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002690:	b480      	push	{r7}
 8002692:	b08b      	sub	sp, #44	; 0x2c
 8002694:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002696:	2300      	movs	r3, #0
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800269e:	4b7b      	ldr	r3, [pc, #492]	; (800288c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026a8:	4b78      	ldr	r3, [pc, #480]	; (800288c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_RCC_GetSysClockFreq+0x34>
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	2b0c      	cmp	r3, #12
 80026bc:	d121      	bne.n	8002702 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d11e      	bne.n	8002702 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80026c4:	4b71      	ldr	r3, [pc, #452]	; (800288c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d107      	bne.n	80026e0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80026d0:	4b6e      	ldr	r3, [pc, #440]	; (800288c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80026d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026d6:	0b1b      	lsrs	r3, r3, #12
 80026d8:	f003 030f 	and.w	r3, r3, #15
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
 80026de:	e005      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80026e0:	4b6a      	ldr	r3, [pc, #424]	; (800288c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	0f1b      	lsrs	r3, r3, #28
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026ec:	4a68      	ldr	r2, [pc, #416]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d110      	bne.n	800271e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002700:	e00d      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002702:	4b62      	ldr	r3, [pc, #392]	; (800288c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b04      	cmp	r3, #4
 800270c:	d102      	bne.n	8002714 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800270e:	4b61      	ldr	r3, [pc, #388]	; (8002894 <HAL_RCC_GetSysClockFreq+0x204>)
 8002710:	623b      	str	r3, [r7, #32]
 8002712:	e004      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	2b08      	cmp	r3, #8
 8002718:	d101      	bne.n	800271e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800271a:	4b5e      	ldr	r3, [pc, #376]	; (8002894 <HAL_RCC_GetSysClockFreq+0x204>)
 800271c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b0c      	cmp	r3, #12
 8002722:	f040 80ac 	bne.w	800287e <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002726:	4b59      	ldr	r3, [pc, #356]	; (800288c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002730:	4b56      	ldr	r3, [pc, #344]	; (800288c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	3301      	adds	r3, #1
 800273c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800273e:	4b53      	ldr	r3, [pc, #332]	; (800288c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800274a:	4b50      	ldr	r3, [pc, #320]	; (800288c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800274c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274e:	08db      	lsrs	r3, r3, #3
 8002750:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	fb02 f303 	mul.w	r3, r2, r3
 800275a:	ee07 3a90 	vmov	s15, r3
 800275e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002762:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 8086 	beq.w	800287a <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d003      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0xec>
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	2b03      	cmp	r3, #3
 8002778:	d022      	beq.n	80027c0 <HAL_RCC_GetSysClockFreq+0x130>
 800277a:	e043      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	ee07 3a90 	vmov	s15, r3
 8002782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002786:	eddf 6a44 	vldr	s13, [pc, #272]	; 8002898 <HAL_RCC_GetSysClockFreq+0x208>
 800278a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800278e:	4b3f      	ldr	r3, [pc, #252]	; (800288c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002796:	ee07 3a90 	vmov	s15, r3
 800279a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800279e:	ed97 6a01 	vldr	s12, [r7, #4]
 80027a2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800289c <HAL_RCC_GetSysClockFreq+0x20c>
 80027a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80027ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ba:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80027be:	e046      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	ee07 3a90 	vmov	s15, r3
 80027c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ca:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002898 <HAL_RCC_GetSysClockFreq+0x208>
 80027ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027d2:	4b2e      	ldr	r3, [pc, #184]	; (800288c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80027d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027da:	ee07 3a90 	vmov	s15, r3
 80027de:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80027e2:	ed97 6a01 	vldr	s12, [r7, #4]
 80027e6:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800289c <HAL_RCC_GetSysClockFreq+0x20c>
 80027ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80027f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027fe:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002802:	e024      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	ee07 3a90 	vmov	s15, r3
 800280a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	ee07 3a90 	vmov	s15, r3
 8002814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002818:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800281c:	4b1b      	ldr	r3, [pc, #108]	; (800288c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800281e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002824:	ee07 3a90 	vmov	s15, r3
 8002828:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800282c:	ed97 6a01 	vldr	s12, [r7, #4]
 8002830:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800289c <HAL_RCC_GetSysClockFreq+0x20c>
 8002834:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002838:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800283c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002840:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002848:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800284c:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800284e:	4b0f      	ldr	r3, [pc, #60]	; (800288c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002852:	0e1b      	lsrs	r3, r3, #24
 8002854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002858:	3301      	adds	r3, #1
 800285a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002866:	edd7 6a07 	vldr	s13, [r7, #28]
 800286a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800286e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002872:	ee17 3a90 	vmov	r3, s15
 8002876:	623b      	str	r3, [r7, #32]
 8002878:	e001      	b.n	800287e <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800287e:	6a3b      	ldr	r3, [r7, #32]
}
 8002880:	4618      	mov	r0, r3
 8002882:	372c      	adds	r7, #44	; 0x2c
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	46020c00 	.word	0x46020c00
 8002890:	08007a38 	.word	0x08007a38
 8002894:	00f42400 	.word	0x00f42400
 8002898:	4b742400 	.word	0x4b742400
 800289c:	46000000 	.word	0x46000000

080028a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80028a4:	f7ff fef4 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4b07      	ldr	r3, [pc, #28]	; (80028c8 <HAL_RCC_GetHCLKFreq+0x28>)
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	4906      	ldr	r1, [pc, #24]	; (80028cc <HAL_RCC_GetHCLKFreq+0x2c>)
 80028b4:	5ccb      	ldrb	r3, [r1, r3]
 80028b6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ba:	4a05      	ldr	r2, [pc, #20]	; (80028d0 <HAL_RCC_GetHCLKFreq+0x30>)
 80028bc:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80028be:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <HAL_RCC_GetHCLKFreq+0x30>)
 80028c0:	681b      	ldr	r3, [r3, #0]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	46020c00 	.word	0x46020c00
 80028cc:	08007a20 	.word	0x08007a20
 80028d0:	20000000 	.word	0x20000000

080028d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80028d8:	f7ff ffe2 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	091b      	lsrs	r3, r3, #4
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4903      	ldr	r1, [pc, #12]	; (80028f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	46020c00 	.word	0x46020c00
 80028f8:	08007a30 	.word	0x08007a30

080028fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002900:	f7ff ffce 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b05      	ldr	r3, [pc, #20]	; (800291c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	4903      	ldr	r1, [pc, #12]	; (8002920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002918:	4618      	mov	r0, r3
 800291a:	bd80      	pop	{r7, pc}
 800291c:	46020c00 	.word	0x46020c00
 8002920:	08007a30 	.word	0x08007a30

08002924 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002928:	f7ff ffba 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 800292c:	4602      	mov	r2, r0
 800292e:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_RCC_GetPCLK3Freq+0x20>)
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	091b      	lsrs	r3, r3, #4
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	4903      	ldr	r1, [pc, #12]	; (8002948 <HAL_RCC_GetPCLK3Freq+0x24>)
 800293a:	5ccb      	ldrb	r3, [r1, r3]
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002940:	4618      	mov	r0, r3
 8002942:	bd80      	pop	{r7, pc}
 8002944:	46020c00 	.word	0x46020c00
 8002948:	08007a30 	.word	0x08007a30

0800294c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002954:	4b3e      	ldr	r3, [pc, #248]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002962:	f7fe fdb9 	bl	80014d8 <HAL_PWREx_GetVoltageRange>
 8002966:	6178      	str	r0, [r7, #20]
 8002968:	e019      	b.n	800299e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800296a:	4b39      	ldr	r3, [pc, #228]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800296c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002970:	4a37      	ldr	r2, [pc, #220]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002972:	f043 0304 	orr.w	r3, r3, #4
 8002976:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800297a:	4b35      	ldr	r3, [pc, #212]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800297c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002988:	f7fe fda6 	bl	80014d8 <HAL_PWREx_GetVoltageRange>
 800298c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800298e:	4b30      	ldr	r3, [pc, #192]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002994:	4a2e      	ldr	r2, [pc, #184]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002996:	f023 0304 	bic.w	r3, r3, #4
 800299a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029a4:	d003      	beq.n	80029ae <RCC_SetFlashLatencyFromMSIRange+0x62>
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029ac:	d109      	bne.n	80029c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029b4:	d202      	bcs.n	80029bc <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80029b6:	2301      	movs	r3, #1
 80029b8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80029ba:	e033      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80029bc:	2300      	movs	r3, #0
 80029be:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80029c0:	e030      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029c8:	d208      	bcs.n	80029dc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d0:	d102      	bne.n	80029d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80029d2:	2303      	movs	r3, #3
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	e025      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e035      	b.n	8002a48 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029e2:	d90f      	bls.n	8002a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029f0:	d902      	bls.n	80029f8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	e015      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80029f8:	2301      	movs	r3, #1
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	e012      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	e00f      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a0a:	d109      	bne.n	8002a20 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a12:	d102      	bne.n	8002a1a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002a14:	2301      	movs	r3, #1
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	e004      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	e001      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002a20:	2301      	movs	r3, #1
 8002a22:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 020f 	bic.w	r2, r3, #15
 8002a2c:	4909      	ldr	r1, [pc, #36]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002a34:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d001      	beq.n	8002a46 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	46020c00 	.word	0x46020c00
 8002a54:	40022000 	.word	0x40022000

08002a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a5c:	b0c4      	sub	sp, #272	; 0x110
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a64:	2300      	movs	r3, #0
 8002a66:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a78:	f002 0401 	and.w	r4, r2, #1
 8002a7c:	2500      	movs	r5, #0
 8002a7e:	ea54 0305 	orrs.w	r3, r4, r5
 8002a82:	d00b      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002a84:	4bd5      	ldr	r3, [pc, #852]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a8a:	f023 0103 	bic.w	r1, r3, #3
 8002a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a94:	4ad1      	ldr	r2, [pc, #836]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002a96:	430b      	orrs	r3, r1
 8002a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa4:	f002 0802 	and.w	r8, r2, #2
 8002aa8:	f04f 0900 	mov.w	r9, #0
 8002aac:	ea58 0309 	orrs.w	r3, r8, r9
 8002ab0:	d00b      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002ab2:	4bca      	ldr	r3, [pc, #808]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ab8:	f023 010c 	bic.w	r1, r3, #12
 8002abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac2:	4ac6      	ldr	r2, [pc, #792]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ac4:	430b      	orrs	r3, r1
 8002ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad2:	f002 0a04 	and.w	sl, r2, #4
 8002ad6:	f04f 0b00 	mov.w	fp, #0
 8002ada:	ea5a 030b 	orrs.w	r3, sl, fp
 8002ade:	d00b      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002ae0:	4bbe      	ldr	r3, [pc, #760]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae6:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af0:	4aba      	ldr	r2, [pc, #744]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002af2:	430b      	orrs	r3, r1
 8002af4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b00:	f002 0308 	and.w	r3, r2, #8
 8002b04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002b0e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4313      	orrs	r3, r2
 8002b16:	d00b      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002b18:	4bb0      	ldr	r3, [pc, #704]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b28:	4aac      	ldr	r2, [pc, #688]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002b2a:	430b      	orrs	r3, r1
 8002b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b38:	f002 0310 	and.w	r3, r2, #16
 8002b3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b40:	2300      	movs	r3, #0
 8002b42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002b46:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	d00b      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002b50:	4ba2      	ldr	r3, [pc, #648]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b60:	4a9e      	ldr	r2, [pc, #632]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002b62:	430b      	orrs	r3, r1
 8002b64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b70:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8002b74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b7e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4313      	orrs	r3, r2
 8002b86:	d00b      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002b88:	4b94      	ldr	r3, [pc, #592]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002b8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002b8e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b98:	4a90      	ldr	r2, [pc, #576]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002b9a:	430b      	orrs	r3, r1
 8002b9c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba8:	f002 0320 	and.w	r3, r2, #32
 8002bac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002bb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	d00b      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002bc0:	4b86      	ldr	r3, [pc, #536]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002bc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bc6:	f023 0107 	bic.w	r1, r3, #7
 8002bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bd0:	4a82      	ldr	r2, [pc, #520]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002bd2:	430b      	orrs	r3, r1
 8002bd4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be0:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002be4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002be8:	2300      	movs	r3, #0
 8002bea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002bee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	d00b      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002bf8:	4b78      	ldr	r3, [pc, #480]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bfe:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c08:	4a74      	ldr	r2, [pc, #464]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002c0a:	430b      	orrs	r3, r1
 8002c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c18:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002c1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c20:	2300      	movs	r3, #0
 8002c22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c26:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	d00b      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002c30:	4b6a      	ldr	r3, [pc, #424]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c40:	4a66      	ldr	r2, [pc, #408]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002c42:	430b      	orrs	r3, r1
 8002c44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c50:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8002c54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c5e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4313      	orrs	r3, r2
 8002c66:	d00b      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002c68:	4b5c      	ldr	r3, [pc, #368]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002c6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c78:	4a58      	ldr	r2, [pc, #352]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002c7a:	430b      	orrs	r3, r1
 8002c7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002c8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c90:	2300      	movs	r3, #0
 8002c92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002c96:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	d00b      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002ca0:	4b4e      	ldr	r3, [pc, #312]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ca6:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8002caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cb0:	4a4a      	ldr	r2, [pc, #296]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002cb2:	430b      	orrs	r3, r1
 8002cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8002cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8002cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	d00b      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8002cd8:	4b40      	ldr	r3, [pc, #256]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002cda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002cde:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8002ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ce6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ce8:	4a3c      	ldr	r2, [pc, #240]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002cea:	430b      	orrs	r3, r1
 8002cec:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8002cf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8002cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d00:	2300      	movs	r3, #0
 8002d02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d06:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	d00c      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8002d10:	4b32      	ldr	r3, [pc, #200]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002d16:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d22:	4a2e      	ldr	r2, [pc, #184]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d24:	430b      	orrs	r3, r1
 8002d26:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d32:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8002d36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002d40:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4313      	orrs	r3, r2
 8002d48:	d00c      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002d4a:	4b24      	ldr	r3, [pc, #144]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d50:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002d54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d5c:	4a1f      	ldr	r2, [pc, #124]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002d70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d74:	2300      	movs	r3, #0
 8002d76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d7a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4313      	orrs	r3, r2
 8002d82:	d00c      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002d84:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d8a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8002d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d96:	4a11      	ldr	r2, [pc, #68]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8002d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002daa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002dae:	2300      	movs	r3, #0
 8002db0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002db4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002db8:	460b      	mov	r3, r1
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	d010      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8002dbe:	4b07      	ldr	r3, [pc, #28]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002dc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dc4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dd0:	4a02      	ldr	r2, [pc, #8]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002dd2:	430b      	orrs	r3, r1
 8002dd4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dd8:	e002      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8002dda:	bf00      	nop
 8002ddc:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de8:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002dec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002df0:	2300      	movs	r3, #0
 8002df2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002df6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	d04c      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8002e00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e08:	2b80      	cmp	r3, #128	; 0x80
 8002e0a:	d02d      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002e0c:	2b80      	cmp	r3, #128	; 0x80
 8002e0e:	d827      	bhi.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002e10:	2b60      	cmp	r3, #96	; 0x60
 8002e12:	d02b      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8002e14:	2b60      	cmp	r3, #96	; 0x60
 8002e16:	d823      	bhi.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002e18:	2b40      	cmp	r3, #64	; 0x40
 8002e1a:	d006      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8002e1c:	2b40      	cmp	r3, #64	; 0x40
 8002e1e:	d81f      	bhi.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d009      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d011      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8002e28:	e01a      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e2a:	4bbe      	ldr	r3, [pc, #760]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2e:	4abd      	ldr	r2, [pc, #756]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e34:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e36:	e01a      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e3c:	3308      	adds	r3, #8
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f002 fc5e 	bl	8005700 <RCCEx_PLL2_Config>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e4a:	e010      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e50:	332c      	adds	r3, #44	; 0x2c
 8002e52:	4618      	mov	r0, r3
 8002e54:	f002 fcec 	bl	8005830 <RCCEx_PLL3_Config>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e5e:	e006      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002e66:	e002      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8002e68:	bf00      	nop
 8002e6a:	e000      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8002e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e6e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10d      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8002e76:	4bab      	ldr	r3, [pc, #684]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002e7c:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8002e80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e88:	4aa6      	ldr	r2, [pc, #664]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002e90:	e003      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e92:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002e96:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002ea6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002eb0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	d053      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8002eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ebe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec6:	d033      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8002ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ecc:	d82c      	bhi.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002ece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ed2:	d02f      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8002ed4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ed8:	d826      	bhi.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ede:	d008      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8002ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ee4:	d820      	bhi.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eee:	d011      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002ef0:	e01a      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ef2:	4b8c      	ldr	r3, [pc, #560]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef6:	4a8b      	ldr	r2, [pc, #556]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002efc:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002efe:	e01a      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f04:	3308      	adds	r3, #8
 8002f06:	4618      	mov	r0, r3
 8002f08:	f002 fbfa 	bl	8005700 <RCCEx_PLL2_Config>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002f12:	e010      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f18:	332c      	adds	r3, #44	; 0x2c
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f002 fc88 	bl	8005830 <RCCEx_PLL3_Config>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002f26:	e006      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002f2e:	e002      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8002f30:	bf00      	nop
 8002f32:	e000      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8002f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f36:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10d      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8002f3e:	4b79      	ldr	r3, [pc, #484]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002f44:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002f48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f50:	4a74      	ldr	r2, [pc, #464]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f52:	430b      	orrs	r3, r1
 8002f54:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002f58:	e003      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f5a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002f5e:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002f6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f70:	2300      	movs	r3, #0
 8002f72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f74:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	d046      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8002f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f86:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002f8a:	d028      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002f8c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002f90:	d821      	bhi.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8002f92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f96:	d022      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002f98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f9c:	d81b      	bhi.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8002f9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fa2:	d01c      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002fa4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fa8:	d815      	bhi.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8002faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fae:	d008      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8002fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb4:	d80f      	bhi.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d011      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fbe:	d00e      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002fc0:	e009      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fc6:	3308      	adds	r3, #8
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f002 fb99 	bl	8005700 <RCCEx_PLL2_Config>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002fd4:	e004      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002fdc:	e000      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 8002fde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fe0:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10d      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8002fe8:	4b4e      	ldr	r3, [pc, #312]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fee:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ff6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ffa:	4a4a      	ldr	r2, [pc, #296]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003002:	e003      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003004:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003008:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800300c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003018:	673b      	str	r3, [r7, #112]	; 0x70
 800301a:	2300      	movs	r3, #0
 800301c:	677b      	str	r3, [r7, #116]	; 0x74
 800301e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003022:	460b      	mov	r3, r1
 8003024:	4313      	orrs	r3, r2
 8003026:	d03f      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003028:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800302c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003030:	2b04      	cmp	r3, #4
 8003032:	d81e      	bhi.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8003034:	a201      	add	r2, pc, #4	; (adr r2, 800303c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303a:	bf00      	nop
 800303c:	0800307b 	.word	0x0800307b
 8003040:	08003051 	.word	0x08003051
 8003044:	0800305f 	.word	0x0800305f
 8003048:	0800307b 	.word	0x0800307b
 800304c:	0800307b 	.word	0x0800307b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003050:	4b34      	ldr	r3, [pc, #208]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	4a33      	ldr	r2, [pc, #204]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800305c:	e00e      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800305e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003062:	332c      	adds	r3, #44	; 0x2c
 8003064:	4618      	mov	r0, r3
 8003066:	f002 fbe3 	bl	8005830 <RCCEx_PLL3_Config>
 800306a:	4603      	mov	r3, r0
 800306c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003070:	e004      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003078:	e000      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 800307a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800307c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10d      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003084:	4b27      	ldr	r3, [pc, #156]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003086:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800308a:	f023 0107 	bic.w	r1, r3, #7
 800308e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003096:	4a23      	ldr	r2, [pc, #140]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003098:	430b      	orrs	r3, r1
 800309a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800309e:	e003      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a0:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80030a4:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80030a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b0:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80030b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80030b6:	2300      	movs	r3, #0
 80030b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030ba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80030be:	460b      	mov	r3, r1
 80030c0:	4313      	orrs	r3, r2
 80030c2:	d04c      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80030c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030d0:	d02a      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 80030d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030d6:	d821      	bhi.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80030d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030dc:	d026      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 80030de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030e2:	d81b      	bhi.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80030e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030e8:	d00e      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80030ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030ee:	d815      	bhi.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d01d      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 80030f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f8:	d110      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030fa:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	4a09      	ldr	r2, [pc, #36]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003104:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003106:	e014      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800310c:	332c      	adds	r3, #44	; 0x2c
 800310e:	4618      	mov	r0, r3
 8003110:	f002 fb8e 	bl	8005830 <RCCEx_PLL3_Config>
 8003114:	4603      	mov	r3, r0
 8003116:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800311a:	e00a      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003122:	e006      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8003124:	46020c00 	.word	0x46020c00
        break;
 8003128:	bf00      	nop
 800312a:	e002      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 800312c:	bf00      	nop
 800312e:	e000      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8003130:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003132:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10d      	bne.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800313a:	4baf      	ldr	r3, [pc, #700]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800313c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003140:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003148:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800314c:	4aaa      	ldr	r2, [pc, #680]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800314e:	430b      	orrs	r3, r1
 8003150:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003154:	e003      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003156:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800315a:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800315e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003166:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800316a:	663b      	str	r3, [r7, #96]	; 0x60
 800316c:	2300      	movs	r3, #0
 800316e:	667b      	str	r3, [r7, #100]	; 0x64
 8003170:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003174:	460b      	mov	r3, r1
 8003176:	4313      	orrs	r3, r2
 8003178:	f000 80b5 	beq.w	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800317c:	2300      	movs	r3, #0
 800317e:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003182:	4b9d      	ldr	r3, [pc, #628]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d113      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003190:	4b99      	ldr	r3, [pc, #612]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003196:	4a98      	ldr	r2, [pc, #608]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003198:	f043 0304 	orr.w	r3, r3, #4
 800319c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80031a0:	4b95      	ldr	r3, [pc, #596]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80031a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80031ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
      pwrclkchanged = SET;
 80031b2:	2301      	movs	r3, #1
 80031b4:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80031b8:	4b90      	ldr	r3, [pc, #576]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	4a8f      	ldr	r2, [pc, #572]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031c4:	f7fd fdee 	bl	8000da4 <HAL_GetTick>
 80031c8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80031cc:	e00b      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ce:	f7fd fde9 	bl	8000da4 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d903      	bls.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80031e4:	e005      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80031e6:	4b85      	ldr	r3, [pc, #532]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0ed      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 80031f2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d165      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031fa:	4b7f      	ldr	r3, [pc, #508]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80031fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003200:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003204:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800320c:	2b00      	cmp	r3, #0
 800320e:	d023      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x800>
 8003210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003214:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8003218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800321c:	4293      	cmp	r3, r2
 800321e:	d01b      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003220:	4b75      	ldr	r3, [pc, #468]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003222:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800322a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800322e:	4b72      	ldr	r3, [pc, #456]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003230:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003234:	4a70      	ldr	r2, [pc, #448]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800323e:	4b6e      	ldr	r3, [pc, #440]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003240:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003244:	4a6c      	ldr	r2, [pc, #432]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800324e:	4a6a      	ldr	r2, [pc, #424]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003250:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003254:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003258:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d019      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fd fd9e 	bl	8000da4 <HAL_GetTick>
 8003268:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800326c:	e00d      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326e:	f7fd fd99 	bl	8000da4 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003278:	1ad2      	subs	r2, r2, r3
 800327a:	f241 3388 	movw	r3, #5000	; 0x1388
 800327e:	429a      	cmp	r2, r3
 8003280:	d903      	bls.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            break;
 8003288:	e006      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800328a:	4b5b      	ldr	r3, [pc, #364]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800328c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0ea      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8003298:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10d      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80032a0:	4b55      	ldr	r3, [pc, #340]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80032a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ae:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80032b2:	4a51      	ldr	r2, [pc, #324]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80032b4:	430b      	orrs	r3, r1
 80032b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80032ba:	e008      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032bc:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80032c0:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 80032c4:	e003      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c6:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80032ca:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032ce:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d107      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d6:	4b48      	ldr	r3, [pc, #288]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80032d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032dc:	4a46      	ldr	r2, [pc, #280]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80032de:	f023 0304 	bic.w	r3, r3, #4
 80032e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80032e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ee:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80032f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80032f4:	2300      	movs	r3, #0
 80032f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032f8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80032fc:	460b      	mov	r3, r1
 80032fe:	4313      	orrs	r3, r2
 8003300:	d042      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003306:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800330a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800330e:	d022      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8003310:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003314:	d81b      	bhi.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8003316:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800331a:	d011      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 800331c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003320:	d815      	bhi.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8003322:	2b00      	cmp	r3, #0
 8003324:	d019      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x902>
 8003326:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800332a:	d110      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800332c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003330:	3308      	adds	r3, #8
 8003332:	4618      	mov	r0, r3
 8003334:	f002 f9e4 	bl	8005700 <RCCEx_PLL2_Config>
 8003338:	4603      	mov	r3, r0
 800333a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800333e:	e00d      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003340:	4b2d      	ldr	r3, [pc, #180]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	4a2c      	ldr	r2, [pc, #176]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800334a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800334c:	e006      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003354:	e002      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8003356:	bf00      	nop
 8003358:	e000      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 800335a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800335c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10d      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8003364:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800336a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800336e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003372:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003376:	4a20      	ldr	r2, [pc, #128]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003378:	430b      	orrs	r3, r1
 800337a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800337e:	e003      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003380:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003384:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800338c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003390:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003394:	653b      	str	r3, [r7, #80]	; 0x50
 8003396:	2300      	movs	r3, #0
 8003398:	657b      	str	r3, [r7, #84]	; 0x54
 800339a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800339e:	460b      	mov	r3, r1
 80033a0:	4313      	orrs	r3, r2
 80033a2:	d031      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80033a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033b0:	d00b      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x972>
 80033b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033b6:	d804      	bhi.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x976>
 80033bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c0:	d007      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80033c8:	e004      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80033ca:	bf00      	nop
 80033cc:	e002      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80033ce:	bf00      	nop
 80033d0:	e000      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80033d2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80033d4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d111      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80033dc:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80033de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80033e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033ee:	4a02      	ldr	r2, [pc, #8]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80033f0:	430b      	orrs	r3, r1
 80033f2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80033f6:	e007      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 80033f8:	46020c00 	.word	0x46020c00
 80033fc:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003400:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003404:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8003408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800340c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003410:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003414:	64bb      	str	r3, [r7, #72]	; 0x48
 8003416:	2300      	movs	r3, #0
 8003418:	64fb      	str	r3, [r7, #76]	; 0x4c
 800341a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800341e:	460b      	mov	r3, r1
 8003420:	4313      	orrs	r3, r2
 8003422:	d00c      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8003424:	4bb2      	ldr	r3, [pc, #712]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003426:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800342a:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800342e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003432:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003436:	4aae      	ldr	r2, [pc, #696]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003438:	430b      	orrs	r3, r1
 800343a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800343e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003446:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800344a:	643b      	str	r3, [r7, #64]	; 0x40
 800344c:	2300      	movs	r3, #0
 800344e:	647b      	str	r3, [r7, #68]	; 0x44
 8003450:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003454:	460b      	mov	r3, r1
 8003456:	4313      	orrs	r3, r2
 8003458:	d019      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800345a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800345e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003462:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003466:	d105      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003468:	4ba1      	ldr	r3, [pc, #644]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	4aa0      	ldr	r2, [pc, #640]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800346e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003472:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003474:	4b9e      	ldr	r3, [pc, #632]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003476:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800347a:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800347e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003482:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003486:	4a9a      	ldr	r2, [pc, #616]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003488:	430b      	orrs	r3, r1
 800348a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800348e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003496:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800349a:	63bb      	str	r3, [r7, #56]	; 0x38
 800349c:	2300      	movs	r3, #0
 800349e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034a0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80034a4:	460b      	mov	r3, r1
 80034a6:	4313      	orrs	r3, r2
 80034a8:	d00c      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80034aa:	4b91      	ldr	r3, [pc, #580]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80034ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034b0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80034b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034b8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80034bc:	4a8c      	ldr	r2, [pc, #560]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80034be:	430b      	orrs	r3, r1
 80034c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80034c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034cc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80034d0:	633b      	str	r3, [r7, #48]	; 0x30
 80034d2:	2300      	movs	r3, #0
 80034d4:	637b      	str	r3, [r7, #52]	; 0x34
 80034d6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80034da:	460b      	mov	r3, r1
 80034dc:	4313      	orrs	r3, r2
 80034de:	d00c      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80034e0:	4b83      	ldr	r3, [pc, #524]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80034e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034e6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80034ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80034f2:	4a7f      	ldr	r2, [pc, #508]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80034f4:	430b      	orrs	r3, r1
 80034f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80034fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003502:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003506:	62bb      	str	r3, [r7, #40]	; 0x28
 8003508:	2300      	movs	r3, #0
 800350a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800350c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003510:	460b      	mov	r3, r1
 8003512:	4313      	orrs	r3, r2
 8003514:	d00c      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003516:	4b76      	ldr	r3, [pc, #472]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003518:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800351c:	f023 0218 	bic.w	r2, r3, #24
 8003520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003524:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003528:	4971      	ldr	r1, [pc, #452]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003530:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003538:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800353c:	623b      	str	r3, [r7, #32]
 800353e:	2300      	movs	r3, #0
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
 8003542:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003546:	460b      	mov	r3, r1
 8003548:	4313      	orrs	r3, r2
 800354a:	d032      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800354c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003550:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003554:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003558:	d105      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800355a:	4b65      	ldr	r3, [pc, #404]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	4a64      	ldr	r2, [pc, #400]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003564:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8003566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800356a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800356e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003572:	d108      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003578:	3308      	adds	r3, #8
 800357a:	4618      	mov	r0, r3
 800357c:	f002 f8c0 	bl	8005700 <RCCEx_PLL2_Config>
 8003580:	4603      	mov	r3, r0
 8003582:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    }
    if (ret == HAL_OK)
 8003586:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10d      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800358e:	4b58      	ldr	r3, [pc, #352]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003590:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003594:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800359c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80035a0:	4953      	ldr	r1, [pc, #332]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80035a8:	e003      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035aa:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80035ae:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 80035b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ba:	2100      	movs	r1, #0
 80035bc:	61b9      	str	r1, [r7, #24]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	61fb      	str	r3, [r7, #28]
 80035c4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80035c8:	460b      	mov	r3, r1
 80035ca:	4313      	orrs	r3, r2
 80035cc:	d04a      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 80035ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80035d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035da:	d01e      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 80035dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035e0:	d825      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 80035e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035e6:	d00e      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80035e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035ec:	d81f      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d021      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 80035f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035f6:	d11a      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f8:	4b3d      	ldr	r3, [pc, #244]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	4a3c      	ldr	r2, [pc, #240]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80035fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003602:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8003604:	e018      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800360a:	3308      	adds	r3, #8
 800360c:	4618      	mov	r0, r3
 800360e:	f002 f877 	bl	8005700 <RCCEx_PLL2_Config>
 8003612:	4603      	mov	r3, r0
 8003614:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8003618:	e00e      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800361a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800361e:	332c      	adds	r3, #44	; 0x2c
 8003620:	4618      	mov	r0, r3
 8003622:	f002 f905 	bl	8005830 <RCCEx_PLL3_Config>
 8003626:	4603      	mov	r3, r0
 8003628:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800362c:	e004      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003634:	e000      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 8003636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003638:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10d      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8003640:	4b2b      	ldr	r3, [pc, #172]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003642:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003646:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800364a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800364e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003652:	4927      	ldr	r1, [pc, #156]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800365a:	e003      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003660:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8003664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366c:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800367a:	460b      	mov	r3, r1
 800367c:	4313      	orrs	r3, r2
 800367e:	d03d      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8003680:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003688:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800368c:	d00e      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800368e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003692:	d815      	bhi.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003694:	2b00      	cmp	r3, #0
 8003696:	d017      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800369c:	d110      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800369e:	4b14      	ldr	r3, [pc, #80]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	4a13      	ldr	r2, [pc, #76]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80036a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a8:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80036aa:	e00e      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036b0:	3308      	adds	r3, #8
 80036b2:	4618      	mov	r0, r3
 80036b4:	f002 f824 	bl	8005700 <RCCEx_PLL2_Config>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80036be:	e004      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80036c6:	e000      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 80036c8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80036ca:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d110      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80036d2:	4b07      	ldr	r3, [pc, #28]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80036d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e4:	4902      	ldr	r1, [pc, #8]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80036ec:	e006      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xca4>
 80036ee:	bf00      	nop
 80036f0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80036f8:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80036fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003704:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003712:	460b      	mov	r3, r1
 8003714:	4313      	orrs	r3, r2
 8003716:	d00c      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8003718:	4b2c      	ldr	r3, [pc, #176]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800371a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800371e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003726:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800372a:	4928      	ldr	r1, [pc, #160]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8003732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373a:	2100      	movs	r1, #0
 800373c:	6039      	str	r1, [r7, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	607b      	str	r3, [r7, #4]
 8003744:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003748:	460b      	mov	r3, r1
 800374a:	4313      	orrs	r3, r2
 800374c:	d036      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800374e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003752:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003756:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800375a:	d00d      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800375c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003760:	d811      	bhi.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8003762:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003766:	d012      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003768:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800376c:	d80b      	bhi.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00d      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003776:	d106      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003778:	4b14      	ldr	r3, [pc, #80]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377c:	4a13      	ldr	r2, [pc, #76]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800377e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003782:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8003784:	e004      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800378c:	e000      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 800378e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003790:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10d      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800379a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800379e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80037a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80037aa:	4908      	ldr	r1, [pc, #32]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80037b2:	e003      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80037b8:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80037bc:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80037c6:	46bd      	mov	sp, r7
 80037c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037cc:	46020c00 	.word	0x46020c00

080037d0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b089      	sub	sp, #36	; 0x24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80037d8:	4bad      	ldr	r3, [pc, #692]	; (8003a90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80037da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80037e2:	4bab      	ldr	r3, [pc, #684]	; (8003a90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80037ec:	4ba8      	ldr	r3, [pc, #672]	; (8003a90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80037ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f0:	0a1b      	lsrs	r3, r3, #8
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	3301      	adds	r3, #1
 80037f8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80037fa:	4ba5      	ldr	r3, [pc, #660]	; (8003a90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80037fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fe:	091b      	lsrs	r3, r3, #4
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003806:	4ba2      	ldr	r3, [pc, #648]	; (8003a90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380a:	08db      	lsrs	r3, r3, #3
 800380c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	fb02 f303 	mul.w	r3, r2, r3
 8003816:	ee07 3a90 	vmov	s15, r3
 800381a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800381e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 8123 	beq.w	8003a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2b03      	cmp	r3, #3
 800382e:	d062      	beq.n	80038f6 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	2b03      	cmp	r3, #3
 8003834:	f200 8081 	bhi.w	800393a <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d024      	beq.n	8003888 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d17a      	bne.n	800393a <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	ee07 3a90 	vmov	s15, r3
 800384a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384e:	eddf 6a91 	vldr	s13, [pc, #580]	; 8003a94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003856:	4b8e      	ldr	r3, [pc, #568]	; (8003a90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800385e:	ee07 3a90 	vmov	s15, r3
 8003862:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003866:	ed97 6a02 	vldr	s12, [r7, #8]
 800386a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8003a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800386e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003872:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800387a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800387e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003882:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003886:	e08f      	b.n	80039a8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003888:	4b81      	ldr	r3, [pc, #516]	; (8003a90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 8003894:	4b7e      	ldr	r3, [pc, #504]	; (8003a90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	0f1b      	lsrs	r3, r3, #28
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	e006      	b.n	80038ae <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 80038a0:	4b7b      	ldr	r3, [pc, #492]	; (8003a90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80038a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038a6:	041b      	lsls	r3, r3, #16
 80038a8:	0f1b      	lsrs	r3, r3, #28
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	4a7b      	ldr	r2, [pc, #492]	; (8003a9c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 80038b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b4:	ee07 3a90 	vmov	s15, r3
 80038b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	ee07 3a90 	vmov	s15, r3
 80038c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	ee07 3a90 	vmov	s15, r3
 80038d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80038d8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80038dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80038ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038f4:	e058      	b.n	80039a8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	ee07 3a90 	vmov	s15, r3
 80038fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003900:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003a94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003904:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003908:	4b61      	ldr	r3, [pc, #388]	; (8003a90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800390a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003910:	ee07 3a90 	vmov	s15, r3
 8003914:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003918:	ed97 6a02 	vldr	s12, [r7, #8]
 800391c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003920:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003924:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003928:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800392c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003934:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003938:	e036      	b.n	80039a8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800393a:	4b55      	ldr	r3, [pc, #340]	; (8003a90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d005      	beq.n	8003952 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8003946:	4b52      	ldr	r3, [pc, #328]	; (8003a90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	0f1b      	lsrs	r3, r3, #28
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	e006      	b.n	8003960 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8003952:	4b4f      	ldr	r3, [pc, #316]	; (8003a90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003954:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003958:	041b      	lsls	r3, r3, #16
 800395a:	0f1b      	lsrs	r3, r3, #28
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	4a4e      	ldr	r2, [pc, #312]	; (8003a9c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8003962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003966:	ee07 3a90 	vmov	s15, r3
 800396a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	ee07 3a90 	vmov	s15, r3
 8003974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003978:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003986:	ed97 6a02 	vldr	s12, [r7, #8]
 800398a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8003a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800398e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800399a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800399e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039a6:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80039a8:	4b39      	ldr	r3, [pc, #228]	; (8003a90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d017      	beq.n	80039e4 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80039b4:	4b36      	ldr	r3, [pc, #216]	; (8003a90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80039b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b8:	0a5b      	lsrs	r3, r3, #9
 80039ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039be:	ee07 3a90 	vmov	s15, r3
 80039c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80039c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039ca:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80039ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80039d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039da:	ee17 2a90 	vmov	r2, s15
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e002      	b.n	80039ea <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80039ea:	4b29      	ldr	r3, [pc, #164]	; (8003a90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80039ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d017      	beq.n	8003a26 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80039f6:	4b26      	ldr	r3, [pc, #152]	; (8003a90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80039f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fa:	0c1b      	lsrs	r3, r3, #16
 80039fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a00:	ee07 3a90 	vmov	s15, r3
 8003a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003a08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a0c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003a10:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a1c:	ee17 2a90 	vmov	r2, s15
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	605a      	str	r2, [r3, #4]
 8003a24:	e002      	b.n	8003a2c <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003a2c:	4b18      	ldr	r3, [pc, #96]	; (8003a90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d017      	beq.n	8003a68 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003a38:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3c:	0e1b      	lsrs	r3, r3, #24
 8003a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a42:	ee07 3a90 	vmov	s15, r3
 8003a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8003a4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a4e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003a52:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a5e:	ee17 2a90 	vmov	r2, s15
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003a66:	e00c      	b.n	8003a82 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	609a      	str	r2, [r3, #8]
}
 8003a6e:	e008      	b.n	8003a82 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	609a      	str	r2, [r3, #8]
}
 8003a82:	bf00      	nop
 8003a84:	3724      	adds	r7, #36	; 0x24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	46020c00 	.word	0x46020c00
 8003a94:	4b742400 	.word	0x4b742400
 8003a98:	46000000 	.word	0x46000000
 8003a9c:	08007a38 	.word	0x08007a38

08003aa0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b089      	sub	sp, #36	; 0x24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003aa8:	4bad      	ldr	r3, [pc, #692]	; (8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003ab2:	4bab      	ldr	r3, [pc, #684]	; (8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003abc:	4ba8      	ldr	r3, [pc, #672]	; (8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	0a1b      	lsrs	r3, r3, #8
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003aca:	4ba5      	ldr	r3, [pc, #660]	; (8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	091b      	lsrs	r3, r3, #4
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003ad6:	4ba2      	ldr	r3, [pc, #648]	; (8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	08db      	lsrs	r3, r3, #3
 8003adc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	fb02 f303 	mul.w	r3, r2, r3
 8003ae6:	ee07 3a90 	vmov	s15, r3
 8003aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aee:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8123 	beq.w	8003d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d062      	beq.n	8003bc6 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	f200 8081 	bhi.w	8003c0a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d024      	beq.n	8003b58 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d17a      	bne.n	8003c0a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1e:	eddf 6a91 	vldr	s13, [pc, #580]	; 8003d64 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b26:	4b8e      	ldr	r3, [pc, #568]	; (8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b2e:	ee07 3a90 	vmov	s15, r3
 8003b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b36:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b3a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b56:	e08f      	b.n	8003c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003b58:	4b81      	ldr	r3, [pc, #516]	; (8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8003b64:	4b7e      	ldr	r3, [pc, #504]	; (8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	0f1b      	lsrs	r3, r3, #28
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	e006      	b.n	8003b7e <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8003b70:	4b7b      	ldr	r3, [pc, #492]	; (8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003b72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b76:	041b      	lsls	r3, r3, #16
 8003b78:	0f1b      	lsrs	r3, r3, #28
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	4a7b      	ldr	r2, [pc, #492]	; (8003d6c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8003b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b84:	ee07 3a90 	vmov	s15, r3
 8003b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	ee07 3a90 	vmov	s15, r3
 8003ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ba8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003bac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bc4:	e058      	b.n	8003c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	ee07 3a90 	vmov	s15, r3
 8003bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd0:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003d64 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003bd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bd8:	4b61      	ldr	r3, [pc, #388]	; (8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be0:	ee07 3a90 	vmov	s15, r3
 8003be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003be8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bec:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003bf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003bf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c08:	e036      	b.n	8003c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003c0a:	4b55      	ldr	r3, [pc, #340]	; (8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d005      	beq.n	8003c22 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8003c16:	4b52      	ldr	r3, [pc, #328]	; (8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	0f1b      	lsrs	r3, r3, #28
 8003c1c:	f003 030f 	and.w	r3, r3, #15
 8003c20:	e006      	b.n	8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8003c22:	4b4f      	ldr	r3, [pc, #316]	; (8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003c24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c28:	041b      	lsls	r3, r3, #16
 8003c2a:	0f1b      	lsrs	r3, r3, #28
 8003c2c:	f003 030f 	and.w	r3, r3, #15
 8003c30:	4a4e      	ldr	r2, [pc, #312]	; (8003d6c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8003c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	ee07 3a90 	vmov	s15, r3
 8003c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	ee07 3a90 	vmov	s15, r3
 8003c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c56:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c5a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c76:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003c78:	4b39      	ldr	r3, [pc, #228]	; (8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d017      	beq.n	8003cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003c84:	4b36      	ldr	r3, [pc, #216]	; (8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c88:	0a5b      	lsrs	r3, r3, #9
 8003c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c8e:	ee07 3a90 	vmov	s15, r3
 8003c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8003c96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c9a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003c9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003caa:	ee17 2a90 	vmov	r2, s15
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	e002      	b.n	8003cba <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003cba:	4b29      	ldr	r3, [pc, #164]	; (8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d017      	beq.n	8003cf6 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003cc6:	4b26      	ldr	r3, [pc, #152]	; (8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cca:	0c1b      	lsrs	r3, r3, #16
 8003ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cd0:	ee07 3a90 	vmov	s15, r3
 8003cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003cd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cdc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003ce0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cec:	ee17 2a90 	vmov	r2, s15
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	605a      	str	r2, [r3, #4]
 8003cf4:	e002      	b.n	8003cfc <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003cfc:	4b18      	ldr	r3, [pc, #96]	; (8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d017      	beq.n	8003d38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003d08:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0c:	0e1b      	lsrs	r3, r3, #24
 8003d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d12:	ee07 3a90 	vmov	s15, r3
 8003d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8003d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d1e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003d22:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d2e:	ee17 2a90 	vmov	r2, s15
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003d36:	e00c      	b.n	8003d52 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	609a      	str	r2, [r3, #8]
}
 8003d3e:	e008      	b.n	8003d52 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	609a      	str	r2, [r3, #8]
}
 8003d52:	bf00      	nop
 8003d54:	3724      	adds	r7, #36	; 0x24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	46020c00 	.word	0x46020c00
 8003d64:	4b742400 	.word	0x4b742400
 8003d68:	46000000 	.word	0x46000000
 8003d6c:	08007a38 	.word	0x08007a38

08003d70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b089      	sub	sp, #36	; 0x24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003d78:	4bad      	ldr	r3, [pc, #692]	; (8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d80:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8003d82:	4bab      	ldr	r3, [pc, #684]	; (8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8003d8c:	4ba8      	ldr	r3, [pc, #672]	; (8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	0a1b      	lsrs	r3, r3, #8
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	3301      	adds	r3, #1
 8003d98:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8003d9a:	4ba5      	ldr	r3, [pc, #660]	; (8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	091b      	lsrs	r3, r3, #4
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003da6:	4ba2      	ldr	r3, [pc, #648]	; (8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003daa:	08db      	lsrs	r3, r3, #3
 8003dac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	fb02 f303 	mul.w	r3, r2, r3
 8003db6:	ee07 3a90 	vmov	s15, r3
 8003dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dbe:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 8123 	beq.w	8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d062      	beq.n	8003e96 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	f200 8081 	bhi.w	8003eda <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d024      	beq.n	8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d17a      	bne.n	8003eda <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dee:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004034 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003df6:	4b8e      	ldr	r3, [pc, #568]	; (8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e06:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e0a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8004038 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8003e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e22:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8003e26:	e08f      	b.n	8003f48 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003e28:	4b81      	ldr	r3, [pc, #516]	; (8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d005      	beq.n	8003e40 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8003e34:	4b7e      	ldr	r3, [pc, #504]	; (8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	0f1b      	lsrs	r3, r3, #28
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	e006      	b.n	8003e4e <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8003e40:	4b7b      	ldr	r3, [pc, #492]	; (8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003e42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e46:	041b      	lsls	r3, r3, #16
 8003e48:	0f1b      	lsrs	r3, r3, #28
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	4a7b      	ldr	r2, [pc, #492]	; (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8003e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e54:	ee07 3a90 	vmov	s15, r3
 8003e58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	ee07 3a90 	vmov	s15, r3
 8003e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	ee07 3a90 	vmov	s15, r3
 8003e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e74:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e78:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004038 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8003e7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e88:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e94:	e058      	b.n	8003f48 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	ee07 3a90 	vmov	s15, r3
 8003e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea0:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004034 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003ea4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ea8:	4b61      	ldr	r3, [pc, #388]	; (8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb0:	ee07 3a90 	vmov	s15, r3
 8003eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003eb8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ebc:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004038 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8003ec0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003ec4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ec8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ed8:	e036      	b.n	8003f48 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003eda:	4b55      	ldr	r3, [pc, #340]	; (8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d005      	beq.n	8003ef2 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 8003ee6:	4b52      	ldr	r3, [pc, #328]	; (8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	0f1b      	lsrs	r3, r3, #28
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	e006      	b.n	8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 8003ef2:	4b4f      	ldr	r3, [pc, #316]	; (8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003ef4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ef8:	041b      	lsls	r3, r3, #16
 8003efa:	0f1b      	lsrs	r3, r3, #28
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	4a4e      	ldr	r2, [pc, #312]	; (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8003f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f06:	ee07 3a90 	vmov	s15, r3
 8003f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	ee07 3a90 	vmov	s15, r3
 8003f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	ee07 3a90 	vmov	s15, r3
 8003f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f26:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f2a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8004038 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8003f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f46:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8003f48:	4b39      	ldr	r3, [pc, #228]	; (8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d017      	beq.n	8003f84 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003f54:	4b36      	ldr	r3, [pc, #216]	; (8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f58:	0a5b      	lsrs	r3, r3, #9
 8003f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f5e:	ee07 3a90 	vmov	s15, r3
 8003f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8003f66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f6a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003f6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f7a:	ee17 2a90 	vmov	r2, s15
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	e002      	b.n	8003f8a <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8003f8a:	4b29      	ldr	r3, [pc, #164]	; (8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d017      	beq.n	8003fc6 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003f96:	4b26      	ldr	r3, [pc, #152]	; (8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9a:	0c1b      	lsrs	r3, r3, #16
 8003f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fa0:	ee07 3a90 	vmov	s15, r3
 8003fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8003fa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fac:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003fb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fbc:	ee17 2a90 	vmov	r2, s15
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	605a      	str	r2, [r3, #4]
 8003fc4:	e002      	b.n	8003fcc <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8003fcc:	4b18      	ldr	r3, [pc, #96]	; (8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d017      	beq.n	8004008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003fd8:	4b15      	ldr	r3, [pc, #84]	; (8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fdc:	0e1b      	lsrs	r3, r3, #24
 8003fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fe2:	ee07 3a90 	vmov	s15, r3
 8003fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8003fea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fee:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003ff2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ffe:	ee17 2a90 	vmov	r2, s15
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8004006:	e00c      	b.n	8004022 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	609a      	str	r2, [r3, #8]
}
 800400e:	e008      	b.n	8004022 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	609a      	str	r2, [r3, #8]
}
 8004022:	bf00      	nop
 8004024:	3724      	adds	r7, #36	; 0x24
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	46020c00 	.word	0x46020c00
 8004034:	4b742400 	.word	0x4b742400
 8004038:	46000000 	.word	0x46000000
 800403c:	08007a38 	.word	0x08007a38

08004040 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b08e      	sub	sp, #56	; 0x38
 8004044:	af00      	add	r7, sp, #0
 8004046:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800404a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800404e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8004052:	430b      	orrs	r3, r1
 8004054:	d145      	bne.n	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004056:	4ba7      	ldr	r3, [pc, #668]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800405c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004060:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004062:	4ba4      	ldr	r3, [pc, #656]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b02      	cmp	r3, #2
 800406e:	d108      	bne.n	8004082 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004076:	d104      	bne.n	8004082 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004078:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800407c:	637b      	str	r3, [r7, #52]	; 0x34
 800407e:	f001 bb2f 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004082:	4b9c      	ldr	r3, [pc, #624]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800408c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004090:	d114      	bne.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8004092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004098:	d110      	bne.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800409a:	4b96      	ldr	r3, [pc, #600]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800409c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040a8:	d103      	bne.n	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80040aa:	23fa      	movs	r3, #250	; 0xfa
 80040ac:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80040ae:	f001 bb17 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
      else
      {
        frequency = LSI_VALUE;
 80040b2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80040b6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80040b8:	f001 bb12 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80040bc:	4b8d      	ldr	r3, [pc, #564]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040c8:	d107      	bne.n	80040da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80040ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040d0:	d103      	bne.n	80040da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80040d2:	4b89      	ldr	r3, [pc, #548]	; (80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80040d4:	637b      	str	r3, [r7, #52]	; 0x34
 80040d6:	f001 bb03 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80040da:	2300      	movs	r3, #0
 80040dc:	637b      	str	r3, [r7, #52]	; 0x34
 80040de:	f001 baff 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80040e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040e6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80040ea:	430b      	orrs	r3, r1
 80040ec:	d151      	bne.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80040ee:	4b81      	ldr	r3, [pc, #516]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80040f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80040f4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80040f8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80040fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fc:	2b80      	cmp	r3, #128	; 0x80
 80040fe:	d035      	beq.n	800416c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004102:	2b80      	cmp	r3, #128	; 0x80
 8004104:	d841      	bhi.n	800418a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	2b60      	cmp	r3, #96	; 0x60
 800410a:	d02a      	beq.n	8004162 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410e:	2b60      	cmp	r3, #96	; 0x60
 8004110:	d83b      	bhi.n	800418a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	2b40      	cmp	r3, #64	; 0x40
 8004116:	d009      	beq.n	800412c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	2b40      	cmp	r3, #64	; 0x40
 800411c:	d835      	bhi.n	800418a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00c      	beq.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004126:	2b20      	cmp	r3, #32
 8004128:	d012      	beq.n	8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800412a:	e02e      	b.n	800418a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800412c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff fb4d 	bl	80037d0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800413a:	f001 bad1 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800413e:	f107 0318 	add.w	r3, r7, #24
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff fcac 	bl	8003aa0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800414c:	f001 bac8 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004150:	f107 030c 	add.w	r3, r7, #12
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff fe0b 	bl	8003d70 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800415e:	f001 babf 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004162:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004166:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004168:	f001 baba 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800416c:	4b61      	ldr	r3, [pc, #388]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004178:	d103      	bne.n	8004182 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800417a:	4b60      	ldr	r3, [pc, #384]	; (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800417c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800417e:	f001 baaf 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004186:	f001 baab 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      default :
      {
        frequency = 0U;
 800418a:	2300      	movs	r3, #0
 800418c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800418e:	f001 baa7 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004192:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004196:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800419a:	430b      	orrs	r3, r1
 800419c:	d158      	bne.n	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800419e:	4b55      	ldr	r3, [pc, #340]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80041a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80041a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041a8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80041aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b0:	d03b      	beq.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80041b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b8:	d846      	bhi.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80041ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041c0:	d02e      	beq.n	8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041c8:	d83e      	bhi.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80041ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d0:	d00b      	beq.n	80041ea <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d8:	d836      	bhi.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00d      	beq.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e6:	d012      	beq.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80041e8:	e02e      	b.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80041ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff faee 	bl	80037d0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041f8:	f001 ba72 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80041fc:	f107 0318 	add.w	r3, r7, #24
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff fc4d 	bl	8003aa0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800420a:	f001 ba69 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800420e:	f107 030c 	add.w	r3, r7, #12
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff fdac 	bl	8003d70 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800421c:	f001 ba60 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004220:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004224:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004226:	f001 ba5b 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800422a:	4b32      	ldr	r3, [pc, #200]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004236:	d103      	bne.n	8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8004238:	4b30      	ldr	r3, [pc, #192]	; (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800423a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800423c:	f001 ba50 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004244:	f001 ba4c 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      default :

        frequency = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800424c:	f001 ba48 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8004250:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004254:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8004258:	430b      	orrs	r3, r1
 800425a:	d126      	bne.n	80042aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800425c:	4b25      	ldr	r3, [pc, #148]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800425e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004262:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004266:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004268:	4b22      	ldr	r3, [pc, #136]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004274:	d106      	bne.n	8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004278:	2b00      	cmp	r3, #0
 800427a:	d103      	bne.n	8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800427c:	4b1f      	ldr	r3, [pc, #124]	; (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800427e:	637b      	str	r3, [r7, #52]	; 0x34
 8004280:	f001 ba2e 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8004284:	4b1b      	ldr	r3, [pc, #108]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004290:	d107      	bne.n	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8004292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004298:	d103      	bne.n	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800429a:	4b19      	ldr	r3, [pc, #100]	; (8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800429c:	637b      	str	r3, [r7, #52]	; 0x34
 800429e:	f001 ba1f 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	637b      	str	r3, [r7, #52]	; 0x34
 80042a6:	f001 ba1b 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80042aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042ae:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 80042b2:	430b      	orrs	r3, r1
 80042b4:	d16e      	bne.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80042b6:	4b0f      	ldr	r3, [pc, #60]	; (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80042b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042bc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80042c0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80042c8:	d03d      	beq.n	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80042ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042cc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80042d0:	d85c      	bhi.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80042d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042d8:	d014      	beq.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042e0:	d854      	bhi.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d01f      	beq.n	8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80042e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042ee:	d012      	beq.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80042f0:	e04c      	b.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80042f2:	bf00      	nop
 80042f4:	46020c00 	.word	0x46020c00
 80042f8:	0007a120 	.word	0x0007a120
 80042fc:	00f42400 	.word	0x00f42400
 8004300:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff fa61 	bl	80037d0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800430e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004310:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004312:	f001 b9e5 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004316:	f107 0318 	add.w	r3, r7, #24
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff fbc0 	bl	8003aa0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004324:	f001 b9dc 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004328:	4ba7      	ldr	r3, [pc, #668]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004334:	d103      	bne.n	800433e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8004336:	4ba5      	ldr	r3, [pc, #660]	; (80045cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004338:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800433a:	f001 b9d1 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004342:	f001 b9cd 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004346:	4ba0      	ldr	r3, [pc, #640]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b20      	cmp	r3, #32
 8004350:	d118      	bne.n	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004352:	4b9d      	ldr	r3, [pc, #628]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800435e:	4b9a      	ldr	r3, [pc, #616]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	0e1b      	lsrs	r3, r3, #24
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	e006      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800436a:	4b97      	ldr	r3, [pc, #604]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800436c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004370:	041b      	lsls	r3, r3, #16
 8004372:	0e1b      	lsrs	r3, r3, #24
 8004374:	f003 030f 	and.w	r3, r3, #15
 8004378:	4a95      	ldr	r2, [pc, #596]	; (80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800437a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004380:	f001 b9ae 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004388:	f001 b9aa 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      default :

        frequency = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004390:	f001 b9a6 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004398:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800439c:	430b      	orrs	r3, r1
 800439e:	d17f      	bne.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80043a0:	4b89      	ldr	r3, [pc, #548]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80043a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80043a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043aa:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80043ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d165      	bne.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80043b2:	4b85      	ldr	r3, [pc, #532]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80043b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043b8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80043bc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80043c4:	d034      	beq.n	8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80043cc:	d853      	bhi.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80043ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043d4:	d00b      	beq.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043dc:	d84b      	bhi.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80043de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d016      	beq.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 80043e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043ea:	d009      	beq.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80043ec:	e043      	b.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80043ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff f9ec 	bl	80037d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80043f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80043fc:	f001 b970 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004400:	f107 0318 	add.w	r3, r7, #24
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff fb4b 	bl	8003aa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800440e:	f001 b967 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004412:	4b6d      	ldr	r3, [pc, #436]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800441a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800441e:	d103      	bne.n	8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8004420:	4b6a      	ldr	r3, [pc, #424]	; (80045cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004422:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004424:	f001 b95c 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
            frequency = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800442c:	f001 b958 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004430:	4b65      	ldr	r3, [pc, #404]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0320 	and.w	r3, r3, #32
 8004438:	2b20      	cmp	r3, #32
 800443a:	d118      	bne.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800443c:	4b62      	ldr	r3, [pc, #392]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8004448:	4b5f      	ldr	r3, [pc, #380]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	0e1b      	lsrs	r3, r3, #24
 800444e:	f003 030f 	and.w	r3, r3, #15
 8004452:	e006      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8004454:	4b5c      	ldr	r3, [pc, #368]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004456:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800445a:	041b      	lsls	r3, r3, #16
 800445c:	0e1b      	lsrs	r3, r3, #24
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	4a5b      	ldr	r2, [pc, #364]	; (80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004468:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800446a:	f001 b939 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
            frequency = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004472:	f001 b935 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
        }
        default :
        {
          frequency = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800447a:	f001 b931 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800447e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004480:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004484:	d108      	bne.n	8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff f9a0 	bl	80037d0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	637b      	str	r3, [r7, #52]	; 0x34
 8004494:	f001 b924 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else
    {
      frequency = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	637b      	str	r3, [r7, #52]	; 0x34
 800449c:	f001 b920 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80044a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044a4:	1e51      	subs	r1, r2, #1
 80044a6:	430b      	orrs	r3, r1
 80044a8:	d136      	bne.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80044aa:	4b47      	ldr	r3, [pc, #284]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80044ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d104      	bne.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80044bc:	f7fe fa1e 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 80044c0:	6378      	str	r0, [r7, #52]	; 0x34
 80044c2:	f001 b90d 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80044c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d104      	bne.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80044cc:	f7fe f8e0 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 80044d0:	6378      	str	r0, [r7, #52]	; 0x34
 80044d2:	f001 b905 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80044d6:	4b3c      	ldr	r3, [pc, #240]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e2:	d106      	bne.n	80044f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80044e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d103      	bne.n	80044f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 80044ea:	4b3a      	ldr	r3, [pc, #232]	; (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80044ec:	637b      	str	r3, [r7, #52]	; 0x34
 80044ee:	f001 b8f7 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80044f2:	4b35      	ldr	r3, [pc, #212]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80044f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d107      	bne.n	8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004502:	2b03      	cmp	r3, #3
 8004504:	d104      	bne.n	8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8004506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800450a:	637b      	str	r3, [r7, #52]	; 0x34
 800450c:	f001 b8e8 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	637b      	str	r3, [r7, #52]	; 0x34
 8004514:	f001 b8e4 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8004518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800451c:	1e91      	subs	r1, r2, #2
 800451e:	430b      	orrs	r3, r1
 8004520:	d136      	bne.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004522:	4b29      	ldr	r3, [pc, #164]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004528:	f003 030c 	and.w	r3, r3, #12
 800452c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004530:	2b00      	cmp	r3, #0
 8004532:	d104      	bne.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004534:	f7fe f9ce 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8004538:	6378      	str	r0, [r7, #52]	; 0x34
 800453a:	f001 b8d1 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004540:	2b04      	cmp	r3, #4
 8004542:	d104      	bne.n	800454e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004544:	f7fe f8a4 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 8004548:	6378      	str	r0, [r7, #52]	; 0x34
 800454a:	f001 b8c9 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800454e:	4b1e      	ldr	r3, [pc, #120]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800455a:	d106      	bne.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800455c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455e:	2b08      	cmp	r3, #8
 8004560:	d103      	bne.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8004562:	4b1c      	ldr	r3, [pc, #112]	; (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004564:	637b      	str	r3, [r7, #52]	; 0x34
 8004566:	f001 b8bb 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800456a:	4b17      	ldr	r3, [pc, #92]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800456c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b02      	cmp	r3, #2
 8004576:	d107      	bne.n	8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8004578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457a:	2b0c      	cmp	r3, #12
 800457c:	d104      	bne.n	8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800457e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004582:	637b      	str	r3, [r7, #52]	; 0x34
 8004584:	f001 b8ac 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	637b      	str	r3, [r7, #52]	; 0x34
 800458c:	f001 b8a8 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004594:	1f11      	subs	r1, r2, #4
 8004596:	430b      	orrs	r3, r1
 8004598:	d13f      	bne.n	800461a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800459a:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800459c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045a4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d104      	bne.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80045ac:	f7fe f992 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 80045b0:	6378      	str	r0, [r7, #52]	; 0x34
 80045b2:	f001 b895 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	2b10      	cmp	r3, #16
 80045ba:	d10d      	bne.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80045bc:	f7fe f868 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 80045c0:	6378      	str	r0, [r7, #52]	; 0x34
 80045c2:	f001 b88d 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 80045c6:	bf00      	nop
 80045c8:	46020c00 	.word	0x46020c00
 80045cc:	02dc6c00 	.word	0x02dc6c00
 80045d0:	08007a38 	.word	0x08007a38
 80045d4:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80045d8:	4ba8      	ldr	r3, [pc, #672]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e4:	d106      	bne.n	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80045e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d103      	bne.n	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 80045ec:	4ba4      	ldr	r3, [pc, #656]	; (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80045ee:	637b      	str	r3, [r7, #52]	; 0x34
 80045f0:	f001 b876 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80045f4:	4ba1      	ldr	r3, [pc, #644]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80045f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d107      	bne.n	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	2b30      	cmp	r3, #48	; 0x30
 8004606:	d104      	bne.n	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8004608:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800460c:	637b      	str	r3, [r7, #52]	; 0x34
 800460e:	f001 b867 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	637b      	str	r3, [r7, #52]	; 0x34
 8004616:	f001 b863 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800461a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800461e:	f1a2 0108 	sub.w	r1, r2, #8
 8004622:	430b      	orrs	r3, r1
 8004624:	d136      	bne.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004626:	4b95      	ldr	r3, [pc, #596]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800462c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004630:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	2b00      	cmp	r3, #0
 8004636:	d104      	bne.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004638:	f7fe f94c 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 800463c:	6378      	str	r0, [r7, #52]	; 0x34
 800463e:	f001 b84f 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8004642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004644:	2b40      	cmp	r3, #64	; 0x40
 8004646:	d104      	bne.n	8004652 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004648:	f7fe f822 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 800464c:	6378      	str	r0, [r7, #52]	; 0x34
 800464e:	f001 b847 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004652:	4b8a      	ldr	r3, [pc, #552]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465e:	d106      	bne.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8004660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004662:	2b80      	cmp	r3, #128	; 0x80
 8004664:	d103      	bne.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8004666:	4b86      	ldr	r3, [pc, #536]	; (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004668:	637b      	str	r3, [r7, #52]	; 0x34
 800466a:	f001 b839 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800466e:	4b83      	ldr	r3, [pc, #524]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b02      	cmp	r3, #2
 800467a:	d107      	bne.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800467c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467e:	2bc0      	cmp	r3, #192	; 0xc0
 8004680:	d104      	bne.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8004682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004686:	637b      	str	r3, [r7, #52]	; 0x34
 8004688:	f001 b82a 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	637b      	str	r3, [r7, #52]	; 0x34
 8004690:	f001 b826 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8004694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004698:	f1a2 0110 	sub.w	r1, r2, #16
 800469c:	430b      	orrs	r3, r1
 800469e:	d139      	bne.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80046a0:	4b76      	ldr	r3, [pc, #472]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80046a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046aa:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80046ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d104      	bne.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80046b2:	f7fe f90f 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 80046b6:	6378      	str	r0, [r7, #52]	; 0x34
 80046b8:	f001 b812 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80046bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c2:	d104      	bne.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80046c4:	f7fd ffe4 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 80046c8:	6378      	str	r0, [r7, #52]	; 0x34
 80046ca:	f001 b809 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80046ce:	4b6b      	ldr	r3, [pc, #428]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046da:	d107      	bne.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 80046dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046e2:	d103      	bne.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 80046e4:	4b66      	ldr	r3, [pc, #408]	; (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80046e6:	637b      	str	r3, [r7, #52]	; 0x34
 80046e8:	f000 bffa 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80046ec:	4b63      	ldr	r3, [pc, #396]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80046ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d108      	bne.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004700:	d104      	bne.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8004702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004706:	637b      	str	r3, [r7, #52]	; 0x34
 8004708:	f000 bfea 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	637b      	str	r3, [r7, #52]	; 0x34
 8004710:	f000 bfe6 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8004714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004718:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 800471c:	430b      	orrs	r3, r1
 800471e:	d139      	bne.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8004720:	4b56      	ldr	r3, [pc, #344]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004722:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004726:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800472a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472e:	2b00      	cmp	r3, #0
 8004730:	d104      	bne.n	800473c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004732:	f7fe f8cf 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8004736:	6378      	str	r0, [r7, #52]	; 0x34
 8004738:	f000 bfd2 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004742:	d104      	bne.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004744:	f7fd ffa4 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 8004748:	6378      	str	r0, [r7, #52]	; 0x34
 800474a:	f000 bfc9 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800474e:	4b4b      	ldr	r3, [pc, #300]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475a:	d107      	bne.n	800476c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800475c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004762:	d103      	bne.n	800476c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8004764:	4b46      	ldr	r3, [pc, #280]	; (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004766:	637b      	str	r3, [r7, #52]	; 0x34
 8004768:	f000 bfba 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800476c:	4b43      	ldr	r3, [pc, #268]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800476e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b02      	cmp	r3, #2
 8004778:	d108      	bne.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004780:	d104      	bne.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8004782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004786:	637b      	str	r3, [r7, #52]	; 0x34
 8004788:	f000 bfaa 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	637b      	str	r3, [r7, #52]	; 0x34
 8004790:	f000 bfa6 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004794:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004798:	f1a2 0120 	sub.w	r1, r2, #32
 800479c:	430b      	orrs	r3, r1
 800479e:	d158      	bne.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80047a0:	4b36      	ldr	r3, [pc, #216]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80047a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80047ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d104      	bne.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80047b2:	f7fe f8b7 	bl	8002924 <HAL_RCC_GetPCLK3Freq>
 80047b6:	6378      	str	r0, [r7, #52]	; 0x34
 80047b8:	f000 bf92 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d104      	bne.n	80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80047c2:	f7fd ff65 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 80047c6:	6378      	str	r0, [r7, #52]	; 0x34
 80047c8:	f000 bf8a 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80047cc:	4b2b      	ldr	r3, [pc, #172]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d8:	d106      	bne.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d103      	bne.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 80047e0:	4b27      	ldr	r3, [pc, #156]	; (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80047e2:	637b      	str	r3, [r7, #52]	; 0x34
 80047e4:	f000 bf7c 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80047e8:	4b24      	ldr	r3, [pc, #144]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80047ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d107      	bne.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	2b03      	cmp	r3, #3
 80047fa:	d104      	bne.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 80047fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004800:	637b      	str	r3, [r7, #52]	; 0x34
 8004802:	f000 bf6d 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004806:	4b1d      	ldr	r3, [pc, #116]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b20      	cmp	r3, #32
 8004810:	d11b      	bne.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	2b04      	cmp	r3, #4
 8004816:	d118      	bne.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004818:	4b18      	ldr	r3, [pc, #96]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d005      	beq.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8004824:	4b15      	ldr	r3, [pc, #84]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	0e1b      	lsrs	r3, r3, #24
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	e006      	b.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8004830:	4b12      	ldr	r3, [pc, #72]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004832:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004836:	041b      	lsls	r3, r3, #16
 8004838:	0e1b      	lsrs	r3, r3, #24
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	4a11      	ldr	r2, [pc, #68]	; (8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004844:	637b      	str	r3, [r7, #52]	; 0x34
 8004846:	f000 bf4b 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800484a:	2300      	movs	r3, #0
 800484c:	637b      	str	r3, [r7, #52]	; 0x34
 800484e:	f000 bf47 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004852:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004856:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800485a:	430b      	orrs	r3, r1
 800485c:	d172      	bne.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800485e:	4b07      	ldr	r3, [pc, #28]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004860:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004864:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004868:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800486a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004870:	d10a      	bne.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004872:	f7fd ff0d 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 8004876:	6378      	str	r0, [r7, #52]	; 0x34
 8004878:	f000 bf32 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800487c:	46020c00 	.word	0x46020c00
 8004880:	00f42400 	.word	0x00f42400
 8004884:	08007a38 	.word	0x08007a38
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8004888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800488e:	d108      	bne.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004890:	f107 0318 	add.w	r3, r7, #24
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff f903 	bl	8003aa0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	637b      	str	r3, [r7, #52]	; 0x34
 800489e:	f000 bf1f 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d104      	bne.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80048a8:	f7fd fffa 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80048ac:	6378      	str	r0, [r7, #52]	; 0x34
 80048ae:	f000 bf17 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80048b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80048b8:	d122      	bne.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80048ba:	4baa      	ldr	r3, [pc, #680]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0320 	and.w	r3, r3, #32
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d118      	bne.n	80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80048c6:	4ba7      	ldr	r3, [pc, #668]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d005      	beq.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 80048d2:	4ba4      	ldr	r3, [pc, #656]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	0e1b      	lsrs	r3, r3, #24
 80048d8:	f003 030f 	and.w	r3, r3, #15
 80048dc:	e006      	b.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 80048de:	4ba1      	ldr	r3, [pc, #644]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 80048e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048e4:	041b      	lsls	r3, r3, #16
 80048e6:	0e1b      	lsrs	r3, r3, #24
 80048e8:	f003 030f 	and.w	r3, r3, #15
 80048ec:	4a9e      	ldr	r2, [pc, #632]	; (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80048ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f2:	637b      	str	r3, [r7, #52]	; 0x34
 80048f4:	f000 bef4 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
      else
      {
        frequency = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	637b      	str	r3, [r7, #52]	; 0x34
 80048fc:	f000 bef0 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004900:	4b98      	ldr	r3, [pc, #608]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004908:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800490c:	d107      	bne.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004910:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004914:	d103      	bne.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8004916:	4b95      	ldr	r3, [pc, #596]	; (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 8004918:	637b      	str	r3, [r7, #52]	; 0x34
 800491a:	f000 bee1 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800491e:	4b91      	ldr	r3, [pc, #580]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800492a:	d107      	bne.n	800493c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800492c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004932:	d103      	bne.n	800493c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8004934:	4b8d      	ldr	r3, [pc, #564]	; (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 8004936:	637b      	str	r3, [r7, #52]	; 0x34
 8004938:	f000 bed2 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	637b      	str	r3, [r7, #52]	; 0x34
 8004940:	f000 bece 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8004944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004948:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800494c:	430b      	orrs	r3, r1
 800494e:	d158      	bne.n	8004a02 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004950:	4b84      	ldr	r3, [pc, #528]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004952:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495e:	2b04      	cmp	r3, #4
 8004960:	d84b      	bhi.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8004962:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8004964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004968:	080049a1 	.word	0x080049a1
 800496c:	0800497d 	.word	0x0800497d
 8004970:	0800498f 	.word	0x0800498f
 8004974:	080049ab 	.word	0x080049ab
 8004978:	080049b5 	.word	0x080049b5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800497c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004980:	4618      	mov	r0, r3
 8004982:	f7fe ff25 	bl	80037d0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800498a:	f000 bea9 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800498e:	f107 030c 	add.w	r3, r7, #12
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff f9ec 	bl	8003d70 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800499c:	f000 bea0 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80049a0:	f7fd ff7e 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80049a4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80049a6:	f000 be9b 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80049aa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80049ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049b0:	f000 be96 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80049b4:	4b6b      	ldr	r3, [pc, #428]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0320 	and.w	r3, r3, #32
 80049bc:	2b20      	cmp	r3, #32
 80049be:	d118      	bne.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80049c0:	4b68      	ldr	r3, [pc, #416]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d005      	beq.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80049cc:	4b65      	ldr	r3, [pc, #404]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	0e1b      	lsrs	r3, r3, #24
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	e006      	b.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 80049d8:	4b62      	ldr	r3, [pc, #392]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 80049da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049de:	041b      	lsls	r3, r3, #16
 80049e0:	0e1b      	lsrs	r3, r3, #24
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	4a60      	ldr	r2, [pc, #384]	; (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80049e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ec:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80049ee:	f000 be77 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049f6:	f000 be73 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      default:

        frequency = 0U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049fe:	f000 be6f 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8004a02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a06:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8004a0a:	430b      	orrs	r3, r1
 8004a0c:	d167      	bne.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004a0e:	4b55      	ldr	r3, [pc, #340]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004a10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a14:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004a18:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a20:	d036      	beq.n	8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8004a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a28:	d855      	bhi.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a30:	d029      	beq.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a38:	d84d      	bhi.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a40:	d013      	beq.n	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8004a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a48:	d845      	bhi.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d015      	beq.n	8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8004a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a56:	d13e      	bne.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fe feb7 	bl	80037d0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a66:	f000 be3b 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a6a:	f107 030c 	add.w	r3, r7, #12
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff f97e 	bl	8003d70 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a78:	f000 be32 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004a7c:	f7fd ff10 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 8004a80:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004a82:	f000 be2d 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004a86:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004a8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a8c:	f000 be28 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004a90:	4b34      	ldr	r3, [pc, #208]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0320 	and.w	r3, r3, #32
 8004a98:	2b20      	cmp	r3, #32
 8004a9a:	d118      	bne.n	8004ace <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004a9c:	4b31      	ldr	r3, [pc, #196]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d005      	beq.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8004aa8:	4b2e      	ldr	r3, [pc, #184]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	0e1b      	lsrs	r3, r3, #24
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	e006      	b.n	8004ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8004ab4:	4b2b      	ldr	r3, [pc, #172]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004ab6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004aba:	041b      	lsls	r3, r3, #16
 8004abc:	0e1b      	lsrs	r3, r3, #24
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	4a29      	ldr	r2, [pc, #164]	; (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8004ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ac8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004aca:	f000 be09 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ad2:	f000 be05 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      default:

        frequency = 0U;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ada:	f000 be01 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004ade:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ae2:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8004ae6:	430b      	orrs	r3, r1
 8004ae8:	d153      	bne.n	8004b92 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004aea:	4b1e      	ldr	r3, [pc, #120]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004af0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004af4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d104      	bne.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004afc:	f7fd feea 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8004b00:	6378      	str	r0, [r7, #52]	; 0x34
 8004b02:	f000 bded 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b0c:	d104      	bne.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004b0e:	f7fd fdbf 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 8004b12:	6378      	str	r0, [r7, #52]	; 0x34
 8004b14:	f000 bde4 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004b18:	4b12      	ldr	r3, [pc, #72]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b24:	d107      	bne.n	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8004b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b2c:	d103      	bne.n	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8004b2e:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 8004b30:	637b      	str	r3, [r7, #52]	; 0x34
 8004b32:	f000 bdd5 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8004b36:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0320 	and.w	r3, r3, #32
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	d123      	bne.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8004b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b48:	d11f      	bne.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b4a:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00c      	beq.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8004b56:	4b03      	ldr	r3, [pc, #12]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	0e1b      	lsrs	r3, r3, #24
 8004b5c:	f003 030f 	and.w	r3, r3, #15
 8004b60:	e00d      	b.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0xb3e>
 8004b62:	bf00      	nop
 8004b64:	46020c00 	.word	0x46020c00
 8004b68:	08007a38 	.word	0x08007a38
 8004b6c:	00f42400 	.word	0x00f42400
 8004b70:	4ba0      	ldr	r3, [pc, #640]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004b72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b76:	041b      	lsls	r3, r3, #16
 8004b78:	0e1b      	lsrs	r3, r3, #24
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	4a9e      	ldr	r2, [pc, #632]	; (8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 8004b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b84:	637b      	str	r3, [r7, #52]	; 0x34
 8004b86:	f000 bdab 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b8e:	f000 bda7 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8004b92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b96:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8004b9a:	430b      	orrs	r3, r1
 8004b9c:	d14c      	bne.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004b9e:	4b95      	ldr	r3, [pc, #596]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ba4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004ba8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d104      	bne.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0xb7a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004bb0:	f7fd fe90 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8004bb4:	6378      	str	r0, [r7, #52]	; 0x34
 8004bb6:	f000 bd93 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc0:	d104      	bne.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004bc2:	f7fd fd65 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 8004bc6:	6378      	str	r0, [r7, #52]	; 0x34
 8004bc8:	f000 bd8a 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004bcc:	4b89      	ldr	r3, [pc, #548]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd8:	d107      	bne.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8004bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be0:	d103      	bne.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
    {
      frequency = HSI_VALUE;
 8004be2:	4b86      	ldr	r3, [pc, #536]	; (8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 8004be4:	637b      	str	r3, [r7, #52]	; 0x34
 8004be6:	f000 bd7b 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8004bea:	4b82      	ldr	r3, [pc, #520]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	d11c      	bne.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bfc:	d118      	bne.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004bfe:	4b7d      	ldr	r3, [pc, #500]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d005      	beq.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 8004c0a:	4b7a      	ldr	r3, [pc, #488]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	0e1b      	lsrs	r3, r3, #24
 8004c10:	f003 030f 	and.w	r3, r3, #15
 8004c14:	e006      	b.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8004c16:	4b77      	ldr	r3, [pc, #476]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c1c:	041b      	lsls	r3, r3, #16
 8004c1e:	0e1b      	lsrs	r3, r3, #24
 8004c20:	f003 030f 	and.w	r3, r3, #15
 8004c24:	4a74      	ldr	r2, [pc, #464]	; (8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 8004c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c2c:	f000 bd58 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	637b      	str	r3, [r7, #52]	; 0x34
 8004c34:	f000 bd54 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8004c38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c3c:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004c40:	430b      	orrs	r3, r1
 8004c42:	d158      	bne.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xcb6>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004c44:	4b6b      	ldr	r3, [pc, #428]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004c46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c4e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c52:	2bc0      	cmp	r3, #192	; 0xc0
 8004c54:	d028      	beq.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 8004c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c58:	2bc0      	cmp	r3, #192	; 0xc0
 8004c5a:	d848      	bhi.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	2b80      	cmp	r3, #128	; 0x80
 8004c60:	d00e      	beq.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
 8004c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c64:	2b80      	cmp	r3, #128	; 0x80
 8004c66:	d842      	bhi.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c70:	2b40      	cmp	r3, #64	; 0x40
 8004c72:	d014      	beq.n	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
 8004c74:	e03b      	b.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8004c76:	f7fd fe55 	bl	8002924 <HAL_RCC_GetPCLK3Freq>
 8004c7a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004c7c:	f000 bd30 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c80:	4b5c      	ldr	r3, [pc, #368]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c8c:	d103      	bne.n	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
        {
          frequency = HSI_VALUE;
 8004c8e:	4b5b      	ldr	r3, [pc, #364]	; (8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 8004c90:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004c92:	f000 bd25 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c9a:	f000 bd21 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8004c9e:	f7fd fcf7 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 8004ca2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004ca4:	f000 bd1c 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004ca8:	4b52      	ldr	r3, [pc, #328]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0320 	and.w	r3, r3, #32
 8004cb0:	2b20      	cmp	r3, #32
 8004cb2:	d118      	bne.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004cb4:	4b4f      	ldr	r3, [pc, #316]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d005      	beq.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
 8004cc0:	4b4c      	ldr	r3, [pc, #304]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	0e1b      	lsrs	r3, r3, #24
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	e006      	b.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8004ccc:	4b49      	ldr	r3, [pc, #292]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004cce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004cd2:	041b      	lsls	r3, r3, #16
 8004cd4:	0e1b      	lsrs	r3, r3, #24
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	4a47      	ldr	r2, [pc, #284]	; (8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 8004cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004ce2:	f000 bcfd 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cea:	f000 bcf9 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
      default:
      {
        frequency = 0U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cf2:	f000 bcf5 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8004cf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cfa:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8004cfe:	430b      	orrs	r3, r1
 8004d00:	d14c      	bne.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004d02:	4b3c      	ldr	r3, [pc, #240]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004d0c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d104      	bne.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004d14:	f7fd fdde 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8004d18:	6378      	str	r0, [r7, #52]	; 0x34
 8004d1a:	f000 bce1 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d24:	d104      	bne.n	8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004d26:	f7fd fcb3 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 8004d2a:	6378      	str	r0, [r7, #52]	; 0x34
 8004d2c:	f000 bcd8 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004d30:	4b30      	ldr	r3, [pc, #192]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d3c:	d107      	bne.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d44:	d103      	bne.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
    {
      frequency = HSI_VALUE;
 8004d46:	4b2d      	ldr	r3, [pc, #180]	; (8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 8004d48:	637b      	str	r3, [r7, #52]	; 0x34
 8004d4a:	f000 bcc9 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8004d4e:	4b29      	ldr	r3, [pc, #164]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b20      	cmp	r3, #32
 8004d58:	d11c      	bne.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d60:	d118      	bne.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d62:	4b24      	ldr	r3, [pc, #144]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d005      	beq.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8004d6e:	4b21      	ldr	r3, [pc, #132]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	0e1b      	lsrs	r3, r3, #24
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	e006      	b.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 8004d7a:	4b1e      	ldr	r3, [pc, #120]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004d7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d80:	041b      	lsls	r3, r3, #16
 8004d82:	0e1b      	lsrs	r3, r3, #24
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	4a1b      	ldr	r2, [pc, #108]	; (8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 8004d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d90:	f000 bca6 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	637b      	str	r3, [r7, #52]	; 0x34
 8004d98:	f000 bca2 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8004d9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004da0:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 8004da4:	430b      	orrs	r3, r1
 8004da6:	d152      	bne.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 8004da8:	4b12      	ldr	r3, [pc, #72]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004daa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004dae:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8004db2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 8004db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d104      	bne.n	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004dba:	f7fd fd8b 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8004dbe:	6378      	str	r0, [r7, #52]	; 0x34
 8004dc0:	f000 bc8e 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 8004dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004dca:	d104      	bne.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004dcc:	f7fd fc60 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 8004dd0:	6378      	str	r0, [r7, #52]	; 0x34
 8004dd2:	f000 bc85 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 8004dd6:	4b07      	ldr	r3, [pc, #28]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de2:	d10d      	bne.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
 8004de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dea:	d109      	bne.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
    {
      frequency = HSI_VALUE;
 8004dec:	4b03      	ldr	r3, [pc, #12]	; (8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 8004dee:	637b      	str	r3, [r7, #52]	; 0x34
 8004df0:	f000 bc76 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8004df4:	46020c00 	.word	0x46020c00
 8004df8:	08007a38 	.word	0x08007a38
 8004dfc:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 8004e00:	4ba5      	ldr	r3, [pc, #660]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0320 	and.w	r3, r3, #32
 8004e08:	2b20      	cmp	r3, #32
 8004e0a:	d11c      	bne.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e12:	d118      	bne.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e14:	4ba0      	ldr	r3, [pc, #640]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d005      	beq.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 8004e20:	4b9d      	ldr	r3, [pc, #628]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	0e1b      	lsrs	r3, r3, #24
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	e006      	b.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
 8004e2c:	4b9a      	ldr	r3, [pc, #616]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004e2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e32:	041b      	lsls	r3, r3, #16
 8004e34:	0e1b      	lsrs	r3, r3, #24
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	4a98      	ldr	r2, [pc, #608]	; (800509c <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8004e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e40:	637b      	str	r3, [r7, #52]	; 0x34
 8004e42:	f000 bc4d 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	637b      	str	r3, [r7, #52]	; 0x34
 8004e4a:	f000 bc49 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8004e4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e52:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 8004e56:	430b      	orrs	r3, r1
 8004e58:	d14a      	bne.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xeb0>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 8004e5a:	4b8f      	ldr	r3, [pc, #572]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004e5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004e60:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004e64:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d104      	bne.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004e6c:	f7fd fd32 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8004e70:	6378      	str	r0, [r7, #52]	; 0x34
 8004e72:	f000 bc35 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8004e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e7c:	d104      	bne.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0xe48>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004e7e:	f7fd fc07 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 8004e82:	6378      	str	r0, [r7, #52]	; 0x34
 8004e84:	f000 bc2c 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 8004e88:	4b83      	ldr	r3, [pc, #524]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e94:	d107      	bne.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e9c:	d103      	bne.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
    {
      frequency = HSI_VALUE;
 8004e9e:	4b80      	ldr	r3, [pc, #512]	; (80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 8004ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea2:	f000 bc1d 	b.w	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 8004ea6:	4b7c      	ldr	r3, [pc, #496]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0320 	and.w	r3, r3, #32
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	d11b      	bne.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004eb8:	d117      	bne.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004eba:	4b77      	ldr	r3, [pc, #476]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d005      	beq.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xe92>
 8004ec6:	4b74      	ldr	r3, [pc, #464]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	0e1b      	lsrs	r3, r3, #24
 8004ecc:	f003 030f 	and.w	r3, r3, #15
 8004ed0:	e006      	b.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 8004ed2:	4b71      	ldr	r3, [pc, #452]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004ed4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ed8:	041b      	lsls	r3, r3, #16
 8004eda:	0e1b      	lsrs	r3, r3, #24
 8004edc:	f003 030f 	and.w	r3, r3, #15
 8004ee0:	4a6e      	ldr	r2, [pc, #440]	; (800509c <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8004ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ee8:	e3fa      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	637b      	str	r3, [r7, #52]	; 0x34
 8004eee:	e3f7      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8004ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ef4:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8004ef8:	430b      	orrs	r3, r1
 8004efa:	d164      	bne.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xf86>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8004efc:	4b66      	ldr	r3, [pc, #408]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004efe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f06:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8004f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d120      	bne.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004f0e:	4b62      	ldr	r3, [pc, #392]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b20      	cmp	r3, #32
 8004f18:	d117      	bne.n	8004f4a <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f1a:	4b5f      	ldr	r3, [pc, #380]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8004f26:	4b5c      	ldr	r3, [pc, #368]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	0e1b      	lsrs	r3, r3, #24
 8004f2c:	f003 030f 	and.w	r3, r3, #15
 8004f30:	e006      	b.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 8004f32:	4b59      	ldr	r3, [pc, #356]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004f34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f38:	041b      	lsls	r3, r3, #16
 8004f3a:	0e1b      	lsrs	r3, r3, #24
 8004f3c:	f003 030f 	and.w	r3, r3, #15
 8004f40:	4a56      	ldr	r2, [pc, #344]	; (800509c <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8004f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f46:	637b      	str	r3, [r7, #52]	; 0x34
 8004f48:	e3ca      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
      else
      {
        frequency = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f4e:	e3c7      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8004f50:	4b51      	ldr	r3, [pc, #324]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004f52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f5e:	d112      	bne.n	8004f86 <HAL_RCCEx_GetPeriphCLKFreq+0xf46>
 8004f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f66:	d10e      	bne.n	8004f86 <HAL_RCCEx_GetPeriphCLKFreq+0xf46>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004f68:	4b4b      	ldr	r3, [pc, #300]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f76:	d102      	bne.n	8004f7e <HAL_RCCEx_GetPeriphCLKFreq+0xf3e>
      {
        frequency = LSI_VALUE / 128U;
 8004f78:	23fa      	movs	r3, #250	; 0xfa
 8004f7a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004f7c:	e3b0      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
      else
      {
        frequency = LSI_VALUE;
 8004f7e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004f82:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004f84:	e3ac      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8004f86:	4b44      	ldr	r3, [pc, #272]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f92:	d106      	bne.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8004f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f9a:	d102      	bne.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      frequency = HSI_VALUE;
 8004f9c:	4b40      	ldr	r3, [pc, #256]	; (80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 8004f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004fa0:	e39e      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8004fa2:	4b3d      	ldr	r3, [pc, #244]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d107      	bne.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fb6:	d103      	bne.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
    {
      frequency = LSE_VALUE;
 8004fb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8004fbe:	e38f      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8004fc4:	e38c      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8004fc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fca:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8004fce:	430b      	orrs	r3, r1
 8004fd0:	d16b      	bne.n	80050aa <HAL_RCCEx_GetPeriphCLKFreq+0x106a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004fd2:	4b31      	ldr	r3, [pc, #196]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004fd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004fd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fdc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8004fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d120      	bne.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0xfe6>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004fe4:	4b2c      	ldr	r3, [pc, #176]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b20      	cmp	r3, #32
 8004fee:	d117      	bne.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xfe0>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ff0:	4b29      	ldr	r3, [pc, #164]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d005      	beq.n	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8004ffc:	4b26      	ldr	r3, [pc, #152]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	0e1b      	lsrs	r3, r3, #24
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	e006      	b.n	8005016 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
 8005008:	4b23      	ldr	r3, [pc, #140]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 800500a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800500e:	041b      	lsls	r3, r3, #16
 8005010:	0e1b      	lsrs	r3, r3, #24
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	4a21      	ldr	r2, [pc, #132]	; (800509c <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8005018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800501c:	637b      	str	r3, [r7, #52]	; 0x34
 800501e:	e35f      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
      else
      {
        frequency = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	637b      	str	r3, [r7, #52]	; 0x34
 8005024:	e35c      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005026:	4b1c      	ldr	r3, [pc, #112]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8005028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800502c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005030:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005034:	d112      	bne.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0x101c>
 8005036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800503c:	d10e      	bne.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0x101c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800503e:	4b16      	ldr	r3, [pc, #88]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8005040:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005048:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800504c:	d102      	bne.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>
      {
        frequency = LSI_VALUE / 128U;
 800504e:	23fa      	movs	r3, #250	; 0xfa
 8005050:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005052:	e345      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
      else
      {
        frequency = LSI_VALUE;
 8005054:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005058:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800505a:	e341      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800505c:	4b0e      	ldr	r3, [pc, #56]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005068:	d106      	bne.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005070:	d102      	bne.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
    {
      frequency = HSI_VALUE;
 8005072:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 8005074:	637b      	str	r3, [r7, #52]	; 0x34
 8005076:	e333      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005078:	4b07      	ldr	r3, [pc, #28]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 800507a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b02      	cmp	r3, #2
 8005084:	d10e      	bne.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1064>
 8005086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005088:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800508c:	d10a      	bne.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1064>
    {
      frequency = LSE_VALUE;
 800508e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005092:	637b      	str	r3, [r7, #52]	; 0x34
 8005094:	e324      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8005096:	bf00      	nop
 8005098:	46020c00 	.word	0x46020c00
 800509c:	08007a38 	.word	0x08007a38
 80050a0:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	637b      	str	r3, [r7, #52]	; 0x34
 80050a8:	e31a      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80050aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050ae:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80050b2:	430b      	orrs	r3, r1
 80050b4:	d147      	bne.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x1106>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80050b6:	4b9b      	ldr	r3, [pc, #620]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 80050b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80050c0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d103      	bne.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80050c8:	f7fd fc04 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 80050cc:	6378      	str	r0, [r7, #52]	; 0x34
 80050ce:	e307      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80050d0:	4b94      	ldr	r3, [pc, #592]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 80050d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050de:	d112      	bne.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x10c6>
 80050e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050e6:	d10e      	bne.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x10c6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80050e8:	4b8e      	ldr	r3, [pc, #568]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 80050ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050f6:	d102      	bne.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
      {
        frequency = LSI_VALUE / 128U;
 80050f8:	23fa      	movs	r3, #250	; 0xfa
 80050fa:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80050fc:	e2f0      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
      else
      {
        frequency = LSI_VALUE;
 80050fe:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005102:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005104:	e2ec      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005106:	4b87      	ldr	r3, [pc, #540]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800510e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005112:	d106      	bne.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x10e2>
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800511a:	d102      	bne.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x10e2>
    {
      frequency = HSI_VALUE;
 800511c:	4b82      	ldr	r3, [pc, #520]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800511e:	637b      	str	r3, [r7, #52]	; 0x34
 8005120:	e2de      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005122:	4b80      	ldr	r3, [pc, #512]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 8005124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b02      	cmp	r3, #2
 800512e:	d107      	bne.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x1100>
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005136:	d103      	bne.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x1100>
    {
      frequency = LSE_VALUE;
 8005138:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800513c:	637b      	str	r3, [r7, #52]	; 0x34
 800513e:	e2cf      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	637b      	str	r3, [r7, #52]	; 0x34
 8005144:	e2cc      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005146:	e9d7 2300 	ldrd	r2, r3, [r7]
 800514a:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800514e:	430b      	orrs	r3, r1
 8005150:	d12d      	bne.n	80051ae <HAL_RCCEx_GetPeriphCLKFreq+0x116e>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005152:	4b74      	ldr	r3, [pc, #464]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 8005154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005158:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800515c:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800515e:	4b71      	ldr	r3, [pc, #452]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005166:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800516a:	d105      	bne.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>
 800516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516e:	2b00      	cmp	r3, #0
 8005170:	d102      	bne.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>
    {
      frequency = HSE_VALUE;
 8005172:	4b6d      	ldr	r3, [pc, #436]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 8005174:	637b      	str	r3, [r7, #52]	; 0x34
 8005176:	e2b3      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8005178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800517e:	d107      	bne.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x1150>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005184:	4618      	mov	r0, r3
 8005186:	f7fe fb23 	bl	80037d0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	637b      	str	r3, [r7, #52]	; 0x34
 800518e:	e2a7      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005192:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005196:	d107      	bne.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005198:	f107 0318 	add.w	r3, r7, #24
 800519c:	4618      	mov	r0, r3
 800519e:	f7fe fc7f 	bl	8003aa0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	637b      	str	r3, [r7, #52]	; 0x34
 80051a6:	e29b      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	637b      	str	r3, [r7, #52]	; 0x34
 80051ac:	e298      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80051ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051b2:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80051b6:	430b      	orrs	r3, r1
 80051b8:	d156      	bne.n	8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80051ba:	4b5a      	ldr	r3, [pc, #360]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 80051bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80051c4:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80051cc:	d028      	beq.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>
 80051ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80051d4:	d845      	bhi.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051dc:	d013      	beq.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051e4:	d83d      	bhi.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d004      	beq.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051f2:	d004      	beq.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 80051f4:	e035      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80051f6:	f7fd fb81 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 80051fa:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80051fc:	e270      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80051fe:	f7fd fa47 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 8005202:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005204:	e26c      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005206:	4b47      	ldr	r3, [pc, #284]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800520e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005212:	d102      	bne.n	800521a <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
        {
          frequency = HSI_VALUE;
 8005214:	4b44      	ldr	r3, [pc, #272]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 8005216:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005218:	e262      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800521e:	e25f      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005220:	4b40      	ldr	r3, [pc, #256]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0320 	and.w	r3, r3, #32
 8005228:	2b20      	cmp	r3, #32
 800522a:	d117      	bne.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x121c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800522c:	4b3d      	ldr	r3, [pc, #244]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x1204>
 8005238:	4b3a      	ldr	r3, [pc, #232]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	0e1b      	lsrs	r3, r3, #24
 800523e:	f003 030f 	and.w	r3, r3, #15
 8005242:	e006      	b.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x1212>
 8005244:	4b37      	ldr	r3, [pc, #220]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 8005246:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800524a:	041b      	lsls	r3, r3, #16
 800524c:	0e1b      	lsrs	r3, r3, #24
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	4a36      	ldr	r2, [pc, #216]	; (800532c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005258:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800525a:	e241      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005260:	e23e      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      default:

        frequency = 0U;
 8005262:	2300      	movs	r3, #0
 8005264:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005266:	e23b      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800526c:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8005270:	430b      	orrs	r3, r1
 8005272:	d15d      	bne.n	8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005274:	4b2b      	ldr	r3, [pc, #172]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 8005276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800527a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800527e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005282:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005286:	d028      	beq.n	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x129a>
 8005288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800528e:	d845      	bhi.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
 8005290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005292:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005296:	d013      	beq.n	80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8005298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800529e:	d83d      	bhi.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
 80052a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d004      	beq.n	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ac:	d004      	beq.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 80052ae:	e035      	b.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80052b0:	f7fd fb10 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 80052b4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80052b6:	e213      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80052b8:	f7fd f9ea 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 80052bc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80052be:	e20f      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80052c0:	4b18      	ldr	r3, [pc, #96]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052cc:	d102      	bne.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>
        {
          frequency = HSI_VALUE;
 80052ce:	4b16      	ldr	r3, [pc, #88]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 80052d0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80052d2:	e205      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052d8:	e202      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80052da:	4b12      	ldr	r3, [pc, #72]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0320 	and.w	r3, r3, #32
 80052e2:	2b20      	cmp	r3, #32
 80052e4:	d117      	bne.n	8005316 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80052e6:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d005      	beq.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0x12be>
 80052f2:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	0e1b      	lsrs	r3, r3, #24
 80052f8:	f003 030f 	and.w	r3, r3, #15
 80052fc:	e006      	b.n	800530c <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>
 80052fe:	4b09      	ldr	r3, [pc, #36]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 8005300:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005304:	041b      	lsls	r3, r3, #16
 8005306:	0e1b      	lsrs	r3, r3, #24
 8005308:	f003 030f 	and.w	r3, r3, #15
 800530c:	4a07      	ldr	r2, [pc, #28]	; (800532c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800530e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005312:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005314:	e1e4      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 8005316:	2300      	movs	r3, #0
 8005318:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800531a:	e1e1      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      default:

        frequency = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005320:	e1de      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8005322:	bf00      	nop
 8005324:	46020c00 	.word	0x46020c00
 8005328:	00f42400 	.word	0x00f42400
 800532c:	08007a38 	.word	0x08007a38
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005334:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8005338:	430b      	orrs	r3, r1
 800533a:	d176      	bne.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800533c:	4ba6      	ldr	r3, [pc, #664]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 800533e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005342:	f003 0318 	and.w	r3, r3, #24
 8005346:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534a:	2b18      	cmp	r3, #24
 800534c:	d86a      	bhi.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800534e:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	080053b9 	.word	0x080053b9
 8005358:	08005425 	.word	0x08005425
 800535c:	08005425 	.word	0x08005425
 8005360:	08005425 	.word	0x08005425
 8005364:	08005425 	.word	0x08005425
 8005368:	08005425 	.word	0x08005425
 800536c:	08005425 	.word	0x08005425
 8005370:	08005425 	.word	0x08005425
 8005374:	080053c1 	.word	0x080053c1
 8005378:	08005425 	.word	0x08005425
 800537c:	08005425 	.word	0x08005425
 8005380:	08005425 	.word	0x08005425
 8005384:	08005425 	.word	0x08005425
 8005388:	08005425 	.word	0x08005425
 800538c:	08005425 	.word	0x08005425
 8005390:	08005425 	.word	0x08005425
 8005394:	080053c9 	.word	0x080053c9
 8005398:	08005425 	.word	0x08005425
 800539c:	08005425 	.word	0x08005425
 80053a0:	08005425 	.word	0x08005425
 80053a4:	08005425 	.word	0x08005425
 80053a8:	08005425 	.word	0x08005425
 80053ac:	08005425 	.word	0x08005425
 80053b0:	08005425 	.word	0x08005425
 80053b4:	080053e3 	.word	0x080053e3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80053b8:	f7fd fab4 	bl	8002924 <HAL_RCC_GetPCLK3Freq>
 80053bc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80053be:	e18f      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80053c0:	f7fd f966 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 80053c4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80053c6:	e18b      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053c8:	4b83      	ldr	r3, [pc, #524]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d4:	d102      	bne.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 80053d6:	4b81      	ldr	r3, [pc, #516]	; (80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 80053d8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80053da:	e181      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053e0:	e17e      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80053e2:	4b7d      	ldr	r3, [pc, #500]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d117      	bne.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80053ee:	4b7a      	ldr	r3, [pc, #488]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d005      	beq.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 80053fa:	4b77      	ldr	r3, [pc, #476]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	0e1b      	lsrs	r3, r3, #24
 8005400:	f003 030f 	and.w	r3, r3, #15
 8005404:	e006      	b.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 8005406:	4b74      	ldr	r3, [pc, #464]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 8005408:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800540c:	041b      	lsls	r3, r3, #16
 800540e:	0e1b      	lsrs	r3, r3, #24
 8005410:	f003 030f 	and.w	r3, r3, #15
 8005414:	4a72      	ldr	r2, [pc, #456]	; (80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x15a0>)
 8005416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800541a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800541c:	e160      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 800541e:	2300      	movs	r3, #0
 8005420:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005422:	e15d      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      default:

        frequency = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005428:	e15a      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800542a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800542e:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8005432:	430b      	orrs	r3, r1
 8005434:	d155      	bne.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005436:	4b68      	ldr	r3, [pc, #416]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 8005438:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800543c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005440:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005444:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005448:	d013      	beq.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005450:	d844      	bhi.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 8005452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005454:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005458:	d013      	beq.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005460:	d83c      	bhi.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 8005462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005464:	2b00      	cmp	r3, #0
 8005466:	d014      	beq.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 8005468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800546e:	d014      	beq.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 8005470:	e034      	b.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005472:	f107 0318 	add.w	r3, r7, #24
 8005476:	4618      	mov	r0, r3
 8005478:	f7fe fb12 	bl	8003aa0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005480:	e12e      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005486:	4618      	mov	r0, r3
 8005488:	f7fe f9a2 	bl	80037d0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800548c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005490:	e126      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005492:	f7fd f8fd 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 8005496:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005498:	e122      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800549a:	4b4f      	ldr	r3, [pc, #316]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0320 	and.w	r3, r3, #32
 80054a2:	2b20      	cmp	r3, #32
 80054a4:	d117      	bne.n	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80054a6:	4b4c      	ldr	r3, [pc, #304]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d005      	beq.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 80054b2:	4b49      	ldr	r3, [pc, #292]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	0e1b      	lsrs	r3, r3, #24
 80054b8:	f003 030f 	and.w	r3, r3, #15
 80054bc:	e006      	b.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 80054be:	4b46      	ldr	r3, [pc, #280]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 80054c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054c4:	041b      	lsls	r3, r3, #16
 80054c6:	0e1b      	lsrs	r3, r3, #24
 80054c8:	f003 030f 	and.w	r3, r3, #15
 80054cc:	4a44      	ldr	r2, [pc, #272]	; (80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x15a0>)
 80054ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80054d4:	e104      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054da:	e101      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      default:

        frequency = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054e0:	e0fe      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 80054e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054e6:	1e59      	subs	r1, r3, #1
 80054e8:	ea52 0301 	orrs.w	r3, r2, r1
 80054ec:	d13c      	bne.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 80054ee:	4b3a      	ldr	r3, [pc, #232]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 80054f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80054f4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80054f8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80054fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005500:	d027      	beq.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 8005502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005504:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005508:	d82b      	bhi.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005510:	d017      	beq.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 8005512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005514:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005518:	d823      	bhi.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800551a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551c:	2b00      	cmp	r3, #0
 800551e:	d004      	beq.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 8005520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005526:	d004      	beq.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8005528:	e01b      	b.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800552a:	f7fd f8b1 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 800552e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005530:	e0d6      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005536:	4618      	mov	r0, r3
 8005538:	f7fe f94a 	bl	80037d0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800553c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005540:	e0ce      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005542:	f107 0318 	add.w	r3, r7, #24
 8005546:	4618      	mov	r0, r3
 8005548:	f7fe faaa 	bl	8003aa0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005550:	e0c6      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005552:	f107 030c 	add.w	r3, r7, #12
 8005556:	4618      	mov	r0, r3
 8005558:	f7fe fc0a 	bl	8003d70 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005560:	e0be      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      default:

        frequency = 0U;
 8005562:	2300      	movs	r3, #0
 8005564:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005566:	e0bb      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800556c:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8005570:	430b      	orrs	r3, r1
 8005572:	d137      	bne.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x15a4>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005574:	4b18      	ldr	r3, [pc, #96]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 8005576:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800557a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800557e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005580:	4b15      	ldr	r3, [pc, #84]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 8005582:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b02      	cmp	r3, #2
 800558c:	d106      	bne.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	2b00      	cmp	r3, #0
 8005592:	d103      	bne.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 8005594:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005598:	637b      	str	r3, [r7, #52]	; 0x34
 800559a:	e0a1      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800559c:	4b0e      	ldr	r3, [pc, #56]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 800559e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055aa:	d112      	bne.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055b2:	d10e      	bne.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80055b4:	4b08      	ldr	r3, [pc, #32]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 80055b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055c2:	d102      	bne.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 80055c4:	23fa      	movs	r3, #250	; 0xfa
 80055c6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80055c8:	e08a      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
      else
      {
        frequency = LSI_VALUE;
 80055ca:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80055ce:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80055d0:	e086      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	637b      	str	r3, [r7, #52]	; 0x34
 80055d6:	e083      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 80055d8:	46020c00 	.word	0x46020c00
 80055dc:	00f42400 	.word	0x00f42400
 80055e0:	08007a38 	.word	0x08007a38
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80055e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055e8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80055ec:	430b      	orrs	r3, r1
 80055ee:	d131      	bne.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80055f0:	4b3e      	ldr	r3, [pc, #248]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>)
 80055f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80055f6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80055fa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80055fc:	4b3b      	ldr	r3, [pc, #236]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005608:	d105      	bne.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x15d6>
 800560a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560c:	2b00      	cmp	r3, #0
 800560e:	d102      	bne.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x15d6>
    {
      frequency = HSI48_VALUE;
 8005610:	4b37      	ldr	r3, [pc, #220]	; (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8005612:	637b      	str	r3, [r7, #52]	; 0x34
 8005614:	e064      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8005616:	4b35      	ldr	r3, [pc, #212]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800561e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005622:	d106      	bne.n	8005632 <HAL_RCCEx_GetPeriphCLKFreq+0x15f2>
 8005624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800562a:	d102      	bne.n	8005632 <HAL_RCCEx_GetPeriphCLKFreq+0x15f2>
    {
      frequency = HSI48_VALUE >> 1U ;
 800562c:	4b31      	ldr	r3, [pc, #196]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 800562e:	637b      	str	r3, [r7, #52]	; 0x34
 8005630:	e056      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8005632:	4b2e      	ldr	r3, [pc, #184]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800563a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800563e:	d106      	bne.n	800564e <HAL_RCCEx_GetPeriphCLKFreq+0x160e>
 8005640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005646:	d102      	bne.n	800564e <HAL_RCCEx_GetPeriphCLKFreq+0x160e>
    {
      frequency = HSI_VALUE;
 8005648:	4b2b      	ldr	r3, [pc, #172]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 800564a:	637b      	str	r3, [r7, #52]	; 0x34
 800564c:	e048      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800564e:	2300      	movs	r3, #0
 8005650:	637b      	str	r3, [r7, #52]	; 0x34
 8005652:	e045      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8005654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005658:	f1a3 0108 	sub.w	r1, r3, #8
 800565c:	ea52 0301 	orrs.w	r3, r2, r1
 8005660:	d13c      	bne.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x169c>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 8005662:	4b22      	ldr	r3, [pc, #136]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>)
 8005664:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005668:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800566c:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800566e:	4b1f      	ldr	r3, [pc, #124]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005676:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800567a:	d105      	bne.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x1648>
 800567c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567e:	2b00      	cmp	r3, #0
 8005680:	d102      	bne.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x1648>
    {
      frequency = HSE_VALUE;
 8005682:	4b1d      	ldr	r3, [pc, #116]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8005684:	637b      	str	r3, [r7, #52]	; 0x34
 8005686:	e02b      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8005688:	4b18      	ldr	r3, [pc, #96]	; (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005690:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005694:	d106      	bne.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800569c:	d102      	bne.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      frequency = HSE_VALUE >> 1U ;
 800569e:	4b17      	ldr	r3, [pc, #92]	; (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 80056a0:	637b      	str	r3, [r7, #52]	; 0x34
 80056a2:	e01d      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 80056a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056aa:	d107      	bne.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7fe f88d 	bl	80037d0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	637b      	str	r3, [r7, #52]	; 0x34
 80056ba:	e011      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 80056bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056be:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80056c2:	d108      	bne.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1696>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fe f881 	bl	80037d0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	085b      	lsrs	r3, r3, #1
 80056d2:	637b      	str	r3, [r7, #52]	; 0x34
 80056d4:	e004      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	637b      	str	r3, [r7, #52]	; 0x34
 80056da:	e001      	b.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80056e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3738      	adds	r7, #56	; 0x38
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	46020c00 	.word	0x46020c00
 80056f0:	02dc6c00 	.word	0x02dc6c00
 80056f4:	016e3600 	.word	0x016e3600
 80056f8:	00f42400 	.word	0x00f42400
 80056fc:	007a1200 	.word	0x007a1200

08005700 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005708:	4b47      	ldr	r3, [pc, #284]	; (8005828 <RCCEx_PLL2_Config+0x128>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a46      	ldr	r2, [pc, #280]	; (8005828 <RCCEx_PLL2_Config+0x128>)
 800570e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005712:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005714:	f7fb fb46 	bl	8000da4 <HAL_GetTick>
 8005718:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800571a:	e008      	b.n	800572e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800571c:	f7fb fb42 	bl	8000da4 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d901      	bls.n	800572e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e077      	b.n	800581e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800572e:	4b3e      	ldr	r3, [pc, #248]	; (8005828 <RCCEx_PLL2_Config+0x128>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1f0      	bne.n	800571c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800573a:	4b3b      	ldr	r3, [pc, #236]	; (8005828 <RCCEx_PLL2_Config+0x128>)
 800573c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005742:	f023 0303 	bic.w	r3, r3, #3
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6811      	ldr	r1, [r2, #0]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6852      	ldr	r2, [r2, #4]
 800574e:	3a01      	subs	r2, #1
 8005750:	0212      	lsls	r2, r2, #8
 8005752:	430a      	orrs	r2, r1
 8005754:	4934      	ldr	r1, [pc, #208]	; (8005828 <RCCEx_PLL2_Config+0x128>)
 8005756:	4313      	orrs	r3, r2
 8005758:	62cb      	str	r3, [r1, #44]	; 0x2c
 800575a:	4b33      	ldr	r3, [pc, #204]	; (8005828 <RCCEx_PLL2_Config+0x128>)
 800575c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800575e:	4b33      	ldr	r3, [pc, #204]	; (800582c <RCCEx_PLL2_Config+0x12c>)
 8005760:	4013      	ands	r3, r2
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6892      	ldr	r2, [r2, #8]
 8005766:	3a01      	subs	r2, #1
 8005768:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	68d2      	ldr	r2, [r2, #12]
 8005770:	3a01      	subs	r2, #1
 8005772:	0252      	lsls	r2, r2, #9
 8005774:	b292      	uxth	r2, r2
 8005776:	4311      	orrs	r1, r2
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6912      	ldr	r2, [r2, #16]
 800577c:	3a01      	subs	r2, #1
 800577e:	0412      	lsls	r2, r2, #16
 8005780:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005784:	4311      	orrs	r1, r2
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6952      	ldr	r2, [r2, #20]
 800578a:	3a01      	subs	r2, #1
 800578c:	0612      	lsls	r2, r2, #24
 800578e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005792:	430a      	orrs	r2, r1
 8005794:	4924      	ldr	r1, [pc, #144]	; (8005828 <RCCEx_PLL2_Config+0x128>)
 8005796:	4313      	orrs	r3, r2
 8005798:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800579a:	4b23      	ldr	r3, [pc, #140]	; (8005828 <RCCEx_PLL2_Config+0x128>)
 800579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579e:	f023 020c 	bic.w	r2, r3, #12
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	4920      	ldr	r1, [pc, #128]	; (8005828 <RCCEx_PLL2_Config+0x128>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80057ac:	4b1e      	ldr	r3, [pc, #120]	; (8005828 <RCCEx_PLL2_Config+0x128>)
 80057ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	491c      	ldr	r1, [pc, #112]	; (8005828 <RCCEx_PLL2_Config+0x128>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80057ba:	4b1b      	ldr	r3, [pc, #108]	; (8005828 <RCCEx_PLL2_Config+0x128>)
 80057bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057be:	4a1a      	ldr	r2, [pc, #104]	; (8005828 <RCCEx_PLL2_Config+0x128>)
 80057c0:	f023 0310 	bic.w	r3, r3, #16
 80057c4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80057c6:	4b18      	ldr	r3, [pc, #96]	; (8005828 <RCCEx_PLL2_Config+0x128>)
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	69d2      	ldr	r2, [r2, #28]
 80057d6:	00d2      	lsls	r2, r2, #3
 80057d8:	4913      	ldr	r1, [pc, #76]	; (8005828 <RCCEx_PLL2_Config+0x128>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80057de:	4b12      	ldr	r3, [pc, #72]	; (8005828 <RCCEx_PLL2_Config+0x128>)
 80057e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e2:	4a11      	ldr	r2, [pc, #68]	; (8005828 <RCCEx_PLL2_Config+0x128>)
 80057e4:	f043 0310 	orr.w	r3, r3, #16
 80057e8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80057ea:	4b0f      	ldr	r3, [pc, #60]	; (8005828 <RCCEx_PLL2_Config+0x128>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a0e      	ldr	r2, [pc, #56]	; (8005828 <RCCEx_PLL2_Config+0x128>)
 80057f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057f4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057f6:	f7fb fad5 	bl	8000da4 <HAL_GetTick>
 80057fa:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057fc:	e008      	b.n	8005810 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80057fe:	f7fb fad1 	bl	8000da4 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d901      	bls.n	8005810 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e006      	b.n	800581e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005810:	4b05      	ldr	r3, [pc, #20]	; (8005828 <RCCEx_PLL2_Config+0x128>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0f0      	beq.n	80057fe <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800581c:	2300      	movs	r3, #0

}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	46020c00 	.word	0x46020c00
 800582c:	80800000 	.word	0x80800000

08005830 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005838:	4b47      	ldr	r3, [pc, #284]	; (8005958 <RCCEx_PLL3_Config+0x128>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a46      	ldr	r2, [pc, #280]	; (8005958 <RCCEx_PLL3_Config+0x128>)
 800583e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005842:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005844:	f7fb faae 	bl	8000da4 <HAL_GetTick>
 8005848:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800584a:	e008      	b.n	800585e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800584c:	f7fb faaa 	bl	8000da4 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e077      	b.n	800594e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800585e:	4b3e      	ldr	r3, [pc, #248]	; (8005958 <RCCEx_PLL3_Config+0x128>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f0      	bne.n	800584c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800586a:	4b3b      	ldr	r3, [pc, #236]	; (8005958 <RCCEx_PLL3_Config+0x128>)
 800586c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005872:	f023 0303 	bic.w	r3, r3, #3
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6811      	ldr	r1, [r2, #0]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6852      	ldr	r2, [r2, #4]
 800587e:	3a01      	subs	r2, #1
 8005880:	0212      	lsls	r2, r2, #8
 8005882:	430a      	orrs	r2, r1
 8005884:	4934      	ldr	r1, [pc, #208]	; (8005958 <RCCEx_PLL3_Config+0x128>)
 8005886:	4313      	orrs	r3, r2
 8005888:	630b      	str	r3, [r1, #48]	; 0x30
 800588a:	4b33      	ldr	r3, [pc, #204]	; (8005958 <RCCEx_PLL3_Config+0x128>)
 800588c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800588e:	4b33      	ldr	r3, [pc, #204]	; (800595c <RCCEx_PLL3_Config+0x12c>)
 8005890:	4013      	ands	r3, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6892      	ldr	r2, [r2, #8]
 8005896:	3a01      	subs	r2, #1
 8005898:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	68d2      	ldr	r2, [r2, #12]
 80058a0:	3a01      	subs	r2, #1
 80058a2:	0252      	lsls	r2, r2, #9
 80058a4:	b292      	uxth	r2, r2
 80058a6:	4311      	orrs	r1, r2
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6912      	ldr	r2, [r2, #16]
 80058ac:	3a01      	subs	r2, #1
 80058ae:	0412      	lsls	r2, r2, #16
 80058b0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80058b4:	4311      	orrs	r1, r2
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6952      	ldr	r2, [r2, #20]
 80058ba:	3a01      	subs	r2, #1
 80058bc:	0612      	lsls	r2, r2, #24
 80058be:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80058c2:	430a      	orrs	r2, r1
 80058c4:	4924      	ldr	r1, [pc, #144]	; (8005958 <RCCEx_PLL3_Config+0x128>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80058ca:	4b23      	ldr	r3, [pc, #140]	; (8005958 <RCCEx_PLL3_Config+0x128>)
 80058cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ce:	f023 020c 	bic.w	r2, r3, #12
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	4920      	ldr	r1, [pc, #128]	; (8005958 <RCCEx_PLL3_Config+0x128>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80058dc:	4b1e      	ldr	r3, [pc, #120]	; (8005958 <RCCEx_PLL3_Config+0x128>)
 80058de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	491c      	ldr	r1, [pc, #112]	; (8005958 <RCCEx_PLL3_Config+0x128>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80058ea:	4b1b      	ldr	r3, [pc, #108]	; (8005958 <RCCEx_PLL3_Config+0x128>)
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	4a1a      	ldr	r2, [pc, #104]	; (8005958 <RCCEx_PLL3_Config+0x128>)
 80058f0:	f023 0310 	bic.w	r3, r3, #16
 80058f4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80058f6:	4b18      	ldr	r3, [pc, #96]	; (8005958 <RCCEx_PLL3_Config+0x128>)
 80058f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058fe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	69d2      	ldr	r2, [r2, #28]
 8005906:	00d2      	lsls	r2, r2, #3
 8005908:	4913      	ldr	r1, [pc, #76]	; (8005958 <RCCEx_PLL3_Config+0x128>)
 800590a:	4313      	orrs	r3, r2
 800590c:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800590e:	4b12      	ldr	r3, [pc, #72]	; (8005958 <RCCEx_PLL3_Config+0x128>)
 8005910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005912:	4a11      	ldr	r2, [pc, #68]	; (8005958 <RCCEx_PLL3_Config+0x128>)
 8005914:	f043 0310 	orr.w	r3, r3, #16
 8005918:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800591a:	4b0f      	ldr	r3, [pc, #60]	; (8005958 <RCCEx_PLL3_Config+0x128>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a0e      	ldr	r2, [pc, #56]	; (8005958 <RCCEx_PLL3_Config+0x128>)
 8005920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005924:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005926:	f7fb fa3d 	bl	8000da4 <HAL_GetTick>
 800592a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800592c:	e008      	b.n	8005940 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800592e:	f7fb fa39 	bl	8000da4 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d901      	bls.n	8005940 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e006      	b.n	800594e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005940:	4b05      	ldr	r3, [pc, #20]	; (8005958 <RCCEx_PLL3_Config+0x128>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0f0      	beq.n	800592e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	46020c00 	.word	0x46020c00
 800595c:	80800000 	.word	0x80800000

08005960 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e042      	b.n	80059f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005978:	2b00      	cmp	r3, #0
 800597a:	d106      	bne.n	800598a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7fb f809 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2224      	movs	r2, #36	; 0x24
 800598e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0201 	bic.w	r2, r2, #1
 80059a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f982 	bl	8005cac <UART_SetConfig>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d101      	bne.n	80059b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e022      	b.n	80059f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fb24 	bl	8006008 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689a      	ldr	r2, [r3, #8]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f042 0201 	orr.w	r2, r2, #1
 80059ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fbab 	bl	800614c <UART_CheckIdleState>
 80059f6:	4603      	mov	r3, r0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08a      	sub	sp, #40	; 0x28
 8005a04:	af02      	add	r7, sp, #8
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a16:	2b20      	cmp	r3, #32
 8005a18:	d17b      	bne.n	8005b12 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <HAL_UART_Transmit+0x26>
 8005a20:	88fb      	ldrh	r3, [r7, #6]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e074      	b.n	8005b14 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2221      	movs	r2, #33	; 0x21
 8005a36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a3a:	f7fb f9b3 	bl	8000da4 <HAL_GetTick>
 8005a3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	88fa      	ldrh	r2, [r7, #6]
 8005a44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	88fa      	ldrh	r2, [r7, #6]
 8005a4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a58:	d108      	bne.n	8005a6c <HAL_UART_Transmit+0x6c>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d104      	bne.n	8005a6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a62:	2300      	movs	r3, #0
 8005a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	61bb      	str	r3, [r7, #24]
 8005a6a:	e003      	b.n	8005a74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a70:	2300      	movs	r3, #0
 8005a72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a74:	e030      	b.n	8005ad8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	2180      	movs	r1, #128	; 0x80
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 fc0d 	bl	80062a0 <UART_WaitOnFlagUntilTimeout>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d005      	beq.n	8005a98 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e03d      	b.n	8005b14 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10b      	bne.n	8005ab6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	3302      	adds	r3, #2
 8005ab2:	61bb      	str	r3, [r7, #24]
 8005ab4:	e007      	b.n	8005ac6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	781a      	ldrb	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1c8      	bne.n	8005a76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	2200      	movs	r2, #0
 8005aec:	2140      	movs	r1, #64	; 0x40
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 fbd6 	bl	80062a0 <UART_WaitOnFlagUntilTimeout>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d005      	beq.n	8005b06 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e006      	b.n	8005b14 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e000      	b.n	8005b14 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005b12:	2302      	movs	r3, #2
  }
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3720      	adds	r7, #32
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08a      	sub	sp, #40	; 0x28
 8005b20:	af02      	add	r7, sp, #8
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	603b      	str	r3, [r7, #0]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b32:	2b20      	cmp	r3, #32
 8005b34:	f040 80b5 	bne.w	8005ca2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <HAL_UART_Receive+0x28>
 8005b3e:	88fb      	ldrh	r3, [r7, #6]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e0ad      	b.n	8005ca4 <HAL_UART_Receive+0x188>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2222      	movs	r2, #34	; 0x22
 8005b54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b5e:	f7fb f921 	bl	8000da4 <HAL_GetTick>
 8005b62:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	88fa      	ldrh	r2, [r7, #6]
 8005b68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	88fa      	ldrh	r2, [r7, #6]
 8005b70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b7c:	d10e      	bne.n	8005b9c <HAL_UART_Receive+0x80>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d105      	bne.n	8005b92 <HAL_UART_Receive+0x76>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005b8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b90:	e02d      	b.n	8005bee <HAL_UART_Receive+0xd2>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	22ff      	movs	r2, #255	; 0xff
 8005b96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b9a:	e028      	b.n	8005bee <HAL_UART_Receive+0xd2>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10d      	bne.n	8005bc0 <HAL_UART_Receive+0xa4>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d104      	bne.n	8005bb6 <HAL_UART_Receive+0x9a>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	22ff      	movs	r2, #255	; 0xff
 8005bb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bb4:	e01b      	b.n	8005bee <HAL_UART_Receive+0xd2>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	227f      	movs	r2, #127	; 0x7f
 8005bba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bbe:	e016      	b.n	8005bee <HAL_UART_Receive+0xd2>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bc8:	d10d      	bne.n	8005be6 <HAL_UART_Receive+0xca>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d104      	bne.n	8005bdc <HAL_UART_Receive+0xc0>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	227f      	movs	r2, #127	; 0x7f
 8005bd6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bda:	e008      	b.n	8005bee <HAL_UART_Receive+0xd2>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	223f      	movs	r2, #63	; 0x3f
 8005be0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005be4:	e003      	b.n	8005bee <HAL_UART_Receive+0xd2>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005bf4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfe:	d108      	bne.n	8005c12 <HAL_UART_Receive+0xf6>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d104      	bne.n	8005c12 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	61bb      	str	r3, [r7, #24]
 8005c10:	e003      	b.n	8005c1a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005c1a:	e036      	b.n	8005c8a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2200      	movs	r2, #0
 8005c24:	2120      	movs	r1, #32
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f000 fb3a 	bl	80062a0 <UART_WaitOnFlagUntilTimeout>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d005      	beq.n	8005c3e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e032      	b.n	8005ca4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10c      	bne.n	8005c5e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	8a7b      	ldrh	r3, [r7, #18]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	3302      	adds	r3, #2
 8005c5a:	61bb      	str	r3, [r7, #24]
 8005c5c:	e00c      	b.n	8005c78 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	8a7b      	ldrh	r3, [r7, #18]
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	3301      	adds	r3, #1
 8005c76:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1c2      	bne.n	8005c1c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	e000      	b.n	8005ca4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8005ca2:	2302      	movs	r3, #2
  }
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3720      	adds	r7, #32
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cb0:	b094      	sub	sp, #80	; 0x50
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	4b83      	ldr	r3, [pc, #524]	; (8005ed0 <UART_SetConfig+0x224>)
 8005cc2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc6:	689a      	ldr	r2, [r3, #8]
 8005cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	497c      	ldr	r1, [pc, #496]	; (8005ed4 <UART_SetConfig+0x228>)
 8005ce4:	4019      	ands	r1, r3
 8005ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cec:	430b      	orrs	r3, r1
 8005cee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfc:	68d9      	ldr	r1, [r3, #12]
 8005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	ea40 0301 	orr.w	r3, r0, r1
 8005d06:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	4b6f      	ldr	r3, [pc, #444]	; (8005ed0 <UART_SetConfig+0x224>)
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d009      	beq.n	8005d2c <UART_SetConfig+0x80>
 8005d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	4b6e      	ldr	r3, [pc, #440]	; (8005ed8 <UART_SetConfig+0x22c>)
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d004      	beq.n	8005d2c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d24:	6a1a      	ldr	r2, [r3, #32]
 8005d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8005d36:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8005d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d40:	430b      	orrs	r3, r1
 8005d42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4a:	f023 000f 	bic.w	r0, r3, #15
 8005d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d50:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	ea40 0301 	orr.w	r3, r0, r1
 8005d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	4b5e      	ldr	r3, [pc, #376]	; (8005edc <UART_SetConfig+0x230>)
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d102      	bne.n	8005d6c <UART_SetConfig+0xc0>
 8005d66:	2301      	movs	r3, #1
 8005d68:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d6a:	e032      	b.n	8005dd2 <UART_SetConfig+0x126>
 8005d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	4b5b      	ldr	r3, [pc, #364]	; (8005ee0 <UART_SetConfig+0x234>)
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d102      	bne.n	8005d7c <UART_SetConfig+0xd0>
 8005d76:	2302      	movs	r3, #2
 8005d78:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d7a:	e02a      	b.n	8005dd2 <UART_SetConfig+0x126>
 8005d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	4b58      	ldr	r3, [pc, #352]	; (8005ee4 <UART_SetConfig+0x238>)
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d102      	bne.n	8005d8c <UART_SetConfig+0xe0>
 8005d86:	2304      	movs	r3, #4
 8005d88:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d8a:	e022      	b.n	8005dd2 <UART_SetConfig+0x126>
 8005d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	4b55      	ldr	r3, [pc, #340]	; (8005ee8 <UART_SetConfig+0x23c>)
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d102      	bne.n	8005d9c <UART_SetConfig+0xf0>
 8005d96:	2308      	movs	r3, #8
 8005d98:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d9a:	e01a      	b.n	8005dd2 <UART_SetConfig+0x126>
 8005d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	4b52      	ldr	r3, [pc, #328]	; (8005eec <UART_SetConfig+0x240>)
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d102      	bne.n	8005dac <UART_SetConfig+0x100>
 8005da6:	2310      	movs	r3, #16
 8005da8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005daa:	e012      	b.n	8005dd2 <UART_SetConfig+0x126>
 8005dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	4b4f      	ldr	r3, [pc, #316]	; (8005ef0 <UART_SetConfig+0x244>)
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d103      	bne.n	8005dbe <UART_SetConfig+0x112>
 8005db6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005dba:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dbc:	e009      	b.n	8005dd2 <UART_SetConfig+0x126>
 8005dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4b43      	ldr	r3, [pc, #268]	; (8005ed0 <UART_SetConfig+0x224>)
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d102      	bne.n	8005dce <UART_SetConfig+0x122>
 8005dc8:	2320      	movs	r3, #32
 8005dca:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dcc:	e001      	b.n	8005dd2 <UART_SetConfig+0x126>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	4b3e      	ldr	r3, [pc, #248]	; (8005ed0 <UART_SetConfig+0x224>)
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d005      	beq.n	8005de8 <UART_SetConfig+0x13c>
 8005ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	4b3d      	ldr	r3, [pc, #244]	; (8005ed8 <UART_SetConfig+0x22c>)
 8005de2:	429a      	cmp	r2, r3
 8005de4:	f040 8088 	bne.w	8005ef8 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dea:	2200      	movs	r2, #0
 8005dec:	623b      	str	r3, [r7, #32]
 8005dee:	627a      	str	r2, [r7, #36]	; 0x24
 8005df0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005df4:	f7fe f924 	bl	8004040 <HAL_RCCEx_GetPeriphCLKFreq>
 8005df8:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8005dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 80eb 	beq.w	8005fd8 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	4a3b      	ldr	r2, [pc, #236]	; (8005ef4 <UART_SetConfig+0x248>)
 8005e08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e10:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e14:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	4413      	add	r3, r2
 8005e20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d305      	bcc.n	8005e32 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d903      	bls.n	8005e3a <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005e38:	e048      	b.n	8005ecc <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	61bb      	str	r3, [r7, #24]
 8005e40:	61fa      	str	r2, [r7, #28]
 8005e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	4a2b      	ldr	r2, [pc, #172]	; (8005ef4 <UART_SetConfig+0x248>)
 8005e48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	2200      	movs	r2, #0
 8005e50:	613b      	str	r3, [r7, #16]
 8005e52:	617a      	str	r2, [r7, #20]
 8005e54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005e58:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005e5c:	f7fa fa20 	bl	80002a0 <__aeabi_uldivmod>
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	4610      	mov	r0, r2
 8005e66:	4619      	mov	r1, r3
 8005e68:	f04f 0200 	mov.w	r2, #0
 8005e6c:	f04f 0300 	mov.w	r3, #0
 8005e70:	020b      	lsls	r3, r1, #8
 8005e72:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e76:	0202      	lsls	r2, r0, #8
 8005e78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e7a:	6849      	ldr	r1, [r1, #4]
 8005e7c:	0849      	lsrs	r1, r1, #1
 8005e7e:	2000      	movs	r0, #0
 8005e80:	460c      	mov	r4, r1
 8005e82:	4605      	mov	r5, r0
 8005e84:	eb12 0804 	adds.w	r8, r2, r4
 8005e88:	eb43 0905 	adc.w	r9, r3, r5
 8005e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	60bb      	str	r3, [r7, #8]
 8005e94:	60fa      	str	r2, [r7, #12]
 8005e96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e9a:	4640      	mov	r0, r8
 8005e9c:	4649      	mov	r1, r9
 8005e9e:	f7fa f9ff 	bl	80002a0 <__aeabi_uldivmod>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eb0:	d308      	bcc.n	8005ec4 <UART_SetConfig+0x218>
 8005eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eb8:	d204      	bcs.n	8005ec4 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8005eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ec0:	60da      	str	r2, [r3, #12]
 8005ec2:	e003      	b.n	8005ecc <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8005eca:	e085      	b.n	8005fd8 <UART_SetConfig+0x32c>
 8005ecc:	e084      	b.n	8005fd8 <UART_SetConfig+0x32c>
 8005ece:	bf00      	nop
 8005ed0:	46002400 	.word	0x46002400
 8005ed4:	cfff69f3 	.word	0xcfff69f3
 8005ed8:	56002400 	.word	0x56002400
 8005edc:	40013800 	.word	0x40013800
 8005ee0:	40004400 	.word	0x40004400
 8005ee4:	40004800 	.word	0x40004800
 8005ee8:	40004c00 	.word	0x40004c00
 8005eec:	40005000 	.word	0x40005000
 8005ef0:	40006400 	.word	0x40006400
 8005ef4:	08007af8 	.word	0x08007af8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efa:	69db      	ldr	r3, [r3, #28]
 8005efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f00:	d13c      	bne.n	8005f7c <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f04:	2200      	movs	r2, #0
 8005f06:	603b      	str	r3, [r7, #0]
 8005f08:	607a      	str	r2, [r7, #4]
 8005f0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f0e:	f7fe f897 	bl	8004040 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f12:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d05e      	beq.n	8005fd8 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	4a39      	ldr	r2, [pc, #228]	; (8006004 <UART_SetConfig+0x358>)
 8005f20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f24:	461a      	mov	r2, r3
 8005f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f28:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f2c:	005a      	lsls	r2, r3, #1
 8005f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	085b      	lsrs	r3, r3, #1
 8005f34:	441a      	add	r2, r3
 8005f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f42:	2b0f      	cmp	r3, #15
 8005f44:	d916      	bls.n	8005f74 <UART_SetConfig+0x2c8>
 8005f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f4c:	d212      	bcs.n	8005f74 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	f023 030f 	bic.w	r3, r3, #15
 8005f56:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f5a:	085b      	lsrs	r3, r3, #1
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005f66:	4313      	orrs	r3, r2
 8005f68:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8005f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8005f70:	60da      	str	r2, [r3, #12]
 8005f72:	e031      	b.n	8005fd8 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005f7a:	e02d      	b.n	8005fd8 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f7e:	2200      	movs	r2, #0
 8005f80:	469a      	mov	sl, r3
 8005f82:	4693      	mov	fp, r2
 8005f84:	4650      	mov	r0, sl
 8005f86:	4659      	mov	r1, fp
 8005f88:	f7fe f85a 	bl	8004040 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f8c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8005f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d021      	beq.n	8005fd8 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	4a1a      	ldr	r2, [pc, #104]	; (8006004 <UART_SetConfig+0x358>)
 8005f9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	085b      	lsrs	r3, r3, #1
 8005fac:	441a      	add	r2, r3
 8005fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fba:	2b0f      	cmp	r3, #15
 8005fbc:	d909      	bls.n	8005fd2 <UART_SetConfig+0x326>
 8005fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc4:	d205      	bcs.n	8005fd2 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	60da      	str	r2, [r3, #12]
 8005fd0:	e002      	b.n	8005fd8 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fea:	2200      	movs	r2, #0
 8005fec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005ff4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3750      	adds	r7, #80	; 0x50
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006002:	bf00      	nop
 8006004:	08007af8 	.word	0x08007af8

08006008 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00a      	beq.n	8006076 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607a:	f003 0308 	and.w	r3, r3, #8
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00a      	beq.n	8006098 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609c:	f003 0310 	and.w	r3, r3, #16
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00a      	beq.n	80060ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060be:	f003 0320 	and.w	r3, r3, #32
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00a      	beq.n	80060dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	430a      	orrs	r2, r1
 80060da:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d01a      	beq.n	800611e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	430a      	orrs	r2, r1
 80060fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006106:	d10a      	bne.n	800611e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	430a      	orrs	r2, r1
 800611c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	605a      	str	r2, [r3, #4]
  }
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b098      	sub	sp, #96	; 0x60
 8006150:	af02      	add	r7, sp, #8
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800615c:	f7fa fe22 	bl	8000da4 <HAL_GetTick>
 8006160:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0308 	and.w	r3, r3, #8
 800616c:	2b08      	cmp	r3, #8
 800616e:	d12f      	bne.n	80061d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006178:	2200      	movs	r2, #0
 800617a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f88e 	bl	80062a0 <UART_WaitOnFlagUntilTimeout>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d022      	beq.n	80061d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006192:	e853 3f00 	ldrex	r3, [r3]
 8006196:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800619e:	653b      	str	r3, [r7, #80]	; 0x50
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	461a      	mov	r2, r3
 80061a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061a8:	647b      	str	r3, [r7, #68]	; 0x44
 80061aa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061b0:	e841 2300 	strex	r3, r2, [r1]
 80061b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1e6      	bne.n	800618a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2220      	movs	r2, #32
 80061c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e063      	b.n	8006298 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0304 	and.w	r3, r3, #4
 80061da:	2b04      	cmp	r3, #4
 80061dc:	d149      	bne.n	8006272 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061e6:	2200      	movs	r2, #0
 80061e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f857 	bl	80062a0 <UART_WaitOnFlagUntilTimeout>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d03c      	beq.n	8006272 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	e853 3f00 	ldrex	r3, [r3]
 8006204:	623b      	str	r3, [r7, #32]
   return(result);
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800620c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006216:	633b      	str	r3, [r7, #48]	; 0x30
 8006218:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800621c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800621e:	e841 2300 	strex	r3, r2, [r1]
 8006222:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1e6      	bne.n	80061f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	3308      	adds	r3, #8
 8006230:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	e853 3f00 	ldrex	r3, [r3]
 8006238:	60fb      	str	r3, [r7, #12]
   return(result);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f023 0301 	bic.w	r3, r3, #1
 8006240:	64bb      	str	r3, [r7, #72]	; 0x48
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3308      	adds	r3, #8
 8006248:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800624a:	61fa      	str	r2, [r7, #28]
 800624c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	69b9      	ldr	r1, [r7, #24]
 8006250:	69fa      	ldr	r2, [r7, #28]
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	617b      	str	r3, [r7, #20]
   return(result);
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e5      	bne.n	800622a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2220      	movs	r2, #32
 8006262:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e012      	b.n	8006298 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2220      	movs	r2, #32
 8006276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2220      	movs	r2, #32
 800627e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3758      	adds	r7, #88	; 0x58
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	603b      	str	r3, [r7, #0]
 80062ac:	4613      	mov	r3, r2
 80062ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062b0:	e049      	b.n	8006346 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b8:	d045      	beq.n	8006346 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ba:	f7fa fd73 	bl	8000da4 <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d302      	bcc.n	80062d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e048      	b.n	8006366 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0304 	and.w	r3, r3, #4
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d031      	beq.n	8006346 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	f003 0308 	and.w	r3, r3, #8
 80062ec:	2b08      	cmp	r3, #8
 80062ee:	d110      	bne.n	8006312 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2208      	movs	r2, #8
 80062f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 f838 	bl	800636e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2208      	movs	r2, #8
 8006302:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e029      	b.n	8006366 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800631c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006320:	d111      	bne.n	8006346 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800632a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 f81e 	bl	800636e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2220      	movs	r2, #32
 8006336:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e00f      	b.n	8006366 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69da      	ldr	r2, [r3, #28]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	4013      	ands	r3, r2
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	429a      	cmp	r2, r3
 8006354:	bf0c      	ite	eq
 8006356:	2301      	moveq	r3, #1
 8006358:	2300      	movne	r3, #0
 800635a:	b2db      	uxtb	r3, r3
 800635c:	461a      	mov	r2, r3
 800635e:	79fb      	ldrb	r3, [r7, #7]
 8006360:	429a      	cmp	r2, r3
 8006362:	d0a6      	beq.n	80062b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800636e:	b480      	push	{r7}
 8006370:	b095      	sub	sp, #84	; 0x54
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006386:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800638a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	461a      	mov	r2, r3
 8006392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006394:	643b      	str	r3, [r7, #64]	; 0x40
 8006396:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800639a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e6      	bne.n	8006376 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3308      	adds	r3, #8
 80063ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	e853 3f00 	ldrex	r3, [r3]
 80063b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063be:	f023 0301 	bic.w	r3, r3, #1
 80063c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3308      	adds	r3, #8
 80063ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063d4:	e841 2300 	strex	r3, r2, [r1]
 80063d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1e3      	bne.n	80063a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d118      	bne.n	800641a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	e853 3f00 	ldrex	r3, [r3]
 80063f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f023 0310 	bic.w	r3, r3, #16
 80063fc:	647b      	str	r3, [r7, #68]	; 0x44
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	461a      	mov	r2, r3
 8006404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006406:	61bb      	str	r3, [r7, #24]
 8006408:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640a:	6979      	ldr	r1, [r7, #20]
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	e841 2300 	strex	r3, r2, [r1]
 8006412:	613b      	str	r3, [r7, #16]
   return(result);
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1e6      	bne.n	80063e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2220      	movs	r2, #32
 800641e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800642e:	bf00      	nop
 8006430:	3754      	adds	r7, #84	; 0x54
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800643a:	b480      	push	{r7}
 800643c:	b085      	sub	sp, #20
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006448:	2b01      	cmp	r3, #1
 800644a:	d101      	bne.n	8006450 <HAL_UARTEx_DisableFifoMode+0x16>
 800644c:	2302      	movs	r3, #2
 800644e:	e027      	b.n	80064a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2224      	movs	r2, #36	; 0x24
 800645c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0201 	bic.w	r2, r2, #1
 8006476:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800647e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2220      	movs	r2, #32
 8006492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d101      	bne.n	80064c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064c0:	2302      	movs	r3, #2
 80064c2:	e02d      	b.n	8006520 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2224      	movs	r2, #36	; 0x24
 80064d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0201 	bic.w	r2, r2, #1
 80064ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f84f 	bl	80065a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2220      	movs	r2, #32
 8006512:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006538:	2b01      	cmp	r3, #1
 800653a:	d101      	bne.n	8006540 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800653c:	2302      	movs	r3, #2
 800653e:	e02d      	b.n	800659c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2224      	movs	r2, #36	; 0x24
 800654c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0201 	bic.w	r2, r2, #1
 8006566:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 f811 	bl	80065a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2220      	movs	r2, #32
 800658e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d108      	bne.n	80065c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065c4:	e031      	b.n	800662a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065c6:	2308      	movs	r3, #8
 80065c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065ca:	2308      	movs	r3, #8
 80065cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	0e5b      	lsrs	r3, r3, #25
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	f003 0307 	and.w	r3, r3, #7
 80065dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	0f5b      	lsrs	r3, r3, #29
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	f003 0307 	and.w	r3, r3, #7
 80065ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065ee:	7bbb      	ldrb	r3, [r7, #14]
 80065f0:	7b3a      	ldrb	r2, [r7, #12]
 80065f2:	4911      	ldr	r1, [pc, #68]	; (8006638 <UARTEx_SetNbDataToProcess+0x94>)
 80065f4:	5c8a      	ldrb	r2, [r1, r2]
 80065f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80065fa:	7b3a      	ldrb	r2, [r7, #12]
 80065fc:	490f      	ldr	r1, [pc, #60]	; (800663c <UARTEx_SetNbDataToProcess+0x98>)
 80065fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006600:	fb93 f3f2 	sdiv	r3, r3, r2
 8006604:	b29a      	uxth	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800660c:	7bfb      	ldrb	r3, [r7, #15]
 800660e:	7b7a      	ldrb	r2, [r7, #13]
 8006610:	4909      	ldr	r1, [pc, #36]	; (8006638 <UARTEx_SetNbDataToProcess+0x94>)
 8006612:	5c8a      	ldrb	r2, [r1, r2]
 8006614:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006618:	7b7a      	ldrb	r2, [r7, #13]
 800661a:	4908      	ldr	r1, [pc, #32]	; (800663c <UARTEx_SetNbDataToProcess+0x98>)
 800661c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800661e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006622:	b29a      	uxth	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800662a:	bf00      	nop
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	08007b10 	.word	0x08007b10
 800663c:	08007b18 	.word	0x08007b18

08006640 <__errno>:
 8006640:	4b01      	ldr	r3, [pc, #4]	; (8006648 <__errno+0x8>)
 8006642:	6818      	ldr	r0, [r3, #0]
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	2000000c 	.word	0x2000000c

0800664c <__libc_init_array>:
 800664c:	b570      	push	{r4, r5, r6, lr}
 800664e:	4d0d      	ldr	r5, [pc, #52]	; (8006684 <__libc_init_array+0x38>)
 8006650:	2600      	movs	r6, #0
 8006652:	4c0d      	ldr	r4, [pc, #52]	; (8006688 <__libc_init_array+0x3c>)
 8006654:	1b64      	subs	r4, r4, r5
 8006656:	10a4      	asrs	r4, r4, #2
 8006658:	42a6      	cmp	r6, r4
 800665a:	d109      	bne.n	8006670 <__libc_init_array+0x24>
 800665c:	4d0b      	ldr	r5, [pc, #44]	; (800668c <__libc_init_array+0x40>)
 800665e:	2600      	movs	r6, #0
 8006660:	4c0b      	ldr	r4, [pc, #44]	; (8006690 <__libc_init_array+0x44>)
 8006662:	f001 f983 	bl	800796c <_init>
 8006666:	1b64      	subs	r4, r4, r5
 8006668:	10a4      	asrs	r4, r4, #2
 800666a:	42a6      	cmp	r6, r4
 800666c:	d105      	bne.n	800667a <__libc_init_array+0x2e>
 800666e:	bd70      	pop	{r4, r5, r6, pc}
 8006670:	f855 3b04 	ldr.w	r3, [r5], #4
 8006674:	3601      	adds	r6, #1
 8006676:	4798      	blx	r3
 8006678:	e7ee      	b.n	8006658 <__libc_init_array+0xc>
 800667a:	f855 3b04 	ldr.w	r3, [r5], #4
 800667e:	3601      	adds	r6, #1
 8006680:	4798      	blx	r3
 8006682:	e7f2      	b.n	800666a <__libc_init_array+0x1e>
 8006684:	08007cd8 	.word	0x08007cd8
 8006688:	08007cd8 	.word	0x08007cd8
 800668c:	08007cd8 	.word	0x08007cd8
 8006690:	08007cdc 	.word	0x08007cdc

08006694 <memset>:
 8006694:	4402      	add	r2, r0
 8006696:	4603      	mov	r3, r0
 8006698:	4293      	cmp	r3, r2
 800669a:	d100      	bne.n	800669e <memset+0xa>
 800669c:	4770      	bx	lr
 800669e:	f803 1b01 	strb.w	r1, [r3], #1
 80066a2:	e7f9      	b.n	8006698 <memset+0x4>

080066a4 <sniprintf>:
 80066a4:	b40c      	push	{r2, r3}
 80066a6:	4b18      	ldr	r3, [pc, #96]	; (8006708 <sniprintf+0x64>)
 80066a8:	b530      	push	{r4, r5, lr}
 80066aa:	1e0c      	subs	r4, r1, #0
 80066ac:	b09d      	sub	sp, #116	; 0x74
 80066ae:	681d      	ldr	r5, [r3, #0]
 80066b0:	da08      	bge.n	80066c4 <sniprintf+0x20>
 80066b2:	238b      	movs	r3, #139	; 0x8b
 80066b4:	f04f 30ff 	mov.w	r0, #4294967295
 80066b8:	602b      	str	r3, [r5, #0]
 80066ba:	b01d      	add	sp, #116	; 0x74
 80066bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066c0:	b002      	add	sp, #8
 80066c2:	4770      	bx	lr
 80066c4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80066c8:	9002      	str	r0, [sp, #8]
 80066ca:	9006      	str	r0, [sp, #24]
 80066cc:	a902      	add	r1, sp, #8
 80066ce:	f8ad 3014 	strh.w	r3, [sp, #20]
 80066d2:	bf14      	ite	ne
 80066d4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80066d8:	4623      	moveq	r3, r4
 80066da:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80066dc:	4628      	mov	r0, r5
 80066de:	9304      	str	r3, [sp, #16]
 80066e0:	9307      	str	r3, [sp, #28]
 80066e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80066ea:	ab21      	add	r3, sp, #132	; 0x84
 80066ec:	9301      	str	r3, [sp, #4]
 80066ee:	f000 f8ad 	bl	800684c <_svfiprintf_r>
 80066f2:	1c43      	adds	r3, r0, #1
 80066f4:	bfbc      	itt	lt
 80066f6:	238b      	movlt	r3, #139	; 0x8b
 80066f8:	602b      	strlt	r3, [r5, #0]
 80066fa:	2c00      	cmp	r4, #0
 80066fc:	d0dd      	beq.n	80066ba <sniprintf+0x16>
 80066fe:	9b02      	ldr	r3, [sp, #8]
 8006700:	2200      	movs	r2, #0
 8006702:	701a      	strb	r2, [r3, #0]
 8006704:	e7d9      	b.n	80066ba <sniprintf+0x16>
 8006706:	bf00      	nop
 8006708:	2000000c 	.word	0x2000000c

0800670c <siscanf>:
 800670c:	b40e      	push	{r1, r2, r3}
 800670e:	b510      	push	{r4, lr}
 8006710:	b09f      	sub	sp, #124	; 0x7c
 8006712:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006716:	ac21      	add	r4, sp, #132	; 0x84
 8006718:	f8ad 101c 	strh.w	r1, [sp, #28]
 800671c:	9004      	str	r0, [sp, #16]
 800671e:	f854 2b04 	ldr.w	r2, [r4], #4
 8006722:	9008      	str	r0, [sp, #32]
 8006724:	9201      	str	r2, [sp, #4]
 8006726:	f7f9 fdb3 	bl	8000290 <strlen>
 800672a:	4b0c      	ldr	r3, [pc, #48]	; (800675c <siscanf+0x50>)
 800672c:	a904      	add	r1, sp, #16
 800672e:	9005      	str	r0, [sp, #20]
 8006730:	930d      	str	r3, [sp, #52]	; 0x34
 8006732:	2300      	movs	r3, #0
 8006734:	9009      	str	r0, [sp, #36]	; 0x24
 8006736:	9311      	str	r3, [sp, #68]	; 0x44
 8006738:	9316      	str	r3, [sp, #88]	; 0x58
 800673a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800673e:	4808      	ldr	r0, [pc, #32]	; (8006760 <siscanf+0x54>)
 8006740:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006744:	4623      	mov	r3, r4
 8006746:	9a01      	ldr	r2, [sp, #4]
 8006748:	6800      	ldr	r0, [r0, #0]
 800674a:	9403      	str	r4, [sp, #12]
 800674c:	f000 f9d8 	bl	8006b00 <__ssvfiscanf_r>
 8006750:	b01f      	add	sp, #124	; 0x7c
 8006752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006756:	b003      	add	sp, #12
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	08006765 	.word	0x08006765
 8006760:	2000000c 	.word	0x2000000c

08006764 <__seofread>:
 8006764:	2000      	movs	r0, #0
 8006766:	4770      	bx	lr

08006768 <strstr>:
 8006768:	780a      	ldrb	r2, [r1, #0]
 800676a:	b570      	push	{r4, r5, r6, lr}
 800676c:	b96a      	cbnz	r2, 800678a <strstr+0x22>
 800676e:	bd70      	pop	{r4, r5, r6, pc}
 8006770:	429a      	cmp	r2, r3
 8006772:	d109      	bne.n	8006788 <strstr+0x20>
 8006774:	460c      	mov	r4, r1
 8006776:	4605      	mov	r5, r0
 8006778:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0f6      	beq.n	800676e <strstr+0x6>
 8006780:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006784:	429e      	cmp	r6, r3
 8006786:	d0f7      	beq.n	8006778 <strstr+0x10>
 8006788:	3001      	adds	r0, #1
 800678a:	7803      	ldrb	r3, [r0, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1ef      	bne.n	8006770 <strstr+0x8>
 8006790:	4618      	mov	r0, r3
 8006792:	e7ec      	b.n	800676e <strstr+0x6>

08006794 <__ssputs_r>:
 8006794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006798:	688e      	ldr	r6, [r1, #8]
 800679a:	4682      	mov	sl, r0
 800679c:	460c      	mov	r4, r1
 800679e:	4690      	mov	r8, r2
 80067a0:	429e      	cmp	r6, r3
 80067a2:	461f      	mov	r7, r3
 80067a4:	d838      	bhi.n	8006818 <__ssputs_r+0x84>
 80067a6:	898a      	ldrh	r2, [r1, #12]
 80067a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067ac:	d032      	beq.n	8006814 <__ssputs_r+0x80>
 80067ae:	6825      	ldr	r5, [r4, #0]
 80067b0:	3301      	adds	r3, #1
 80067b2:	6909      	ldr	r1, [r1, #16]
 80067b4:	eba5 0901 	sub.w	r9, r5, r1
 80067b8:	6965      	ldr	r5, [r4, #20]
 80067ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067be:	444b      	add	r3, r9
 80067c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067c4:	106d      	asrs	r5, r5, #1
 80067c6:	429d      	cmp	r5, r3
 80067c8:	bf38      	it	cc
 80067ca:	461d      	movcc	r5, r3
 80067cc:	0553      	lsls	r3, r2, #21
 80067ce:	d531      	bpl.n	8006834 <__ssputs_r+0xa0>
 80067d0:	4629      	mov	r1, r5
 80067d2:	f001 f803 	bl	80077dc <_malloc_r>
 80067d6:	4606      	mov	r6, r0
 80067d8:	b950      	cbnz	r0, 80067f0 <__ssputs_r+0x5c>
 80067da:	230c      	movs	r3, #12
 80067dc:	f04f 30ff 	mov.w	r0, #4294967295
 80067e0:	f8ca 3000 	str.w	r3, [sl]
 80067e4:	89a3      	ldrh	r3, [r4, #12]
 80067e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067ea:	81a3      	strh	r3, [r4, #12]
 80067ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f0:	464a      	mov	r2, r9
 80067f2:	6921      	ldr	r1, [r4, #16]
 80067f4:	f000 ff5f 	bl	80076b6 <memcpy>
 80067f8:	89a3      	ldrh	r3, [r4, #12]
 80067fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006802:	81a3      	strh	r3, [r4, #12]
 8006804:	6126      	str	r6, [r4, #16]
 8006806:	444e      	add	r6, r9
 8006808:	6165      	str	r5, [r4, #20]
 800680a:	eba5 0509 	sub.w	r5, r5, r9
 800680e:	6026      	str	r6, [r4, #0]
 8006810:	463e      	mov	r6, r7
 8006812:	60a5      	str	r5, [r4, #8]
 8006814:	42be      	cmp	r6, r7
 8006816:	d900      	bls.n	800681a <__ssputs_r+0x86>
 8006818:	463e      	mov	r6, r7
 800681a:	4632      	mov	r2, r6
 800681c:	4641      	mov	r1, r8
 800681e:	6820      	ldr	r0, [r4, #0]
 8006820:	f000 ff56 	bl	80076d0 <memmove>
 8006824:	68a3      	ldr	r3, [r4, #8]
 8006826:	2000      	movs	r0, #0
 8006828:	1b9b      	subs	r3, r3, r6
 800682a:	60a3      	str	r3, [r4, #8]
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	4433      	add	r3, r6
 8006830:	6023      	str	r3, [r4, #0]
 8006832:	e7db      	b.n	80067ec <__ssputs_r+0x58>
 8006834:	462a      	mov	r2, r5
 8006836:	f001 f845 	bl	80078c4 <_realloc_r>
 800683a:	4606      	mov	r6, r0
 800683c:	2800      	cmp	r0, #0
 800683e:	d1e1      	bne.n	8006804 <__ssputs_r+0x70>
 8006840:	6921      	ldr	r1, [r4, #16]
 8006842:	4650      	mov	r0, sl
 8006844:	f000 ff5e 	bl	8007704 <_free_r>
 8006848:	e7c7      	b.n	80067da <__ssputs_r+0x46>
	...

0800684c <_svfiprintf_r>:
 800684c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006850:	4698      	mov	r8, r3
 8006852:	898b      	ldrh	r3, [r1, #12]
 8006854:	b09d      	sub	sp, #116	; 0x74
 8006856:	4607      	mov	r7, r0
 8006858:	061b      	lsls	r3, r3, #24
 800685a:	460d      	mov	r5, r1
 800685c:	4614      	mov	r4, r2
 800685e:	d50e      	bpl.n	800687e <_svfiprintf_r+0x32>
 8006860:	690b      	ldr	r3, [r1, #16]
 8006862:	b963      	cbnz	r3, 800687e <_svfiprintf_r+0x32>
 8006864:	2140      	movs	r1, #64	; 0x40
 8006866:	f000 ffb9 	bl	80077dc <_malloc_r>
 800686a:	6028      	str	r0, [r5, #0]
 800686c:	6128      	str	r0, [r5, #16]
 800686e:	b920      	cbnz	r0, 800687a <_svfiprintf_r+0x2e>
 8006870:	230c      	movs	r3, #12
 8006872:	603b      	str	r3, [r7, #0]
 8006874:	f04f 30ff 	mov.w	r0, #4294967295
 8006878:	e0d1      	b.n	8006a1e <_svfiprintf_r+0x1d2>
 800687a:	2340      	movs	r3, #64	; 0x40
 800687c:	616b      	str	r3, [r5, #20]
 800687e:	2300      	movs	r3, #0
 8006880:	f8cd 800c 	str.w	r8, [sp, #12]
 8006884:	f04f 0901 	mov.w	r9, #1
 8006888:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006a38 <_svfiprintf_r+0x1ec>
 800688c:	9309      	str	r3, [sp, #36]	; 0x24
 800688e:	2320      	movs	r3, #32
 8006890:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006894:	2330      	movs	r3, #48	; 0x30
 8006896:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800689a:	4623      	mov	r3, r4
 800689c:	469a      	mov	sl, r3
 800689e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068a2:	b10a      	cbz	r2, 80068a8 <_svfiprintf_r+0x5c>
 80068a4:	2a25      	cmp	r2, #37	; 0x25
 80068a6:	d1f9      	bne.n	800689c <_svfiprintf_r+0x50>
 80068a8:	ebba 0b04 	subs.w	fp, sl, r4
 80068ac:	d00b      	beq.n	80068c6 <_svfiprintf_r+0x7a>
 80068ae:	465b      	mov	r3, fp
 80068b0:	4622      	mov	r2, r4
 80068b2:	4629      	mov	r1, r5
 80068b4:	4638      	mov	r0, r7
 80068b6:	f7ff ff6d 	bl	8006794 <__ssputs_r>
 80068ba:	3001      	adds	r0, #1
 80068bc:	f000 80aa 	beq.w	8006a14 <_svfiprintf_r+0x1c8>
 80068c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068c2:	445a      	add	r2, fp
 80068c4:	9209      	str	r2, [sp, #36]	; 0x24
 80068c6:	f89a 3000 	ldrb.w	r3, [sl]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 80a2 	beq.w	8006a14 <_svfiprintf_r+0x1c8>
 80068d0:	2300      	movs	r3, #0
 80068d2:	f04f 32ff 	mov.w	r2, #4294967295
 80068d6:	f10a 0a01 	add.w	sl, sl, #1
 80068da:	9304      	str	r3, [sp, #16]
 80068dc:	9307      	str	r3, [sp, #28]
 80068de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068e2:	931a      	str	r3, [sp, #104]	; 0x68
 80068e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068e8:	4654      	mov	r4, sl
 80068ea:	2205      	movs	r2, #5
 80068ec:	4852      	ldr	r0, [pc, #328]	; (8006a38 <_svfiprintf_r+0x1ec>)
 80068ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068f2:	f000 fed2 	bl	800769a <memchr>
 80068f6:	9a04      	ldr	r2, [sp, #16]
 80068f8:	b9d8      	cbnz	r0, 8006932 <_svfiprintf_r+0xe6>
 80068fa:	06d0      	lsls	r0, r2, #27
 80068fc:	bf44      	itt	mi
 80068fe:	2320      	movmi	r3, #32
 8006900:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006904:	0711      	lsls	r1, r2, #28
 8006906:	bf44      	itt	mi
 8006908:	232b      	movmi	r3, #43	; 0x2b
 800690a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800690e:	f89a 3000 	ldrb.w	r3, [sl]
 8006912:	2b2a      	cmp	r3, #42	; 0x2a
 8006914:	d015      	beq.n	8006942 <_svfiprintf_r+0xf6>
 8006916:	9a07      	ldr	r2, [sp, #28]
 8006918:	4654      	mov	r4, sl
 800691a:	2000      	movs	r0, #0
 800691c:	f04f 0c0a 	mov.w	ip, #10
 8006920:	4621      	mov	r1, r4
 8006922:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006926:	3b30      	subs	r3, #48	; 0x30
 8006928:	2b09      	cmp	r3, #9
 800692a:	d94e      	bls.n	80069ca <_svfiprintf_r+0x17e>
 800692c:	b1b0      	cbz	r0, 800695c <_svfiprintf_r+0x110>
 800692e:	9207      	str	r2, [sp, #28]
 8006930:	e014      	b.n	800695c <_svfiprintf_r+0x110>
 8006932:	eba0 0308 	sub.w	r3, r0, r8
 8006936:	46a2      	mov	sl, r4
 8006938:	fa09 f303 	lsl.w	r3, r9, r3
 800693c:	4313      	orrs	r3, r2
 800693e:	9304      	str	r3, [sp, #16]
 8006940:	e7d2      	b.n	80068e8 <_svfiprintf_r+0x9c>
 8006942:	9b03      	ldr	r3, [sp, #12]
 8006944:	1d19      	adds	r1, r3, #4
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	9103      	str	r1, [sp, #12]
 800694c:	bfbb      	ittet	lt
 800694e:	425b      	neglt	r3, r3
 8006950:	f042 0202 	orrlt.w	r2, r2, #2
 8006954:	9307      	strge	r3, [sp, #28]
 8006956:	9307      	strlt	r3, [sp, #28]
 8006958:	bfb8      	it	lt
 800695a:	9204      	strlt	r2, [sp, #16]
 800695c:	7823      	ldrb	r3, [r4, #0]
 800695e:	2b2e      	cmp	r3, #46	; 0x2e
 8006960:	d10c      	bne.n	800697c <_svfiprintf_r+0x130>
 8006962:	7863      	ldrb	r3, [r4, #1]
 8006964:	2b2a      	cmp	r3, #42	; 0x2a
 8006966:	d135      	bne.n	80069d4 <_svfiprintf_r+0x188>
 8006968:	9b03      	ldr	r3, [sp, #12]
 800696a:	3402      	adds	r4, #2
 800696c:	1d1a      	adds	r2, r3, #4
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	9203      	str	r2, [sp, #12]
 8006974:	bfb8      	it	lt
 8006976:	f04f 33ff 	movlt.w	r3, #4294967295
 800697a:	9305      	str	r3, [sp, #20]
 800697c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a48 <_svfiprintf_r+0x1fc>
 8006980:	2203      	movs	r2, #3
 8006982:	7821      	ldrb	r1, [r4, #0]
 8006984:	4650      	mov	r0, sl
 8006986:	f000 fe88 	bl	800769a <memchr>
 800698a:	b140      	cbz	r0, 800699e <_svfiprintf_r+0x152>
 800698c:	2340      	movs	r3, #64	; 0x40
 800698e:	eba0 000a 	sub.w	r0, r0, sl
 8006992:	3401      	adds	r4, #1
 8006994:	fa03 f000 	lsl.w	r0, r3, r0
 8006998:	9b04      	ldr	r3, [sp, #16]
 800699a:	4303      	orrs	r3, r0
 800699c:	9304      	str	r3, [sp, #16]
 800699e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069a2:	2206      	movs	r2, #6
 80069a4:	4825      	ldr	r0, [pc, #148]	; (8006a3c <_svfiprintf_r+0x1f0>)
 80069a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069aa:	f000 fe76 	bl	800769a <memchr>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d038      	beq.n	8006a24 <_svfiprintf_r+0x1d8>
 80069b2:	4b23      	ldr	r3, [pc, #140]	; (8006a40 <_svfiprintf_r+0x1f4>)
 80069b4:	bb1b      	cbnz	r3, 80069fe <_svfiprintf_r+0x1b2>
 80069b6:	9b03      	ldr	r3, [sp, #12]
 80069b8:	3307      	adds	r3, #7
 80069ba:	f023 0307 	bic.w	r3, r3, #7
 80069be:	3308      	adds	r3, #8
 80069c0:	9303      	str	r3, [sp, #12]
 80069c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069c4:	4433      	add	r3, r6
 80069c6:	9309      	str	r3, [sp, #36]	; 0x24
 80069c8:	e767      	b.n	800689a <_svfiprintf_r+0x4e>
 80069ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80069ce:	460c      	mov	r4, r1
 80069d0:	2001      	movs	r0, #1
 80069d2:	e7a5      	b.n	8006920 <_svfiprintf_r+0xd4>
 80069d4:	2300      	movs	r3, #0
 80069d6:	3401      	adds	r4, #1
 80069d8:	f04f 0c0a 	mov.w	ip, #10
 80069dc:	4619      	mov	r1, r3
 80069de:	9305      	str	r3, [sp, #20]
 80069e0:	4620      	mov	r0, r4
 80069e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069e6:	3a30      	subs	r2, #48	; 0x30
 80069e8:	2a09      	cmp	r2, #9
 80069ea:	d903      	bls.n	80069f4 <_svfiprintf_r+0x1a8>
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0c5      	beq.n	800697c <_svfiprintf_r+0x130>
 80069f0:	9105      	str	r1, [sp, #20]
 80069f2:	e7c3      	b.n	800697c <_svfiprintf_r+0x130>
 80069f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80069f8:	4604      	mov	r4, r0
 80069fa:	2301      	movs	r3, #1
 80069fc:	e7f0      	b.n	80069e0 <_svfiprintf_r+0x194>
 80069fe:	ab03      	add	r3, sp, #12
 8006a00:	462a      	mov	r2, r5
 8006a02:	a904      	add	r1, sp, #16
 8006a04:	4638      	mov	r0, r7
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	4b0e      	ldr	r3, [pc, #56]	; (8006a44 <_svfiprintf_r+0x1f8>)
 8006a0a:	e000      	b.n	8006a0e <_svfiprintf_r+0x1c2>
 8006a0c:	bf00      	nop
 8006a0e:	1c42      	adds	r2, r0, #1
 8006a10:	4606      	mov	r6, r0
 8006a12:	d1d6      	bne.n	80069c2 <_svfiprintf_r+0x176>
 8006a14:	89ab      	ldrh	r3, [r5, #12]
 8006a16:	065b      	lsls	r3, r3, #25
 8006a18:	f53f af2c 	bmi.w	8006874 <_svfiprintf_r+0x28>
 8006a1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a1e:	b01d      	add	sp, #116	; 0x74
 8006a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a24:	ab03      	add	r3, sp, #12
 8006a26:	462a      	mov	r2, r5
 8006a28:	a904      	add	r1, sp, #16
 8006a2a:	4638      	mov	r0, r7
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <_svfiprintf_r+0x1f8>)
 8006a30:	f000 fa52 	bl	8006ed8 <_printf_i>
 8006a34:	e7eb      	b.n	8006a0e <_svfiprintf_r+0x1c2>
 8006a36:	bf00      	nop
 8006a38:	08007b20 	.word	0x08007b20
 8006a3c:	08007b2a 	.word	0x08007b2a
 8006a40:	00000000 	.word	0x00000000
 8006a44:	08006795 	.word	0x08006795
 8006a48:	08007b26 	.word	0x08007b26

08006a4c <_sungetc_r>:
 8006a4c:	b538      	push	{r3, r4, r5, lr}
 8006a4e:	1c4b      	adds	r3, r1, #1
 8006a50:	4614      	mov	r4, r2
 8006a52:	d103      	bne.n	8006a5c <_sungetc_r+0x10>
 8006a54:	f04f 35ff 	mov.w	r5, #4294967295
 8006a58:	4628      	mov	r0, r5
 8006a5a:	bd38      	pop	{r3, r4, r5, pc}
 8006a5c:	8993      	ldrh	r3, [r2, #12]
 8006a5e:	b2cd      	uxtb	r5, r1
 8006a60:	f023 0320 	bic.w	r3, r3, #32
 8006a64:	8193      	strh	r3, [r2, #12]
 8006a66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a68:	6852      	ldr	r2, [r2, #4]
 8006a6a:	b18b      	cbz	r3, 8006a90 <_sungetc_r+0x44>
 8006a6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	dd08      	ble.n	8006a84 <_sungetc_r+0x38>
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	1e5a      	subs	r2, r3, #1
 8006a76:	6022      	str	r2, [r4, #0]
 8006a78:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006a7c:	6863      	ldr	r3, [r4, #4]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	6063      	str	r3, [r4, #4]
 8006a82:	e7e9      	b.n	8006a58 <_sungetc_r+0xc>
 8006a84:	4621      	mov	r1, r4
 8006a86:	f000 fdcf 	bl	8007628 <__submore>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	d0f1      	beq.n	8006a72 <_sungetc_r+0x26>
 8006a8e:	e7e1      	b.n	8006a54 <_sungetc_r+0x8>
 8006a90:	6921      	ldr	r1, [r4, #16]
 8006a92:	6823      	ldr	r3, [r4, #0]
 8006a94:	b151      	cbz	r1, 8006aac <_sungetc_r+0x60>
 8006a96:	4299      	cmp	r1, r3
 8006a98:	d208      	bcs.n	8006aac <_sungetc_r+0x60>
 8006a9a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006a9e:	42a9      	cmp	r1, r5
 8006aa0:	d104      	bne.n	8006aac <_sungetc_r+0x60>
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	3201      	adds	r2, #1
 8006aa6:	6023      	str	r3, [r4, #0]
 8006aa8:	6062      	str	r2, [r4, #4]
 8006aaa:	e7d5      	b.n	8006a58 <_sungetc_r+0xc>
 8006aac:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006ab0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ab4:	6363      	str	r3, [r4, #52]	; 0x34
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	63a3      	str	r3, [r4, #56]	; 0x38
 8006aba:	4623      	mov	r3, r4
 8006abc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006ac0:	6023      	str	r3, [r4, #0]
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e7dc      	b.n	8006a80 <_sungetc_r+0x34>

08006ac6 <__ssrefill_r>:
 8006ac6:	b510      	push	{r4, lr}
 8006ac8:	460c      	mov	r4, r1
 8006aca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006acc:	b169      	cbz	r1, 8006aea <__ssrefill_r+0x24>
 8006ace:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ad2:	4299      	cmp	r1, r3
 8006ad4:	d001      	beq.n	8006ada <__ssrefill_r+0x14>
 8006ad6:	f000 fe15 	bl	8007704 <_free_r>
 8006ada:	2000      	movs	r0, #0
 8006adc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ade:	6360      	str	r0, [r4, #52]	; 0x34
 8006ae0:	6063      	str	r3, [r4, #4]
 8006ae2:	b113      	cbz	r3, 8006aea <__ssrefill_r+0x24>
 8006ae4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006ae6:	6023      	str	r3, [r4, #0]
 8006ae8:	bd10      	pop	{r4, pc}
 8006aea:	6923      	ldr	r3, [r4, #16]
 8006aec:	f04f 30ff 	mov.w	r0, #4294967295
 8006af0:	6023      	str	r3, [r4, #0]
 8006af2:	2300      	movs	r3, #0
 8006af4:	6063      	str	r3, [r4, #4]
 8006af6:	89a3      	ldrh	r3, [r4, #12]
 8006af8:	f043 0320 	orr.w	r3, r3, #32
 8006afc:	81a3      	strh	r3, [r4, #12]
 8006afe:	e7f3      	b.n	8006ae8 <__ssrefill_r+0x22>

08006b00 <__ssvfiscanf_r>:
 8006b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b04:	460c      	mov	r4, r1
 8006b06:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	4606      	mov	r6, r0
 8006b0e:	f10d 0804 	add.w	r8, sp, #4
 8006b12:	4fa8      	ldr	r7, [pc, #672]	; (8006db4 <__ssvfiscanf_r+0x2b4>)
 8006b14:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8006dc0 <__ssvfiscanf_r+0x2c0>
 8006b18:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006b22:	49a5      	ldr	r1, [pc, #660]	; (8006db8 <__ssvfiscanf_r+0x2b8>)
 8006b24:	91a0      	str	r1, [sp, #640]	; 0x280
 8006b26:	49a5      	ldr	r1, [pc, #660]	; (8006dbc <__ssvfiscanf_r+0x2bc>)
 8006b28:	91a1      	str	r1, [sp, #644]	; 0x284
 8006b2a:	7813      	ldrb	r3, [r2, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 815e 	beq.w	8006dee <__ssvfiscanf_r+0x2ee>
 8006b32:	5dd9      	ldrb	r1, [r3, r7]
 8006b34:	1c55      	adds	r5, r2, #1
 8006b36:	f011 0108 	ands.w	r1, r1, #8
 8006b3a:	d019      	beq.n	8006b70 <__ssvfiscanf_r+0x70>
 8006b3c:	6863      	ldr	r3, [r4, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	dd0f      	ble.n	8006b62 <__ssvfiscanf_r+0x62>
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	781a      	ldrb	r2, [r3, #0]
 8006b46:	5cba      	ldrb	r2, [r7, r2]
 8006b48:	0712      	lsls	r2, r2, #28
 8006b4a:	d401      	bmi.n	8006b50 <__ssvfiscanf_r+0x50>
 8006b4c:	462a      	mov	r2, r5
 8006b4e:	e7ec      	b.n	8006b2a <__ssvfiscanf_r+0x2a>
 8006b50:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006b52:	3301      	adds	r3, #1
 8006b54:	3201      	adds	r2, #1
 8006b56:	6023      	str	r3, [r4, #0]
 8006b58:	9245      	str	r2, [sp, #276]	; 0x114
 8006b5a:	6862      	ldr	r2, [r4, #4]
 8006b5c:	3a01      	subs	r2, #1
 8006b5e:	6062      	str	r2, [r4, #4]
 8006b60:	e7ec      	b.n	8006b3c <__ssvfiscanf_r+0x3c>
 8006b62:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006b64:	4621      	mov	r1, r4
 8006b66:	4630      	mov	r0, r6
 8006b68:	4798      	blx	r3
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	d0e9      	beq.n	8006b42 <__ssvfiscanf_r+0x42>
 8006b6e:	e7ed      	b.n	8006b4c <__ssvfiscanf_r+0x4c>
 8006b70:	2b25      	cmp	r3, #37	; 0x25
 8006b72:	d012      	beq.n	8006b9a <__ssvfiscanf_r+0x9a>
 8006b74:	469a      	mov	sl, r3
 8006b76:	6863      	ldr	r3, [r4, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f340 8094 	ble.w	8006ca6 <__ssvfiscanf_r+0x1a6>
 8006b7e:	6822      	ldr	r2, [r4, #0]
 8006b80:	7813      	ldrb	r3, [r2, #0]
 8006b82:	4553      	cmp	r3, sl
 8006b84:	f040 8133 	bne.w	8006dee <__ssvfiscanf_r+0x2ee>
 8006b88:	6863      	ldr	r3, [r4, #4]
 8006b8a:	3201      	adds	r2, #1
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	6022      	str	r2, [r4, #0]
 8006b90:	6063      	str	r3, [r4, #4]
 8006b92:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006b94:	3301      	adds	r3, #1
 8006b96:	9345      	str	r3, [sp, #276]	; 0x114
 8006b98:	e7d8      	b.n	8006b4c <__ssvfiscanf_r+0x4c>
 8006b9a:	9141      	str	r1, [sp, #260]	; 0x104
 8006b9c:	9143      	str	r1, [sp, #268]	; 0x10c
 8006b9e:	7853      	ldrb	r3, [r2, #1]
 8006ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ba2:	bf04      	itt	eq
 8006ba4:	2310      	moveq	r3, #16
 8006ba6:	1c95      	addeq	r5, r2, #2
 8006ba8:	f04f 020a 	mov.w	r2, #10
 8006bac:	bf08      	it	eq
 8006bae:	9341      	streq	r3, [sp, #260]	; 0x104
 8006bb0:	46aa      	mov	sl, r5
 8006bb2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006bb6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006bba:	2b09      	cmp	r3, #9
 8006bbc:	d91d      	bls.n	8006bfa <__ssvfiscanf_r+0xfa>
 8006bbe:	2203      	movs	r2, #3
 8006bc0:	487f      	ldr	r0, [pc, #508]	; (8006dc0 <__ssvfiscanf_r+0x2c0>)
 8006bc2:	f000 fd6a 	bl	800769a <memchr>
 8006bc6:	b140      	cbz	r0, 8006bda <__ssvfiscanf_r+0xda>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	eba0 0009 	sub.w	r0, r0, r9
 8006bce:	4655      	mov	r5, sl
 8006bd0:	fa03 f000 	lsl.w	r0, r3, r0
 8006bd4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006bd6:	4318      	orrs	r0, r3
 8006bd8:	9041      	str	r0, [sp, #260]	; 0x104
 8006bda:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006bde:	2b78      	cmp	r3, #120	; 0x78
 8006be0:	d806      	bhi.n	8006bf0 <__ssvfiscanf_r+0xf0>
 8006be2:	2b57      	cmp	r3, #87	; 0x57
 8006be4:	d810      	bhi.n	8006c08 <__ssvfiscanf_r+0x108>
 8006be6:	2b25      	cmp	r3, #37	; 0x25
 8006be8:	d0c4      	beq.n	8006b74 <__ssvfiscanf_r+0x74>
 8006bea:	d857      	bhi.n	8006c9c <__ssvfiscanf_r+0x19c>
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d065      	beq.n	8006cbc <__ssvfiscanf_r+0x1bc>
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	9347      	str	r3, [sp, #284]	; 0x11c
 8006bf4:	230a      	movs	r3, #10
 8006bf6:	9342      	str	r3, [sp, #264]	; 0x108
 8006bf8:	e072      	b.n	8006ce0 <__ssvfiscanf_r+0x1e0>
 8006bfa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006bfc:	4655      	mov	r5, sl
 8006bfe:	fb02 1103 	mla	r1, r2, r3, r1
 8006c02:	3930      	subs	r1, #48	; 0x30
 8006c04:	9143      	str	r1, [sp, #268]	; 0x10c
 8006c06:	e7d3      	b.n	8006bb0 <__ssvfiscanf_r+0xb0>
 8006c08:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006c0c:	2a20      	cmp	r2, #32
 8006c0e:	d8ef      	bhi.n	8006bf0 <__ssvfiscanf_r+0xf0>
 8006c10:	a101      	add	r1, pc, #4	; (adr r1, 8006c18 <__ssvfiscanf_r+0x118>)
 8006c12:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006c16:	bf00      	nop
 8006c18:	08006ccb 	.word	0x08006ccb
 8006c1c:	08006bf1 	.word	0x08006bf1
 8006c20:	08006bf1 	.word	0x08006bf1
 8006c24:	08006d29 	.word	0x08006d29
 8006c28:	08006bf1 	.word	0x08006bf1
 8006c2c:	08006bf1 	.word	0x08006bf1
 8006c30:	08006bf1 	.word	0x08006bf1
 8006c34:	08006bf1 	.word	0x08006bf1
 8006c38:	08006bf1 	.word	0x08006bf1
 8006c3c:	08006bf1 	.word	0x08006bf1
 8006c40:	08006bf1 	.word	0x08006bf1
 8006c44:	08006d3f 	.word	0x08006d3f
 8006c48:	08006d15 	.word	0x08006d15
 8006c4c:	08006ca3 	.word	0x08006ca3
 8006c50:	08006ca3 	.word	0x08006ca3
 8006c54:	08006ca3 	.word	0x08006ca3
 8006c58:	08006bf1 	.word	0x08006bf1
 8006c5c:	08006d19 	.word	0x08006d19
 8006c60:	08006bf1 	.word	0x08006bf1
 8006c64:	08006bf1 	.word	0x08006bf1
 8006c68:	08006bf1 	.word	0x08006bf1
 8006c6c:	08006bf1 	.word	0x08006bf1
 8006c70:	08006d4f 	.word	0x08006d4f
 8006c74:	08006d21 	.word	0x08006d21
 8006c78:	08006cc3 	.word	0x08006cc3
 8006c7c:	08006bf1 	.word	0x08006bf1
 8006c80:	08006bf1 	.word	0x08006bf1
 8006c84:	08006d4b 	.word	0x08006d4b
 8006c88:	08006bf1 	.word	0x08006bf1
 8006c8c:	08006d15 	.word	0x08006d15
 8006c90:	08006bf1 	.word	0x08006bf1
 8006c94:	08006bf1 	.word	0x08006bf1
 8006c98:	08006ccb 	.word	0x08006ccb
 8006c9c:	3b45      	subs	r3, #69	; 0x45
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d8a6      	bhi.n	8006bf0 <__ssvfiscanf_r+0xf0>
 8006ca2:	2305      	movs	r3, #5
 8006ca4:	e01b      	b.n	8006cde <__ssvfiscanf_r+0x1de>
 8006ca6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006ca8:	4621      	mov	r1, r4
 8006caa:	4630      	mov	r0, r6
 8006cac:	4798      	blx	r3
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	f43f af65 	beq.w	8006b7e <__ssvfiscanf_r+0x7e>
 8006cb4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	f040 808f 	bne.w	8006dda <__ssvfiscanf_r+0x2da>
 8006cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc0:	e091      	b.n	8006de6 <__ssvfiscanf_r+0x2e6>
 8006cc2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006cc4:	f042 0220 	orr.w	r2, r2, #32
 8006cc8:	9241      	str	r2, [sp, #260]	; 0x104
 8006cca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cd0:	9241      	str	r2, [sp, #260]	; 0x104
 8006cd2:	2210      	movs	r2, #16
 8006cd4:	2b6f      	cmp	r3, #111	; 0x6f
 8006cd6:	9242      	str	r2, [sp, #264]	; 0x108
 8006cd8:	bf34      	ite	cc
 8006cda:	2303      	movcc	r3, #3
 8006cdc:	2304      	movcs	r3, #4
 8006cde:	9347      	str	r3, [sp, #284]	; 0x11c
 8006ce0:	6863      	ldr	r3, [r4, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	dd43      	ble.n	8006d6e <__ssvfiscanf_r+0x26e>
 8006ce6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006ce8:	0659      	lsls	r1, r3, #25
 8006cea:	d404      	bmi.n	8006cf6 <__ssvfiscanf_r+0x1f6>
 8006cec:	6823      	ldr	r3, [r4, #0]
 8006cee:	781a      	ldrb	r2, [r3, #0]
 8006cf0:	5cba      	ldrb	r2, [r7, r2]
 8006cf2:	0712      	lsls	r2, r2, #28
 8006cf4:	d442      	bmi.n	8006d7c <__ssvfiscanf_r+0x27c>
 8006cf6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	dc51      	bgt.n	8006da0 <__ssvfiscanf_r+0x2a0>
 8006cfc:	466b      	mov	r3, sp
 8006cfe:	4622      	mov	r2, r4
 8006d00:	a941      	add	r1, sp, #260	; 0x104
 8006d02:	4630      	mov	r0, r6
 8006d04:	f000 fa0e 	bl	8007124 <_scanf_chars>
 8006d08:	2801      	cmp	r0, #1
 8006d0a:	d070      	beq.n	8006dee <__ssvfiscanf_r+0x2ee>
 8006d0c:	2802      	cmp	r0, #2
 8006d0e:	f47f af1d 	bne.w	8006b4c <__ssvfiscanf_r+0x4c>
 8006d12:	e7cf      	b.n	8006cb4 <__ssvfiscanf_r+0x1b4>
 8006d14:	220a      	movs	r2, #10
 8006d16:	e7dd      	b.n	8006cd4 <__ssvfiscanf_r+0x1d4>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	9342      	str	r3, [sp, #264]	; 0x108
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e7de      	b.n	8006cde <__ssvfiscanf_r+0x1de>
 8006d20:	2308      	movs	r3, #8
 8006d22:	9342      	str	r3, [sp, #264]	; 0x108
 8006d24:	2304      	movs	r3, #4
 8006d26:	e7da      	b.n	8006cde <__ssvfiscanf_r+0x1de>
 8006d28:	4629      	mov	r1, r5
 8006d2a:	4640      	mov	r0, r8
 8006d2c:	f000 fb4c 	bl	80073c8 <__sccl>
 8006d30:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006d32:	4605      	mov	r5, r0
 8006d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d38:	9341      	str	r3, [sp, #260]	; 0x104
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e7cf      	b.n	8006cde <__ssvfiscanf_r+0x1de>
 8006d3e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d44:	9341      	str	r3, [sp, #260]	; 0x104
 8006d46:	2300      	movs	r3, #0
 8006d48:	e7c9      	b.n	8006cde <__ssvfiscanf_r+0x1de>
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	e7c7      	b.n	8006cde <__ssvfiscanf_r+0x1de>
 8006d4e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006d50:	06c3      	lsls	r3, r0, #27
 8006d52:	f53f aefb 	bmi.w	8006b4c <__ssvfiscanf_r+0x4c>
 8006d56:	9b00      	ldr	r3, [sp, #0]
 8006d58:	f010 0f01 	tst.w	r0, #1
 8006d5c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006d5e:	f103 0104 	add.w	r1, r3, #4
 8006d62:	9100      	str	r1, [sp, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	bf14      	ite	ne
 8006d68:	801a      	strhne	r2, [r3, #0]
 8006d6a:	601a      	streq	r2, [r3, #0]
 8006d6c:	e6ee      	b.n	8006b4c <__ssvfiscanf_r+0x4c>
 8006d6e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006d70:	4621      	mov	r1, r4
 8006d72:	4630      	mov	r0, r6
 8006d74:	4798      	blx	r3
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d0b5      	beq.n	8006ce6 <__ssvfiscanf_r+0x1e6>
 8006d7a:	e79b      	b.n	8006cb4 <__ssvfiscanf_r+0x1b4>
 8006d7c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006d7e:	3201      	adds	r2, #1
 8006d80:	9245      	str	r2, [sp, #276]	; 0x114
 8006d82:	6862      	ldr	r2, [r4, #4]
 8006d84:	3a01      	subs	r2, #1
 8006d86:	2a00      	cmp	r2, #0
 8006d88:	6062      	str	r2, [r4, #4]
 8006d8a:	dd02      	ble.n	8006d92 <__ssvfiscanf_r+0x292>
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	6023      	str	r3, [r4, #0]
 8006d90:	e7ac      	b.n	8006cec <__ssvfiscanf_r+0x1ec>
 8006d92:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006d94:	4621      	mov	r1, r4
 8006d96:	4630      	mov	r0, r6
 8006d98:	4798      	blx	r3
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	d0a6      	beq.n	8006cec <__ssvfiscanf_r+0x1ec>
 8006d9e:	e789      	b.n	8006cb4 <__ssvfiscanf_r+0x1b4>
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	dc0f      	bgt.n	8006dc4 <__ssvfiscanf_r+0x2c4>
 8006da4:	466b      	mov	r3, sp
 8006da6:	4622      	mov	r2, r4
 8006da8:	a941      	add	r1, sp, #260	; 0x104
 8006daa:	4630      	mov	r0, r6
 8006dac:	f000 fa14 	bl	80071d8 <_scanf_i>
 8006db0:	e7aa      	b.n	8006d08 <__ssvfiscanf_r+0x208>
 8006db2:	bf00      	nop
 8006db4:	08007b6f 	.word	0x08007b6f
 8006db8:	08006a4d 	.word	0x08006a4d
 8006dbc:	08006ac7 	.word	0x08006ac7
 8006dc0:	08007b26 	.word	0x08007b26
 8006dc4:	4b0b      	ldr	r3, [pc, #44]	; (8006df4 <__ssvfiscanf_r+0x2f4>)
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f43f aec0 	beq.w	8006b4c <__ssvfiscanf_r+0x4c>
 8006dcc:	466b      	mov	r3, sp
 8006dce:	4622      	mov	r2, r4
 8006dd0:	a941      	add	r1, sp, #260	; 0x104
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	e000      	b.n	8006dd8 <__ssvfiscanf_r+0x2d8>
 8006dd6:	bf00      	nop
 8006dd8:	e796      	b.n	8006d08 <__ssvfiscanf_r+0x208>
 8006dda:	89a3      	ldrh	r3, [r4, #12]
 8006ddc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006de0:	bf18      	it	ne
 8006de2:	f04f 30ff 	movne.w	r0, #4294967295
 8006de6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8006dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dee:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006df0:	e7f9      	b.n	8006de6 <__ssvfiscanf_r+0x2e6>
 8006df2:	bf00      	nop
 8006df4:	00000000 	.word	0x00000000

08006df8 <_printf_common>:
 8006df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dfc:	4616      	mov	r6, r2
 8006dfe:	4699      	mov	r9, r3
 8006e00:	688a      	ldr	r2, [r1, #8]
 8006e02:	4607      	mov	r7, r0
 8006e04:	690b      	ldr	r3, [r1, #16]
 8006e06:	460c      	mov	r4, r1
 8006e08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	bfb8      	it	lt
 8006e10:	4613      	movlt	r3, r2
 8006e12:	6033      	str	r3, [r6, #0]
 8006e14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e18:	b10a      	cbz	r2, 8006e1e <_printf_common+0x26>
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	6033      	str	r3, [r6, #0]
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	0699      	lsls	r1, r3, #26
 8006e22:	bf42      	ittt	mi
 8006e24:	6833      	ldrmi	r3, [r6, #0]
 8006e26:	3302      	addmi	r3, #2
 8006e28:	6033      	strmi	r3, [r6, #0]
 8006e2a:	6825      	ldr	r5, [r4, #0]
 8006e2c:	f015 0506 	ands.w	r5, r5, #6
 8006e30:	d106      	bne.n	8006e40 <_printf_common+0x48>
 8006e32:	f104 0a19 	add.w	sl, r4, #25
 8006e36:	68e3      	ldr	r3, [r4, #12]
 8006e38:	6832      	ldr	r2, [r6, #0]
 8006e3a:	1a9b      	subs	r3, r3, r2
 8006e3c:	42ab      	cmp	r3, r5
 8006e3e:	dc29      	bgt.n	8006e94 <_printf_common+0x9c>
 8006e40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e44:	1e13      	subs	r3, r2, #0
 8006e46:	6822      	ldr	r2, [r4, #0]
 8006e48:	bf18      	it	ne
 8006e4a:	2301      	movne	r3, #1
 8006e4c:	0692      	lsls	r2, r2, #26
 8006e4e:	d42e      	bmi.n	8006eae <_printf_common+0xb6>
 8006e50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e54:	4649      	mov	r1, r9
 8006e56:	4638      	mov	r0, r7
 8006e58:	47c0      	blx	r8
 8006e5a:	3001      	adds	r0, #1
 8006e5c:	d021      	beq.n	8006ea2 <_printf_common+0xaa>
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	341a      	adds	r4, #26
 8006e62:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8006e66:	f003 0306 	and.w	r3, r3, #6
 8006e6a:	6832      	ldr	r2, [r6, #0]
 8006e6c:	2600      	movs	r6, #0
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006e74:	bf08      	it	eq
 8006e76:	1aad      	subeq	r5, r5, r2
 8006e78:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8006e7c:	bf14      	ite	ne
 8006e7e:	2500      	movne	r5, #0
 8006e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e84:	4293      	cmp	r3, r2
 8006e86:	bfc4      	itt	gt
 8006e88:	1a9b      	subgt	r3, r3, r2
 8006e8a:	18ed      	addgt	r5, r5, r3
 8006e8c:	42b5      	cmp	r5, r6
 8006e8e:	d11a      	bne.n	8006ec6 <_printf_common+0xce>
 8006e90:	2000      	movs	r0, #0
 8006e92:	e008      	b.n	8006ea6 <_printf_common+0xae>
 8006e94:	2301      	movs	r3, #1
 8006e96:	4652      	mov	r2, sl
 8006e98:	4649      	mov	r1, r9
 8006e9a:	4638      	mov	r0, r7
 8006e9c:	47c0      	blx	r8
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	d103      	bne.n	8006eaa <_printf_common+0xb2>
 8006ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eaa:	3501      	adds	r5, #1
 8006eac:	e7c3      	b.n	8006e36 <_printf_common+0x3e>
 8006eae:	18e1      	adds	r1, r4, r3
 8006eb0:	1c5a      	adds	r2, r3, #1
 8006eb2:	2030      	movs	r0, #48	; 0x30
 8006eb4:	3302      	adds	r3, #2
 8006eb6:	4422      	add	r2, r4
 8006eb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ebc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ec0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ec4:	e7c4      	b.n	8006e50 <_printf_common+0x58>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	4622      	mov	r2, r4
 8006eca:	4649      	mov	r1, r9
 8006ecc:	4638      	mov	r0, r7
 8006ece:	47c0      	blx	r8
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	d0e6      	beq.n	8006ea2 <_printf_common+0xaa>
 8006ed4:	3601      	adds	r6, #1
 8006ed6:	e7d9      	b.n	8006e8c <_printf_common+0x94>

08006ed8 <_printf_i>:
 8006ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006edc:	7e0f      	ldrb	r7, [r1, #24]
 8006ede:	4691      	mov	r9, r2
 8006ee0:	4680      	mov	r8, r0
 8006ee2:	460c      	mov	r4, r1
 8006ee4:	2f78      	cmp	r7, #120	; 0x78
 8006ee6:	469a      	mov	sl, r3
 8006ee8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006eea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006eee:	d807      	bhi.n	8006f00 <_printf_i+0x28>
 8006ef0:	2f62      	cmp	r7, #98	; 0x62
 8006ef2:	d80a      	bhi.n	8006f0a <_printf_i+0x32>
 8006ef4:	2f00      	cmp	r7, #0
 8006ef6:	f000 80d8 	beq.w	80070aa <_printf_i+0x1d2>
 8006efa:	2f58      	cmp	r7, #88	; 0x58
 8006efc:	f000 80a3 	beq.w	8007046 <_printf_i+0x16e>
 8006f00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f08:	e03a      	b.n	8006f80 <_printf_i+0xa8>
 8006f0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f0e:	2b15      	cmp	r3, #21
 8006f10:	d8f6      	bhi.n	8006f00 <_printf_i+0x28>
 8006f12:	a101      	add	r1, pc, #4	; (adr r1, 8006f18 <_printf_i+0x40>)
 8006f14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f18:	08006f71 	.word	0x08006f71
 8006f1c:	08006f85 	.word	0x08006f85
 8006f20:	08006f01 	.word	0x08006f01
 8006f24:	08006f01 	.word	0x08006f01
 8006f28:	08006f01 	.word	0x08006f01
 8006f2c:	08006f01 	.word	0x08006f01
 8006f30:	08006f85 	.word	0x08006f85
 8006f34:	08006f01 	.word	0x08006f01
 8006f38:	08006f01 	.word	0x08006f01
 8006f3c:	08006f01 	.word	0x08006f01
 8006f40:	08006f01 	.word	0x08006f01
 8006f44:	08007091 	.word	0x08007091
 8006f48:	08006fb5 	.word	0x08006fb5
 8006f4c:	08007073 	.word	0x08007073
 8006f50:	08006f01 	.word	0x08006f01
 8006f54:	08006f01 	.word	0x08006f01
 8006f58:	080070b3 	.word	0x080070b3
 8006f5c:	08006f01 	.word	0x08006f01
 8006f60:	08006fb5 	.word	0x08006fb5
 8006f64:	08006f01 	.word	0x08006f01
 8006f68:	08006f01 	.word	0x08006f01
 8006f6c:	0800707b 	.word	0x0800707b
 8006f70:	682b      	ldr	r3, [r5, #0]
 8006f72:	1d1a      	adds	r2, r3, #4
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	602a      	str	r2, [r5, #0]
 8006f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f80:	2301      	movs	r3, #1
 8006f82:	e0a3      	b.n	80070cc <_printf_i+0x1f4>
 8006f84:	6820      	ldr	r0, [r4, #0]
 8006f86:	6829      	ldr	r1, [r5, #0]
 8006f88:	0606      	lsls	r6, r0, #24
 8006f8a:	f101 0304 	add.w	r3, r1, #4
 8006f8e:	d50a      	bpl.n	8006fa6 <_printf_i+0xce>
 8006f90:	680e      	ldr	r6, [r1, #0]
 8006f92:	602b      	str	r3, [r5, #0]
 8006f94:	2e00      	cmp	r6, #0
 8006f96:	da03      	bge.n	8006fa0 <_printf_i+0xc8>
 8006f98:	232d      	movs	r3, #45	; 0x2d
 8006f9a:	4276      	negs	r6, r6
 8006f9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fa0:	485e      	ldr	r0, [pc, #376]	; (800711c <_printf_i+0x244>)
 8006fa2:	230a      	movs	r3, #10
 8006fa4:	e019      	b.n	8006fda <_printf_i+0x102>
 8006fa6:	680e      	ldr	r6, [r1, #0]
 8006fa8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fac:	602b      	str	r3, [r5, #0]
 8006fae:	bf18      	it	ne
 8006fb0:	b236      	sxthne	r6, r6
 8006fb2:	e7ef      	b.n	8006f94 <_printf_i+0xbc>
 8006fb4:	682b      	ldr	r3, [r5, #0]
 8006fb6:	6820      	ldr	r0, [r4, #0]
 8006fb8:	1d19      	adds	r1, r3, #4
 8006fba:	6029      	str	r1, [r5, #0]
 8006fbc:	0601      	lsls	r1, r0, #24
 8006fbe:	d501      	bpl.n	8006fc4 <_printf_i+0xec>
 8006fc0:	681e      	ldr	r6, [r3, #0]
 8006fc2:	e002      	b.n	8006fca <_printf_i+0xf2>
 8006fc4:	0646      	lsls	r6, r0, #25
 8006fc6:	d5fb      	bpl.n	8006fc0 <_printf_i+0xe8>
 8006fc8:	881e      	ldrh	r6, [r3, #0]
 8006fca:	2f6f      	cmp	r7, #111	; 0x6f
 8006fcc:	4853      	ldr	r0, [pc, #332]	; (800711c <_printf_i+0x244>)
 8006fce:	bf0c      	ite	eq
 8006fd0:	2308      	moveq	r3, #8
 8006fd2:	230a      	movne	r3, #10
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fda:	6865      	ldr	r5, [r4, #4]
 8006fdc:	2d00      	cmp	r5, #0
 8006fde:	60a5      	str	r5, [r4, #8]
 8006fe0:	bfa2      	ittt	ge
 8006fe2:	6821      	ldrge	r1, [r4, #0]
 8006fe4:	f021 0104 	bicge.w	r1, r1, #4
 8006fe8:	6021      	strge	r1, [r4, #0]
 8006fea:	b90e      	cbnz	r6, 8006ff0 <_printf_i+0x118>
 8006fec:	2d00      	cmp	r5, #0
 8006fee:	d04d      	beq.n	800708c <_printf_i+0x1b4>
 8006ff0:	4615      	mov	r5, r2
 8006ff2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ff6:	fb03 6711 	mls	r7, r3, r1, r6
 8006ffa:	5dc7      	ldrb	r7, [r0, r7]
 8006ffc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007000:	4637      	mov	r7, r6
 8007002:	460e      	mov	r6, r1
 8007004:	42bb      	cmp	r3, r7
 8007006:	d9f4      	bls.n	8006ff2 <_printf_i+0x11a>
 8007008:	2b08      	cmp	r3, #8
 800700a:	d10b      	bne.n	8007024 <_printf_i+0x14c>
 800700c:	6823      	ldr	r3, [r4, #0]
 800700e:	07de      	lsls	r6, r3, #31
 8007010:	d508      	bpl.n	8007024 <_printf_i+0x14c>
 8007012:	6923      	ldr	r3, [r4, #16]
 8007014:	6861      	ldr	r1, [r4, #4]
 8007016:	4299      	cmp	r1, r3
 8007018:	bfde      	ittt	le
 800701a:	2330      	movle	r3, #48	; 0x30
 800701c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007020:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007024:	1b52      	subs	r2, r2, r5
 8007026:	6122      	str	r2, [r4, #16]
 8007028:	464b      	mov	r3, r9
 800702a:	aa03      	add	r2, sp, #12
 800702c:	4621      	mov	r1, r4
 800702e:	4640      	mov	r0, r8
 8007030:	f8cd a000 	str.w	sl, [sp]
 8007034:	f7ff fee0 	bl	8006df8 <_printf_common>
 8007038:	3001      	adds	r0, #1
 800703a:	d14c      	bne.n	80070d6 <_printf_i+0x1fe>
 800703c:	f04f 30ff 	mov.w	r0, #4294967295
 8007040:	b004      	add	sp, #16
 8007042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007046:	4835      	ldr	r0, [pc, #212]	; (800711c <_printf_i+0x244>)
 8007048:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800704c:	6829      	ldr	r1, [r5, #0]
 800704e:	6823      	ldr	r3, [r4, #0]
 8007050:	f851 6b04 	ldr.w	r6, [r1], #4
 8007054:	6029      	str	r1, [r5, #0]
 8007056:	061d      	lsls	r5, r3, #24
 8007058:	d514      	bpl.n	8007084 <_printf_i+0x1ac>
 800705a:	07df      	lsls	r7, r3, #31
 800705c:	bf44      	itt	mi
 800705e:	f043 0320 	orrmi.w	r3, r3, #32
 8007062:	6023      	strmi	r3, [r4, #0]
 8007064:	b91e      	cbnz	r6, 800706e <_printf_i+0x196>
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	f023 0320 	bic.w	r3, r3, #32
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	2310      	movs	r3, #16
 8007070:	e7b0      	b.n	8006fd4 <_printf_i+0xfc>
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	f043 0320 	orr.w	r3, r3, #32
 8007078:	6023      	str	r3, [r4, #0]
 800707a:	2378      	movs	r3, #120	; 0x78
 800707c:	4828      	ldr	r0, [pc, #160]	; (8007120 <_printf_i+0x248>)
 800707e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007082:	e7e3      	b.n	800704c <_printf_i+0x174>
 8007084:	0659      	lsls	r1, r3, #25
 8007086:	bf48      	it	mi
 8007088:	b2b6      	uxthmi	r6, r6
 800708a:	e7e6      	b.n	800705a <_printf_i+0x182>
 800708c:	4615      	mov	r5, r2
 800708e:	e7bb      	b.n	8007008 <_printf_i+0x130>
 8007090:	682b      	ldr	r3, [r5, #0]
 8007092:	6826      	ldr	r6, [r4, #0]
 8007094:	1d18      	adds	r0, r3, #4
 8007096:	6961      	ldr	r1, [r4, #20]
 8007098:	6028      	str	r0, [r5, #0]
 800709a:	0635      	lsls	r5, r6, #24
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	d501      	bpl.n	80070a4 <_printf_i+0x1cc>
 80070a0:	6019      	str	r1, [r3, #0]
 80070a2:	e002      	b.n	80070aa <_printf_i+0x1d2>
 80070a4:	0670      	lsls	r0, r6, #25
 80070a6:	d5fb      	bpl.n	80070a0 <_printf_i+0x1c8>
 80070a8:	8019      	strh	r1, [r3, #0]
 80070aa:	2300      	movs	r3, #0
 80070ac:	4615      	mov	r5, r2
 80070ae:	6123      	str	r3, [r4, #16]
 80070b0:	e7ba      	b.n	8007028 <_printf_i+0x150>
 80070b2:	682b      	ldr	r3, [r5, #0]
 80070b4:	2100      	movs	r1, #0
 80070b6:	1d1a      	adds	r2, r3, #4
 80070b8:	602a      	str	r2, [r5, #0]
 80070ba:	681d      	ldr	r5, [r3, #0]
 80070bc:	6862      	ldr	r2, [r4, #4]
 80070be:	4628      	mov	r0, r5
 80070c0:	f000 faeb 	bl	800769a <memchr>
 80070c4:	b108      	cbz	r0, 80070ca <_printf_i+0x1f2>
 80070c6:	1b40      	subs	r0, r0, r5
 80070c8:	6060      	str	r0, [r4, #4]
 80070ca:	6863      	ldr	r3, [r4, #4]
 80070cc:	6123      	str	r3, [r4, #16]
 80070ce:	2300      	movs	r3, #0
 80070d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070d4:	e7a8      	b.n	8007028 <_printf_i+0x150>
 80070d6:	6923      	ldr	r3, [r4, #16]
 80070d8:	462a      	mov	r2, r5
 80070da:	4649      	mov	r1, r9
 80070dc:	4640      	mov	r0, r8
 80070de:	47d0      	blx	sl
 80070e0:	3001      	adds	r0, #1
 80070e2:	d0ab      	beq.n	800703c <_printf_i+0x164>
 80070e4:	6823      	ldr	r3, [r4, #0]
 80070e6:	079b      	lsls	r3, r3, #30
 80070e8:	d413      	bmi.n	8007112 <_printf_i+0x23a>
 80070ea:	68e0      	ldr	r0, [r4, #12]
 80070ec:	9b03      	ldr	r3, [sp, #12]
 80070ee:	4298      	cmp	r0, r3
 80070f0:	bfb8      	it	lt
 80070f2:	4618      	movlt	r0, r3
 80070f4:	e7a4      	b.n	8007040 <_printf_i+0x168>
 80070f6:	2301      	movs	r3, #1
 80070f8:	4632      	mov	r2, r6
 80070fa:	4649      	mov	r1, r9
 80070fc:	4640      	mov	r0, r8
 80070fe:	47d0      	blx	sl
 8007100:	3001      	adds	r0, #1
 8007102:	d09b      	beq.n	800703c <_printf_i+0x164>
 8007104:	3501      	adds	r5, #1
 8007106:	68e3      	ldr	r3, [r4, #12]
 8007108:	9903      	ldr	r1, [sp, #12]
 800710a:	1a5b      	subs	r3, r3, r1
 800710c:	42ab      	cmp	r3, r5
 800710e:	dcf2      	bgt.n	80070f6 <_printf_i+0x21e>
 8007110:	e7eb      	b.n	80070ea <_printf_i+0x212>
 8007112:	2500      	movs	r5, #0
 8007114:	f104 0619 	add.w	r6, r4, #25
 8007118:	e7f5      	b.n	8007106 <_printf_i+0x22e>
 800711a:	bf00      	nop
 800711c:	08007b31 	.word	0x08007b31
 8007120:	08007b42 	.word	0x08007b42

08007124 <_scanf_chars>:
 8007124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007128:	4615      	mov	r5, r2
 800712a:	688a      	ldr	r2, [r1, #8]
 800712c:	4680      	mov	r8, r0
 800712e:	460c      	mov	r4, r1
 8007130:	b932      	cbnz	r2, 8007140 <_scanf_chars+0x1c>
 8007132:	698a      	ldr	r2, [r1, #24]
 8007134:	2a00      	cmp	r2, #0
 8007136:	bf0c      	ite	eq
 8007138:	2201      	moveq	r2, #1
 800713a:	f04f 32ff 	movne.w	r2, #4294967295
 800713e:	608a      	str	r2, [r1, #8]
 8007140:	6822      	ldr	r2, [r4, #0]
 8007142:	2700      	movs	r7, #0
 8007144:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80071d4 <_scanf_chars+0xb0>
 8007148:	06d1      	lsls	r1, r2, #27
 800714a:	bf5f      	itttt	pl
 800714c:	681a      	ldrpl	r2, [r3, #0]
 800714e:	1d11      	addpl	r1, r2, #4
 8007150:	6019      	strpl	r1, [r3, #0]
 8007152:	6816      	ldrpl	r6, [r2, #0]
 8007154:	69a0      	ldr	r0, [r4, #24]
 8007156:	b188      	cbz	r0, 800717c <_scanf_chars+0x58>
 8007158:	2801      	cmp	r0, #1
 800715a:	d107      	bne.n	800716c <_scanf_chars+0x48>
 800715c:	682a      	ldr	r2, [r5, #0]
 800715e:	7811      	ldrb	r1, [r2, #0]
 8007160:	6962      	ldr	r2, [r4, #20]
 8007162:	5c52      	ldrb	r2, [r2, r1]
 8007164:	b952      	cbnz	r2, 800717c <_scanf_chars+0x58>
 8007166:	2f00      	cmp	r7, #0
 8007168:	d031      	beq.n	80071ce <_scanf_chars+0xaa>
 800716a:	e022      	b.n	80071b2 <_scanf_chars+0x8e>
 800716c:	2802      	cmp	r0, #2
 800716e:	d120      	bne.n	80071b2 <_scanf_chars+0x8e>
 8007170:	682b      	ldr	r3, [r5, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	f813 3009 	ldrb.w	r3, [r3, r9]
 8007178:	071b      	lsls	r3, r3, #28
 800717a:	d41a      	bmi.n	80071b2 <_scanf_chars+0x8e>
 800717c:	6823      	ldr	r3, [r4, #0]
 800717e:	3701      	adds	r7, #1
 8007180:	06da      	lsls	r2, r3, #27
 8007182:	bf5e      	ittt	pl
 8007184:	682b      	ldrpl	r3, [r5, #0]
 8007186:	781b      	ldrbpl	r3, [r3, #0]
 8007188:	f806 3b01 	strbpl.w	r3, [r6], #1
 800718c:	682a      	ldr	r2, [r5, #0]
 800718e:	686b      	ldr	r3, [r5, #4]
 8007190:	3201      	adds	r2, #1
 8007192:	3b01      	subs	r3, #1
 8007194:	602a      	str	r2, [r5, #0]
 8007196:	68a2      	ldr	r2, [r4, #8]
 8007198:	606b      	str	r3, [r5, #4]
 800719a:	3a01      	subs	r2, #1
 800719c:	60a2      	str	r2, [r4, #8]
 800719e:	b142      	cbz	r2, 80071b2 <_scanf_chars+0x8e>
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	dcd7      	bgt.n	8007154 <_scanf_chars+0x30>
 80071a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80071a8:	4629      	mov	r1, r5
 80071aa:	4640      	mov	r0, r8
 80071ac:	4798      	blx	r3
 80071ae:	2800      	cmp	r0, #0
 80071b0:	d0d0      	beq.n	8007154 <_scanf_chars+0x30>
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	f013 0310 	ands.w	r3, r3, #16
 80071b8:	d105      	bne.n	80071c6 <_scanf_chars+0xa2>
 80071ba:	68e2      	ldr	r2, [r4, #12]
 80071bc:	3201      	adds	r2, #1
 80071be:	60e2      	str	r2, [r4, #12]
 80071c0:	69a2      	ldr	r2, [r4, #24]
 80071c2:	b102      	cbz	r2, 80071c6 <_scanf_chars+0xa2>
 80071c4:	7033      	strb	r3, [r6, #0]
 80071c6:	6923      	ldr	r3, [r4, #16]
 80071c8:	2000      	movs	r0, #0
 80071ca:	443b      	add	r3, r7
 80071cc:	6123      	str	r3, [r4, #16]
 80071ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071d2:	bf00      	nop
 80071d4:	08007b6f 	.word	0x08007b6f

080071d8 <_scanf_i>:
 80071d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071dc:	4698      	mov	r8, r3
 80071de:	b087      	sub	sp, #28
 80071e0:	4b75      	ldr	r3, [pc, #468]	; (80073b8 <_scanf_i+0x1e0>)
 80071e2:	460c      	mov	r4, r1
 80071e4:	4682      	mov	sl, r0
 80071e6:	4616      	mov	r6, r2
 80071e8:	4627      	mov	r7, r4
 80071ea:	f04f 0b00 	mov.w	fp, #0
 80071ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80071f2:	ab03      	add	r3, sp, #12
 80071f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80071f8:	4b70      	ldr	r3, [pc, #448]	; (80073bc <_scanf_i+0x1e4>)
 80071fa:	69a1      	ldr	r1, [r4, #24]
 80071fc:	4a70      	ldr	r2, [pc, #448]	; (80073c0 <_scanf_i+0x1e8>)
 80071fe:	2903      	cmp	r1, #3
 8007200:	bf18      	it	ne
 8007202:	461a      	movne	r2, r3
 8007204:	68a3      	ldr	r3, [r4, #8]
 8007206:	9201      	str	r2, [sp, #4]
 8007208:	1e5a      	subs	r2, r3, #1
 800720a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800720e:	bf89      	itett	hi
 8007210:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007214:	f04f 0900 	movls.w	r9, #0
 8007218:	eb03 0905 	addhi.w	r9, r3, r5
 800721c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007220:	bf88      	it	hi
 8007222:	60a3      	strhi	r3, [r4, #8]
 8007224:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007228:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800722c:	463d      	mov	r5, r7
 800722e:	6023      	str	r3, [r4, #0]
 8007230:	6831      	ldr	r1, [r6, #0]
 8007232:	ab03      	add	r3, sp, #12
 8007234:	2202      	movs	r2, #2
 8007236:	7809      	ldrb	r1, [r1, #0]
 8007238:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800723c:	f000 fa2d 	bl	800769a <memchr>
 8007240:	b328      	cbz	r0, 800728e <_scanf_i+0xb6>
 8007242:	f1bb 0f01 	cmp.w	fp, #1
 8007246:	d159      	bne.n	80072fc <_scanf_i+0x124>
 8007248:	6862      	ldr	r2, [r4, #4]
 800724a:	b92a      	cbnz	r2, 8007258 <_scanf_i+0x80>
 800724c:	6822      	ldr	r2, [r4, #0]
 800724e:	2308      	movs	r3, #8
 8007250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007254:	6063      	str	r3, [r4, #4]
 8007256:	6022      	str	r2, [r4, #0]
 8007258:	6822      	ldr	r2, [r4, #0]
 800725a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800725e:	6022      	str	r2, [r4, #0]
 8007260:	68a2      	ldr	r2, [r4, #8]
 8007262:	1e51      	subs	r1, r2, #1
 8007264:	60a1      	str	r1, [r4, #8]
 8007266:	b192      	cbz	r2, 800728e <_scanf_i+0xb6>
 8007268:	6832      	ldr	r2, [r6, #0]
 800726a:	1c51      	adds	r1, r2, #1
 800726c:	6031      	str	r1, [r6, #0]
 800726e:	7812      	ldrb	r2, [r2, #0]
 8007270:	f805 2b01 	strb.w	r2, [r5], #1
 8007274:	6872      	ldr	r2, [r6, #4]
 8007276:	3a01      	subs	r2, #1
 8007278:	2a00      	cmp	r2, #0
 800727a:	6072      	str	r2, [r6, #4]
 800727c:	dc07      	bgt.n	800728e <_scanf_i+0xb6>
 800727e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007282:	4631      	mov	r1, r6
 8007284:	4650      	mov	r0, sl
 8007286:	4790      	blx	r2
 8007288:	2800      	cmp	r0, #0
 800728a:	f040 8085 	bne.w	8007398 <_scanf_i+0x1c0>
 800728e:	f10b 0b01 	add.w	fp, fp, #1
 8007292:	f1bb 0f03 	cmp.w	fp, #3
 8007296:	d1cb      	bne.n	8007230 <_scanf_i+0x58>
 8007298:	6863      	ldr	r3, [r4, #4]
 800729a:	b90b      	cbnz	r3, 80072a0 <_scanf_i+0xc8>
 800729c:	230a      	movs	r3, #10
 800729e:	6063      	str	r3, [r4, #4]
 80072a0:	6863      	ldr	r3, [r4, #4]
 80072a2:	f04f 0b00 	mov.w	fp, #0
 80072a6:	4947      	ldr	r1, [pc, #284]	; (80073c4 <_scanf_i+0x1ec>)
 80072a8:	6960      	ldr	r0, [r4, #20]
 80072aa:	1ac9      	subs	r1, r1, r3
 80072ac:	f000 f88c 	bl	80073c8 <__sccl>
 80072b0:	68a3      	ldr	r3, [r4, #8]
 80072b2:	6822      	ldr	r2, [r4, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d03d      	beq.n	8007334 <_scanf_i+0x15c>
 80072b8:	6831      	ldr	r1, [r6, #0]
 80072ba:	6960      	ldr	r0, [r4, #20]
 80072bc:	f891 c000 	ldrb.w	ip, [r1]
 80072c0:	f810 000c 	ldrb.w	r0, [r0, ip]
 80072c4:	2800      	cmp	r0, #0
 80072c6:	d035      	beq.n	8007334 <_scanf_i+0x15c>
 80072c8:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80072cc:	d124      	bne.n	8007318 <_scanf_i+0x140>
 80072ce:	0510      	lsls	r0, r2, #20
 80072d0:	d522      	bpl.n	8007318 <_scanf_i+0x140>
 80072d2:	f10b 0b01 	add.w	fp, fp, #1
 80072d6:	f1b9 0f00 	cmp.w	r9, #0
 80072da:	d003      	beq.n	80072e4 <_scanf_i+0x10c>
 80072dc:	3301      	adds	r3, #1
 80072de:	f109 39ff 	add.w	r9, r9, #4294967295
 80072e2:	60a3      	str	r3, [r4, #8]
 80072e4:	6873      	ldr	r3, [r6, #4]
 80072e6:	3b01      	subs	r3, #1
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	6073      	str	r3, [r6, #4]
 80072ec:	dd1b      	ble.n	8007326 <_scanf_i+0x14e>
 80072ee:	6833      	ldr	r3, [r6, #0]
 80072f0:	3301      	adds	r3, #1
 80072f2:	6033      	str	r3, [r6, #0]
 80072f4:	68a3      	ldr	r3, [r4, #8]
 80072f6:	3b01      	subs	r3, #1
 80072f8:	60a3      	str	r3, [r4, #8]
 80072fa:	e7d9      	b.n	80072b0 <_scanf_i+0xd8>
 80072fc:	f1bb 0f02 	cmp.w	fp, #2
 8007300:	d1ae      	bne.n	8007260 <_scanf_i+0x88>
 8007302:	6822      	ldr	r2, [r4, #0]
 8007304:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007308:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800730c:	d1bf      	bne.n	800728e <_scanf_i+0xb6>
 800730e:	2310      	movs	r3, #16
 8007310:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007314:	6063      	str	r3, [r4, #4]
 8007316:	e7a2      	b.n	800725e <_scanf_i+0x86>
 8007318:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800731c:	6022      	str	r2, [r4, #0]
 800731e:	780b      	ldrb	r3, [r1, #0]
 8007320:	f805 3b01 	strb.w	r3, [r5], #1
 8007324:	e7de      	b.n	80072e4 <_scanf_i+0x10c>
 8007326:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800732a:	4631      	mov	r1, r6
 800732c:	4650      	mov	r0, sl
 800732e:	4798      	blx	r3
 8007330:	2800      	cmp	r0, #0
 8007332:	d0df      	beq.n	80072f4 <_scanf_i+0x11c>
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	05db      	lsls	r3, r3, #23
 8007338:	d50d      	bpl.n	8007356 <_scanf_i+0x17e>
 800733a:	42bd      	cmp	r5, r7
 800733c:	d909      	bls.n	8007352 <_scanf_i+0x17a>
 800733e:	f105 39ff 	add.w	r9, r5, #4294967295
 8007342:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007346:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800734a:	4632      	mov	r2, r6
 800734c:	464d      	mov	r5, r9
 800734e:	4650      	mov	r0, sl
 8007350:	4798      	blx	r3
 8007352:	42bd      	cmp	r5, r7
 8007354:	d02d      	beq.n	80073b2 <_scanf_i+0x1da>
 8007356:	6822      	ldr	r2, [r4, #0]
 8007358:	f012 0210 	ands.w	r2, r2, #16
 800735c:	d113      	bne.n	8007386 <_scanf_i+0x1ae>
 800735e:	4639      	mov	r1, r7
 8007360:	702a      	strb	r2, [r5, #0]
 8007362:	4650      	mov	r0, sl
 8007364:	6863      	ldr	r3, [r4, #4]
 8007366:	9e01      	ldr	r6, [sp, #4]
 8007368:	47b0      	blx	r6
 800736a:	6821      	ldr	r1, [r4, #0]
 800736c:	f8d8 3000 	ldr.w	r3, [r8]
 8007370:	f011 0f20 	tst.w	r1, #32
 8007374:	d013      	beq.n	800739e <_scanf_i+0x1c6>
 8007376:	1d1a      	adds	r2, r3, #4
 8007378:	f8c8 2000 	str.w	r2, [r8]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6018      	str	r0, [r3, #0]
 8007380:	68e3      	ldr	r3, [r4, #12]
 8007382:	3301      	adds	r3, #1
 8007384:	60e3      	str	r3, [r4, #12]
 8007386:	1bed      	subs	r5, r5, r7
 8007388:	2000      	movs	r0, #0
 800738a:	44ab      	add	fp, r5
 800738c:	6925      	ldr	r5, [r4, #16]
 800738e:	445d      	add	r5, fp
 8007390:	6125      	str	r5, [r4, #16]
 8007392:	b007      	add	sp, #28
 8007394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007398:	f04f 0b00 	mov.w	fp, #0
 800739c:	e7ca      	b.n	8007334 <_scanf_i+0x15c>
 800739e:	1d1a      	adds	r2, r3, #4
 80073a0:	f011 0f01 	tst.w	r1, #1
 80073a4:	f8c8 2000 	str.w	r2, [r8]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	bf14      	ite	ne
 80073ac:	8018      	strhne	r0, [r3, #0]
 80073ae:	6018      	streq	r0, [r3, #0]
 80073b0:	e7e6      	b.n	8007380 <_scanf_i+0x1a8>
 80073b2:	2001      	movs	r0, #1
 80073b4:	e7ed      	b.n	8007392 <_scanf_i+0x1ba>
 80073b6:	bf00      	nop
 80073b8:	08007a14 	.word	0x08007a14
 80073bc:	08007625 	.word	0x08007625
 80073c0:	0800753d 	.word	0x0800753d
 80073c4:	08007b6c 	.word	0x08007b6c

080073c8 <__sccl>:
 80073c8:	b570      	push	{r4, r5, r6, lr}
 80073ca:	780b      	ldrb	r3, [r1, #0]
 80073cc:	4604      	mov	r4, r0
 80073ce:	2b5e      	cmp	r3, #94	; 0x5e
 80073d0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80073d4:	bf13      	iteet	ne
 80073d6:	1c48      	addne	r0, r1, #1
 80073d8:	1c88      	addeq	r0, r1, #2
 80073da:	784b      	ldrbeq	r3, [r1, #1]
 80073dc:	2200      	movne	r2, #0
 80073de:	bf08      	it	eq
 80073e0:	2201      	moveq	r2, #1
 80073e2:	1e61      	subs	r1, r4, #1
 80073e4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80073e8:	42a9      	cmp	r1, r5
 80073ea:	d1fb      	bne.n	80073e4 <__sccl+0x1c>
 80073ec:	b90b      	cbnz	r3, 80073f2 <__sccl+0x2a>
 80073ee:	3801      	subs	r0, #1
 80073f0:	bd70      	pop	{r4, r5, r6, pc}
 80073f2:	f082 0201 	eor.w	r2, r2, #1
 80073f6:	4605      	mov	r5, r0
 80073f8:	54e2      	strb	r2, [r4, r3]
 80073fa:	4628      	mov	r0, r5
 80073fc:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007400:	292d      	cmp	r1, #45	; 0x2d
 8007402:	d006      	beq.n	8007412 <__sccl+0x4a>
 8007404:	295d      	cmp	r1, #93	; 0x5d
 8007406:	d0f3      	beq.n	80073f0 <__sccl+0x28>
 8007408:	b909      	cbnz	r1, 800740e <__sccl+0x46>
 800740a:	4628      	mov	r0, r5
 800740c:	e7f0      	b.n	80073f0 <__sccl+0x28>
 800740e:	460b      	mov	r3, r1
 8007410:	e7f1      	b.n	80073f6 <__sccl+0x2e>
 8007412:	786e      	ldrb	r6, [r5, #1]
 8007414:	2e5d      	cmp	r6, #93	; 0x5d
 8007416:	d0fa      	beq.n	800740e <__sccl+0x46>
 8007418:	42b3      	cmp	r3, r6
 800741a:	dcf8      	bgt.n	800740e <__sccl+0x46>
 800741c:	3502      	adds	r5, #2
 800741e:	4619      	mov	r1, r3
 8007420:	3101      	adds	r1, #1
 8007422:	428e      	cmp	r6, r1
 8007424:	5462      	strb	r2, [r4, r1]
 8007426:	dcfb      	bgt.n	8007420 <__sccl+0x58>
 8007428:	1af1      	subs	r1, r6, r3
 800742a:	1c58      	adds	r0, r3, #1
 800742c:	3901      	subs	r1, #1
 800742e:	42b3      	cmp	r3, r6
 8007430:	bfa8      	it	ge
 8007432:	2100      	movge	r1, #0
 8007434:	1843      	adds	r3, r0, r1
 8007436:	e7e0      	b.n	80073fa <__sccl+0x32>

08007438 <_strtol_l.constprop.0>:
 8007438:	2b01      	cmp	r3, #1
 800743a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800743e:	d001      	beq.n	8007444 <_strtol_l.constprop.0+0xc>
 8007440:	2b24      	cmp	r3, #36	; 0x24
 8007442:	d906      	bls.n	8007452 <_strtol_l.constprop.0+0x1a>
 8007444:	f7ff f8fc 	bl	8006640 <__errno>
 8007448:	2316      	movs	r3, #22
 800744a:	6003      	str	r3, [r0, #0]
 800744c:	2000      	movs	r0, #0
 800744e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007452:	460d      	mov	r5, r1
 8007454:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8007538 <_strtol_l.constprop.0+0x100>
 8007458:	462e      	mov	r6, r5
 800745a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800745e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007462:	f017 0708 	ands.w	r7, r7, #8
 8007466:	d1f7      	bne.n	8007458 <_strtol_l.constprop.0+0x20>
 8007468:	2c2d      	cmp	r4, #45	; 0x2d
 800746a:	d132      	bne.n	80074d2 <_strtol_l.constprop.0+0x9a>
 800746c:	782c      	ldrb	r4, [r5, #0]
 800746e:	2701      	movs	r7, #1
 8007470:	1cb5      	adds	r5, r6, #2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d05b      	beq.n	800752e <_strtol_l.constprop.0+0xf6>
 8007476:	2b10      	cmp	r3, #16
 8007478:	d109      	bne.n	800748e <_strtol_l.constprop.0+0x56>
 800747a:	2c30      	cmp	r4, #48	; 0x30
 800747c:	d107      	bne.n	800748e <_strtol_l.constprop.0+0x56>
 800747e:	782c      	ldrb	r4, [r5, #0]
 8007480:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007484:	2c58      	cmp	r4, #88	; 0x58
 8007486:	d14d      	bne.n	8007524 <_strtol_l.constprop.0+0xec>
 8007488:	786c      	ldrb	r4, [r5, #1]
 800748a:	2310      	movs	r3, #16
 800748c:	3502      	adds	r5, #2
 800748e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007492:	f04f 0c00 	mov.w	ip, #0
 8007496:	f108 38ff 	add.w	r8, r8, #4294967295
 800749a:	4666      	mov	r6, ip
 800749c:	fbb8 f9f3 	udiv	r9, r8, r3
 80074a0:	fb03 8a19 	mls	sl, r3, r9, r8
 80074a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80074a8:	f1be 0f09 	cmp.w	lr, #9
 80074ac:	d816      	bhi.n	80074dc <_strtol_l.constprop.0+0xa4>
 80074ae:	4674      	mov	r4, lr
 80074b0:	42a3      	cmp	r3, r4
 80074b2:	dd24      	ble.n	80074fe <_strtol_l.constprop.0+0xc6>
 80074b4:	f1bc 0f00 	cmp.w	ip, #0
 80074b8:	db1e      	blt.n	80074f8 <_strtol_l.constprop.0+0xc0>
 80074ba:	45b1      	cmp	r9, r6
 80074bc:	d31c      	bcc.n	80074f8 <_strtol_l.constprop.0+0xc0>
 80074be:	d101      	bne.n	80074c4 <_strtol_l.constprop.0+0x8c>
 80074c0:	45a2      	cmp	sl, r4
 80074c2:	db19      	blt.n	80074f8 <_strtol_l.constprop.0+0xc0>
 80074c4:	fb06 4603 	mla	r6, r6, r3, r4
 80074c8:	f04f 0c01 	mov.w	ip, #1
 80074cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074d0:	e7e8      	b.n	80074a4 <_strtol_l.constprop.0+0x6c>
 80074d2:	2c2b      	cmp	r4, #43	; 0x2b
 80074d4:	bf04      	itt	eq
 80074d6:	782c      	ldrbeq	r4, [r5, #0]
 80074d8:	1cb5      	addeq	r5, r6, #2
 80074da:	e7ca      	b.n	8007472 <_strtol_l.constprop.0+0x3a>
 80074dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80074e0:	f1be 0f19 	cmp.w	lr, #25
 80074e4:	d801      	bhi.n	80074ea <_strtol_l.constprop.0+0xb2>
 80074e6:	3c37      	subs	r4, #55	; 0x37
 80074e8:	e7e2      	b.n	80074b0 <_strtol_l.constprop.0+0x78>
 80074ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80074ee:	f1be 0f19 	cmp.w	lr, #25
 80074f2:	d804      	bhi.n	80074fe <_strtol_l.constprop.0+0xc6>
 80074f4:	3c57      	subs	r4, #87	; 0x57
 80074f6:	e7db      	b.n	80074b0 <_strtol_l.constprop.0+0x78>
 80074f8:	f04f 3cff 	mov.w	ip, #4294967295
 80074fc:	e7e6      	b.n	80074cc <_strtol_l.constprop.0+0x94>
 80074fe:	f1bc 0f00 	cmp.w	ip, #0
 8007502:	da05      	bge.n	8007510 <_strtol_l.constprop.0+0xd8>
 8007504:	2322      	movs	r3, #34	; 0x22
 8007506:	4646      	mov	r6, r8
 8007508:	6003      	str	r3, [r0, #0]
 800750a:	b942      	cbnz	r2, 800751e <_strtol_l.constprop.0+0xe6>
 800750c:	4630      	mov	r0, r6
 800750e:	e79e      	b.n	800744e <_strtol_l.constprop.0+0x16>
 8007510:	b107      	cbz	r7, 8007514 <_strtol_l.constprop.0+0xdc>
 8007512:	4276      	negs	r6, r6
 8007514:	2a00      	cmp	r2, #0
 8007516:	d0f9      	beq.n	800750c <_strtol_l.constprop.0+0xd4>
 8007518:	f1bc 0f00 	cmp.w	ip, #0
 800751c:	d000      	beq.n	8007520 <_strtol_l.constprop.0+0xe8>
 800751e:	1e69      	subs	r1, r5, #1
 8007520:	6011      	str	r1, [r2, #0]
 8007522:	e7f3      	b.n	800750c <_strtol_l.constprop.0+0xd4>
 8007524:	2430      	movs	r4, #48	; 0x30
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1b1      	bne.n	800748e <_strtol_l.constprop.0+0x56>
 800752a:	2308      	movs	r3, #8
 800752c:	e7af      	b.n	800748e <_strtol_l.constprop.0+0x56>
 800752e:	2c30      	cmp	r4, #48	; 0x30
 8007530:	d0a5      	beq.n	800747e <_strtol_l.constprop.0+0x46>
 8007532:	230a      	movs	r3, #10
 8007534:	e7ab      	b.n	800748e <_strtol_l.constprop.0+0x56>
 8007536:	bf00      	nop
 8007538:	08007b6f 	.word	0x08007b6f

0800753c <_strtol_r>:
 800753c:	f7ff bf7c 	b.w	8007438 <_strtol_l.constprop.0>

08007540 <_strtoul_l.constprop.0>:
 8007540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007544:	4686      	mov	lr, r0
 8007546:	460d      	mov	r5, r1
 8007548:	4f35      	ldr	r7, [pc, #212]	; (8007620 <_strtoul_l.constprop.0+0xe0>)
 800754a:	4628      	mov	r0, r5
 800754c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007550:	5de6      	ldrb	r6, [r4, r7]
 8007552:	f016 0608 	ands.w	r6, r6, #8
 8007556:	d1f8      	bne.n	800754a <_strtoul_l.constprop.0+0xa>
 8007558:	2c2d      	cmp	r4, #45	; 0x2d
 800755a:	d12f      	bne.n	80075bc <_strtoul_l.constprop.0+0x7c>
 800755c:	782c      	ldrb	r4, [r5, #0]
 800755e:	2601      	movs	r6, #1
 8007560:	1c85      	adds	r5, r0, #2
 8007562:	2b00      	cmp	r3, #0
 8007564:	d057      	beq.n	8007616 <_strtoul_l.constprop.0+0xd6>
 8007566:	2b10      	cmp	r3, #16
 8007568:	d109      	bne.n	800757e <_strtoul_l.constprop.0+0x3e>
 800756a:	2c30      	cmp	r4, #48	; 0x30
 800756c:	d107      	bne.n	800757e <_strtoul_l.constprop.0+0x3e>
 800756e:	7828      	ldrb	r0, [r5, #0]
 8007570:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007574:	2858      	cmp	r0, #88	; 0x58
 8007576:	d149      	bne.n	800760c <_strtoul_l.constprop.0+0xcc>
 8007578:	786c      	ldrb	r4, [r5, #1]
 800757a:	2310      	movs	r3, #16
 800757c:	3502      	adds	r5, #2
 800757e:	f04f 38ff 	mov.w	r8, #4294967295
 8007582:	2700      	movs	r7, #0
 8007584:	fbb8 f8f3 	udiv	r8, r8, r3
 8007588:	fb03 f908 	mul.w	r9, r3, r8
 800758c:	4638      	mov	r0, r7
 800758e:	ea6f 0909 	mvn.w	r9, r9
 8007592:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007596:	f1bc 0f09 	cmp.w	ip, #9
 800759a:	d814      	bhi.n	80075c6 <_strtoul_l.constprop.0+0x86>
 800759c:	4664      	mov	r4, ip
 800759e:	42a3      	cmp	r3, r4
 80075a0:	dd22      	ble.n	80075e8 <_strtoul_l.constprop.0+0xa8>
 80075a2:	2f00      	cmp	r7, #0
 80075a4:	db1d      	blt.n	80075e2 <_strtoul_l.constprop.0+0xa2>
 80075a6:	4580      	cmp	r8, r0
 80075a8:	d31b      	bcc.n	80075e2 <_strtoul_l.constprop.0+0xa2>
 80075aa:	d101      	bne.n	80075b0 <_strtoul_l.constprop.0+0x70>
 80075ac:	45a1      	cmp	r9, r4
 80075ae:	db18      	blt.n	80075e2 <_strtoul_l.constprop.0+0xa2>
 80075b0:	fb00 4003 	mla	r0, r0, r3, r4
 80075b4:	2701      	movs	r7, #1
 80075b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075ba:	e7ea      	b.n	8007592 <_strtoul_l.constprop.0+0x52>
 80075bc:	2c2b      	cmp	r4, #43	; 0x2b
 80075be:	bf04      	itt	eq
 80075c0:	782c      	ldrbeq	r4, [r5, #0]
 80075c2:	1c85      	addeq	r5, r0, #2
 80075c4:	e7cd      	b.n	8007562 <_strtoul_l.constprop.0+0x22>
 80075c6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80075ca:	f1bc 0f19 	cmp.w	ip, #25
 80075ce:	d801      	bhi.n	80075d4 <_strtoul_l.constprop.0+0x94>
 80075d0:	3c37      	subs	r4, #55	; 0x37
 80075d2:	e7e4      	b.n	800759e <_strtoul_l.constprop.0+0x5e>
 80075d4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80075d8:	f1bc 0f19 	cmp.w	ip, #25
 80075dc:	d804      	bhi.n	80075e8 <_strtoul_l.constprop.0+0xa8>
 80075de:	3c57      	subs	r4, #87	; 0x57
 80075e0:	e7dd      	b.n	800759e <_strtoul_l.constprop.0+0x5e>
 80075e2:	f04f 37ff 	mov.w	r7, #4294967295
 80075e6:	e7e6      	b.n	80075b6 <_strtoul_l.constprop.0+0x76>
 80075e8:	2f00      	cmp	r7, #0
 80075ea:	da07      	bge.n	80075fc <_strtoul_l.constprop.0+0xbc>
 80075ec:	2322      	movs	r3, #34	; 0x22
 80075ee:	f04f 30ff 	mov.w	r0, #4294967295
 80075f2:	f8ce 3000 	str.w	r3, [lr]
 80075f6:	b932      	cbnz	r2, 8007606 <_strtoul_l.constprop.0+0xc6>
 80075f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075fc:	b106      	cbz	r6, 8007600 <_strtoul_l.constprop.0+0xc0>
 80075fe:	4240      	negs	r0, r0
 8007600:	2a00      	cmp	r2, #0
 8007602:	d0f9      	beq.n	80075f8 <_strtoul_l.constprop.0+0xb8>
 8007604:	b107      	cbz	r7, 8007608 <_strtoul_l.constprop.0+0xc8>
 8007606:	1e69      	subs	r1, r5, #1
 8007608:	6011      	str	r1, [r2, #0]
 800760a:	e7f5      	b.n	80075f8 <_strtoul_l.constprop.0+0xb8>
 800760c:	2430      	movs	r4, #48	; 0x30
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1b5      	bne.n	800757e <_strtoul_l.constprop.0+0x3e>
 8007612:	2308      	movs	r3, #8
 8007614:	e7b3      	b.n	800757e <_strtoul_l.constprop.0+0x3e>
 8007616:	2c30      	cmp	r4, #48	; 0x30
 8007618:	d0a9      	beq.n	800756e <_strtoul_l.constprop.0+0x2e>
 800761a:	230a      	movs	r3, #10
 800761c:	e7af      	b.n	800757e <_strtoul_l.constprop.0+0x3e>
 800761e:	bf00      	nop
 8007620:	08007b6f 	.word	0x08007b6f

08007624 <_strtoul_r>:
 8007624:	f7ff bf8c 	b.w	8007540 <_strtoul_l.constprop.0>

08007628 <__submore>:
 8007628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800762c:	460c      	mov	r4, r1
 800762e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007634:	4299      	cmp	r1, r3
 8007636:	d11a      	bne.n	800766e <__submore+0x46>
 8007638:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800763c:	f000 f8ce 	bl	80077dc <_malloc_r>
 8007640:	b918      	cbnz	r0, 800764a <__submore+0x22>
 8007642:	f04f 30ff 	mov.w	r0, #4294967295
 8007646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800764a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800764e:	6360      	str	r0, [r4, #52]	; 0x34
 8007650:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007654:	63a3      	str	r3, [r4, #56]	; 0x38
 8007656:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800765a:	7083      	strb	r3, [r0, #2]
 800765c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007660:	7043      	strb	r3, [r0, #1]
 8007662:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007666:	7003      	strb	r3, [r0, #0]
 8007668:	6020      	str	r0, [r4, #0]
 800766a:	2000      	movs	r0, #0
 800766c:	e7eb      	b.n	8007646 <__submore+0x1e>
 800766e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007670:	0077      	lsls	r7, r6, #1
 8007672:	463a      	mov	r2, r7
 8007674:	f000 f926 	bl	80078c4 <_realloc_r>
 8007678:	4605      	mov	r5, r0
 800767a:	2800      	cmp	r0, #0
 800767c:	d0e1      	beq.n	8007642 <__submore+0x1a>
 800767e:	eb00 0806 	add.w	r8, r0, r6
 8007682:	4601      	mov	r1, r0
 8007684:	4632      	mov	r2, r6
 8007686:	4640      	mov	r0, r8
 8007688:	f000 f815 	bl	80076b6 <memcpy>
 800768c:	f8c4 8000 	str.w	r8, [r4]
 8007690:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007694:	e7e9      	b.n	800766a <__submore+0x42>

08007696 <__retarget_lock_acquire_recursive>:
 8007696:	4770      	bx	lr

08007698 <__retarget_lock_release_recursive>:
 8007698:	4770      	bx	lr

0800769a <memchr>:
 800769a:	b2c9      	uxtb	r1, r1
 800769c:	4402      	add	r2, r0
 800769e:	b510      	push	{r4, lr}
 80076a0:	4290      	cmp	r0, r2
 80076a2:	4603      	mov	r3, r0
 80076a4:	d101      	bne.n	80076aa <memchr+0x10>
 80076a6:	2300      	movs	r3, #0
 80076a8:	e003      	b.n	80076b2 <memchr+0x18>
 80076aa:	781c      	ldrb	r4, [r3, #0]
 80076ac:	3001      	adds	r0, #1
 80076ae:	428c      	cmp	r4, r1
 80076b0:	d1f6      	bne.n	80076a0 <memchr+0x6>
 80076b2:	4618      	mov	r0, r3
 80076b4:	bd10      	pop	{r4, pc}

080076b6 <memcpy>:
 80076b6:	440a      	add	r2, r1
 80076b8:	1e43      	subs	r3, r0, #1
 80076ba:	4291      	cmp	r1, r2
 80076bc:	d100      	bne.n	80076c0 <memcpy+0xa>
 80076be:	4770      	bx	lr
 80076c0:	b510      	push	{r4, lr}
 80076c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076c6:	4291      	cmp	r1, r2
 80076c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076cc:	d1f9      	bne.n	80076c2 <memcpy+0xc>
 80076ce:	bd10      	pop	{r4, pc}

080076d0 <memmove>:
 80076d0:	4288      	cmp	r0, r1
 80076d2:	b510      	push	{r4, lr}
 80076d4:	eb01 0402 	add.w	r4, r1, r2
 80076d8:	d902      	bls.n	80076e0 <memmove+0x10>
 80076da:	4284      	cmp	r4, r0
 80076dc:	4623      	mov	r3, r4
 80076de:	d807      	bhi.n	80076f0 <memmove+0x20>
 80076e0:	1e43      	subs	r3, r0, #1
 80076e2:	42a1      	cmp	r1, r4
 80076e4:	d008      	beq.n	80076f8 <memmove+0x28>
 80076e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076ee:	e7f8      	b.n	80076e2 <memmove+0x12>
 80076f0:	4402      	add	r2, r0
 80076f2:	4601      	mov	r1, r0
 80076f4:	428a      	cmp	r2, r1
 80076f6:	d100      	bne.n	80076fa <memmove+0x2a>
 80076f8:	bd10      	pop	{r4, pc}
 80076fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007702:	e7f7      	b.n	80076f4 <memmove+0x24>

08007704 <_free_r>:
 8007704:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007706:	2900      	cmp	r1, #0
 8007708:	d043      	beq.n	8007792 <_free_r+0x8e>
 800770a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800770e:	1f0c      	subs	r4, r1, #4
 8007710:	9001      	str	r0, [sp, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	bfb8      	it	lt
 8007716:	18e4      	addlt	r4, r4, r3
 8007718:	f000 f914 	bl	8007944 <__malloc_lock>
 800771c:	4a1e      	ldr	r2, [pc, #120]	; (8007798 <_free_r+0x94>)
 800771e:	9801      	ldr	r0, [sp, #4]
 8007720:	6813      	ldr	r3, [r2, #0]
 8007722:	b933      	cbnz	r3, 8007732 <_free_r+0x2e>
 8007724:	6063      	str	r3, [r4, #4]
 8007726:	6014      	str	r4, [r2, #0]
 8007728:	b003      	add	sp, #12
 800772a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800772e:	f000 b90f 	b.w	8007950 <__malloc_unlock>
 8007732:	42a3      	cmp	r3, r4
 8007734:	d908      	bls.n	8007748 <_free_r+0x44>
 8007736:	6825      	ldr	r5, [r4, #0]
 8007738:	1961      	adds	r1, r4, r5
 800773a:	428b      	cmp	r3, r1
 800773c:	bf01      	itttt	eq
 800773e:	6819      	ldreq	r1, [r3, #0]
 8007740:	685b      	ldreq	r3, [r3, #4]
 8007742:	1949      	addeq	r1, r1, r5
 8007744:	6021      	streq	r1, [r4, #0]
 8007746:	e7ed      	b.n	8007724 <_free_r+0x20>
 8007748:	461a      	mov	r2, r3
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	b10b      	cbz	r3, 8007752 <_free_r+0x4e>
 800774e:	42a3      	cmp	r3, r4
 8007750:	d9fa      	bls.n	8007748 <_free_r+0x44>
 8007752:	6811      	ldr	r1, [r2, #0]
 8007754:	1855      	adds	r5, r2, r1
 8007756:	42a5      	cmp	r5, r4
 8007758:	d10b      	bne.n	8007772 <_free_r+0x6e>
 800775a:	6824      	ldr	r4, [r4, #0]
 800775c:	4421      	add	r1, r4
 800775e:	1854      	adds	r4, r2, r1
 8007760:	6011      	str	r1, [r2, #0]
 8007762:	42a3      	cmp	r3, r4
 8007764:	d1e0      	bne.n	8007728 <_free_r+0x24>
 8007766:	681c      	ldr	r4, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	4421      	add	r1, r4
 800776c:	6053      	str	r3, [r2, #4]
 800776e:	6011      	str	r1, [r2, #0]
 8007770:	e7da      	b.n	8007728 <_free_r+0x24>
 8007772:	d902      	bls.n	800777a <_free_r+0x76>
 8007774:	230c      	movs	r3, #12
 8007776:	6003      	str	r3, [r0, #0]
 8007778:	e7d6      	b.n	8007728 <_free_r+0x24>
 800777a:	6825      	ldr	r5, [r4, #0]
 800777c:	1961      	adds	r1, r4, r5
 800777e:	428b      	cmp	r3, r1
 8007780:	bf02      	ittt	eq
 8007782:	6819      	ldreq	r1, [r3, #0]
 8007784:	685b      	ldreq	r3, [r3, #4]
 8007786:	1949      	addeq	r1, r1, r5
 8007788:	6063      	str	r3, [r4, #4]
 800778a:	bf08      	it	eq
 800778c:	6021      	streq	r1, [r4, #0]
 800778e:	6054      	str	r4, [r2, #4]
 8007790:	e7ca      	b.n	8007728 <_free_r+0x24>
 8007792:	b003      	add	sp, #12
 8007794:	bd30      	pop	{r4, r5, pc}
 8007796:	bf00      	nop
 8007798:	20000354 	.word	0x20000354

0800779c <sbrk_aligned>:
 800779c:	b570      	push	{r4, r5, r6, lr}
 800779e:	4e0e      	ldr	r6, [pc, #56]	; (80077d8 <sbrk_aligned+0x3c>)
 80077a0:	460c      	mov	r4, r1
 80077a2:	4605      	mov	r5, r0
 80077a4:	6831      	ldr	r1, [r6, #0]
 80077a6:	b911      	cbnz	r1, 80077ae <sbrk_aligned+0x12>
 80077a8:	f000 f8bc 	bl	8007924 <_sbrk_r>
 80077ac:	6030      	str	r0, [r6, #0]
 80077ae:	4621      	mov	r1, r4
 80077b0:	4628      	mov	r0, r5
 80077b2:	f000 f8b7 	bl	8007924 <_sbrk_r>
 80077b6:	1c43      	adds	r3, r0, #1
 80077b8:	d00a      	beq.n	80077d0 <sbrk_aligned+0x34>
 80077ba:	1cc4      	adds	r4, r0, #3
 80077bc:	f024 0403 	bic.w	r4, r4, #3
 80077c0:	42a0      	cmp	r0, r4
 80077c2:	d007      	beq.n	80077d4 <sbrk_aligned+0x38>
 80077c4:	1a21      	subs	r1, r4, r0
 80077c6:	4628      	mov	r0, r5
 80077c8:	f000 f8ac 	bl	8007924 <_sbrk_r>
 80077cc:	3001      	adds	r0, #1
 80077ce:	d101      	bne.n	80077d4 <sbrk_aligned+0x38>
 80077d0:	f04f 34ff 	mov.w	r4, #4294967295
 80077d4:	4620      	mov	r0, r4
 80077d6:	bd70      	pop	{r4, r5, r6, pc}
 80077d8:	20000358 	.word	0x20000358

080077dc <_malloc_r>:
 80077dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077e0:	1ccd      	adds	r5, r1, #3
 80077e2:	4607      	mov	r7, r0
 80077e4:	f025 0503 	bic.w	r5, r5, #3
 80077e8:	3508      	adds	r5, #8
 80077ea:	2d0c      	cmp	r5, #12
 80077ec:	bf38      	it	cc
 80077ee:	250c      	movcc	r5, #12
 80077f0:	2d00      	cmp	r5, #0
 80077f2:	db01      	blt.n	80077f8 <_malloc_r+0x1c>
 80077f4:	42a9      	cmp	r1, r5
 80077f6:	d905      	bls.n	8007804 <_malloc_r+0x28>
 80077f8:	230c      	movs	r3, #12
 80077fa:	2600      	movs	r6, #0
 80077fc:	603b      	str	r3, [r7, #0]
 80077fe:	4630      	mov	r0, r6
 8007800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007804:	4e2e      	ldr	r6, [pc, #184]	; (80078c0 <_malloc_r+0xe4>)
 8007806:	f000 f89d 	bl	8007944 <__malloc_lock>
 800780a:	6833      	ldr	r3, [r6, #0]
 800780c:	461c      	mov	r4, r3
 800780e:	bb34      	cbnz	r4, 800785e <_malloc_r+0x82>
 8007810:	4629      	mov	r1, r5
 8007812:	4638      	mov	r0, r7
 8007814:	f7ff ffc2 	bl	800779c <sbrk_aligned>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	4604      	mov	r4, r0
 800781c:	d14d      	bne.n	80078ba <_malloc_r+0xde>
 800781e:	6834      	ldr	r4, [r6, #0]
 8007820:	4626      	mov	r6, r4
 8007822:	2e00      	cmp	r6, #0
 8007824:	d140      	bne.n	80078a8 <_malloc_r+0xcc>
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	4631      	mov	r1, r6
 800782a:	4638      	mov	r0, r7
 800782c:	eb04 0803 	add.w	r8, r4, r3
 8007830:	f000 f878 	bl	8007924 <_sbrk_r>
 8007834:	4580      	cmp	r8, r0
 8007836:	d13a      	bne.n	80078ae <_malloc_r+0xd2>
 8007838:	6821      	ldr	r1, [r4, #0]
 800783a:	3503      	adds	r5, #3
 800783c:	4638      	mov	r0, r7
 800783e:	1a6d      	subs	r5, r5, r1
 8007840:	f025 0503 	bic.w	r5, r5, #3
 8007844:	3508      	adds	r5, #8
 8007846:	2d0c      	cmp	r5, #12
 8007848:	bf38      	it	cc
 800784a:	250c      	movcc	r5, #12
 800784c:	4629      	mov	r1, r5
 800784e:	f7ff ffa5 	bl	800779c <sbrk_aligned>
 8007852:	3001      	adds	r0, #1
 8007854:	d02b      	beq.n	80078ae <_malloc_r+0xd2>
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	442b      	add	r3, r5
 800785a:	6023      	str	r3, [r4, #0]
 800785c:	e00e      	b.n	800787c <_malloc_r+0xa0>
 800785e:	6822      	ldr	r2, [r4, #0]
 8007860:	1b52      	subs	r2, r2, r5
 8007862:	d41e      	bmi.n	80078a2 <_malloc_r+0xc6>
 8007864:	2a0b      	cmp	r2, #11
 8007866:	d916      	bls.n	8007896 <_malloc_r+0xba>
 8007868:	1961      	adds	r1, r4, r5
 800786a:	42a3      	cmp	r3, r4
 800786c:	6025      	str	r5, [r4, #0]
 800786e:	bf18      	it	ne
 8007870:	6059      	strne	r1, [r3, #4]
 8007872:	6863      	ldr	r3, [r4, #4]
 8007874:	bf08      	it	eq
 8007876:	6031      	streq	r1, [r6, #0]
 8007878:	5162      	str	r2, [r4, r5]
 800787a:	604b      	str	r3, [r1, #4]
 800787c:	f104 060b 	add.w	r6, r4, #11
 8007880:	4638      	mov	r0, r7
 8007882:	f000 f865 	bl	8007950 <__malloc_unlock>
 8007886:	1d23      	adds	r3, r4, #4
 8007888:	f026 0607 	bic.w	r6, r6, #7
 800788c:	1af2      	subs	r2, r6, r3
 800788e:	d0b6      	beq.n	80077fe <_malloc_r+0x22>
 8007890:	1b9b      	subs	r3, r3, r6
 8007892:	50a3      	str	r3, [r4, r2]
 8007894:	e7b3      	b.n	80077fe <_malloc_r+0x22>
 8007896:	6862      	ldr	r2, [r4, #4]
 8007898:	42a3      	cmp	r3, r4
 800789a:	bf0c      	ite	eq
 800789c:	6032      	streq	r2, [r6, #0]
 800789e:	605a      	strne	r2, [r3, #4]
 80078a0:	e7ec      	b.n	800787c <_malloc_r+0xa0>
 80078a2:	4623      	mov	r3, r4
 80078a4:	6864      	ldr	r4, [r4, #4]
 80078a6:	e7b2      	b.n	800780e <_malloc_r+0x32>
 80078a8:	4634      	mov	r4, r6
 80078aa:	6876      	ldr	r6, [r6, #4]
 80078ac:	e7b9      	b.n	8007822 <_malloc_r+0x46>
 80078ae:	230c      	movs	r3, #12
 80078b0:	4638      	mov	r0, r7
 80078b2:	603b      	str	r3, [r7, #0]
 80078b4:	f000 f84c 	bl	8007950 <__malloc_unlock>
 80078b8:	e7a1      	b.n	80077fe <_malloc_r+0x22>
 80078ba:	6025      	str	r5, [r4, #0]
 80078bc:	e7de      	b.n	800787c <_malloc_r+0xa0>
 80078be:	bf00      	nop
 80078c0:	20000354 	.word	0x20000354

080078c4 <_realloc_r>:
 80078c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078c8:	4680      	mov	r8, r0
 80078ca:	4614      	mov	r4, r2
 80078cc:	460e      	mov	r6, r1
 80078ce:	b921      	cbnz	r1, 80078da <_realloc_r+0x16>
 80078d0:	4611      	mov	r1, r2
 80078d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078d6:	f7ff bf81 	b.w	80077dc <_malloc_r>
 80078da:	b92a      	cbnz	r2, 80078e8 <_realloc_r+0x24>
 80078dc:	4625      	mov	r5, r4
 80078de:	f7ff ff11 	bl	8007704 <_free_r>
 80078e2:	4628      	mov	r0, r5
 80078e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078e8:	f000 f838 	bl	800795c <_malloc_usable_size_r>
 80078ec:	4284      	cmp	r4, r0
 80078ee:	4607      	mov	r7, r0
 80078f0:	d802      	bhi.n	80078f8 <_realloc_r+0x34>
 80078f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80078f6:	d812      	bhi.n	800791e <_realloc_r+0x5a>
 80078f8:	4621      	mov	r1, r4
 80078fa:	4640      	mov	r0, r8
 80078fc:	f7ff ff6e 	bl	80077dc <_malloc_r>
 8007900:	4605      	mov	r5, r0
 8007902:	2800      	cmp	r0, #0
 8007904:	d0ed      	beq.n	80078e2 <_realloc_r+0x1e>
 8007906:	42bc      	cmp	r4, r7
 8007908:	4622      	mov	r2, r4
 800790a:	4631      	mov	r1, r6
 800790c:	bf28      	it	cs
 800790e:	463a      	movcs	r2, r7
 8007910:	f7ff fed1 	bl	80076b6 <memcpy>
 8007914:	4631      	mov	r1, r6
 8007916:	4640      	mov	r0, r8
 8007918:	f7ff fef4 	bl	8007704 <_free_r>
 800791c:	e7e1      	b.n	80078e2 <_realloc_r+0x1e>
 800791e:	4635      	mov	r5, r6
 8007920:	e7df      	b.n	80078e2 <_realloc_r+0x1e>
	...

08007924 <_sbrk_r>:
 8007924:	b538      	push	{r3, r4, r5, lr}
 8007926:	2300      	movs	r3, #0
 8007928:	4d05      	ldr	r5, [pc, #20]	; (8007940 <_sbrk_r+0x1c>)
 800792a:	4604      	mov	r4, r0
 800792c:	4608      	mov	r0, r1
 800792e:	602b      	str	r3, [r5, #0]
 8007930:	f7f9 f928 	bl	8000b84 <_sbrk>
 8007934:	1c43      	adds	r3, r0, #1
 8007936:	d102      	bne.n	800793e <_sbrk_r+0x1a>
 8007938:	682b      	ldr	r3, [r5, #0]
 800793a:	b103      	cbz	r3, 800793e <_sbrk_r+0x1a>
 800793c:	6023      	str	r3, [r4, #0]
 800793e:	bd38      	pop	{r3, r4, r5, pc}
 8007940:	2000034c 	.word	0x2000034c

08007944 <__malloc_lock>:
 8007944:	4801      	ldr	r0, [pc, #4]	; (800794c <__malloc_lock+0x8>)
 8007946:	f7ff bea6 	b.w	8007696 <__retarget_lock_acquire_recursive>
 800794a:	bf00      	nop
 800794c:	20000350 	.word	0x20000350

08007950 <__malloc_unlock>:
 8007950:	4801      	ldr	r0, [pc, #4]	; (8007958 <__malloc_unlock+0x8>)
 8007952:	f7ff bea1 	b.w	8007698 <__retarget_lock_release_recursive>
 8007956:	bf00      	nop
 8007958:	20000350 	.word	0x20000350

0800795c <_malloc_usable_size_r>:
 800795c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007960:	1f18      	subs	r0, r3, #4
 8007962:	2b00      	cmp	r3, #0
 8007964:	bfbc      	itt	lt
 8007966:	580b      	ldrlt	r3, [r1, r0]
 8007968:	18c0      	addlt	r0, r0, r3
 800796a:	4770      	bx	lr

0800796c <_init>:
 800796c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796e:	bf00      	nop
 8007970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007972:	bc08      	pop	{r3}
 8007974:	469e      	mov	lr, r3
 8007976:	4770      	bx	lr

08007978 <_fini>:
 8007978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797a:	bf00      	nop
 800797c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800797e:	bc08      	pop	{r3}
 8007980:	469e      	mov	lr, r3
 8007982:	4770      	bx	lr
