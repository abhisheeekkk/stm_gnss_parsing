
gnss_parsing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cec  08000250  08000250  00010250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018f  08006f3c  08006f3c  00016f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080070cc  080070cc  000170cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080070d4  080070d4  000170d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080070d8  080070d8  000170d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  080070dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000345  20000070  0800714c  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000603  200003b5  0800714c  000203b5  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000fef1  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001e05  00000000  00000000  0002ff97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c70  00000000  00000000  00031da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000bb8  00000000  00000000  00032a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032fcc  00000000  00000000  000335c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000f41e  00000000  00000000  00066594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014022f  00000000  00000000  000759b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001b5be1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003724  00000000  00000000  001b5c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	e000      	b.n	8000262 <__do_global_dtors_aux+0x12>
 8000260:	bf00      	nop
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000070 	.word	0x20000070
 800026c:	00000000 	.word	0x00000000
 8000270:	08006f24 	.word	0x08006f24

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	e000      	b.n	8000282 <frame_dummy+0xe>
 8000280:	bf00      	nop
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000074 	.word	0x20000074
 800028c:	08006f24 	.word	0x08006f24

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b982 	b.w	80005bc <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002d6:	4604      	mov	r4, r0
 80002d8:	460f      	mov	r7, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d148      	bne.n	8000370 <__udivmoddi4+0xa0>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d961      	bls.n	80003a8 <__udivmoddi4+0xd8>
 80002e4:	fab2 f382 	clz	r3, r2
 80002e8:	b143      	cbz	r3, 80002fc <__udivmoddi4+0x2c>
 80002ea:	f1c3 0120 	rsb	r1, r3, #32
 80002ee:	409f      	lsls	r7, r3
 80002f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f4:	409c      	lsls	r4, r3
 80002f6:	fa20 f101 	lsr.w	r1, r0, r1
 80002fa:	430f      	orrs	r7, r1
 80002fc:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000300:	fa1f fe8c 	uxth.w	lr, ip
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	fbb7 f6f1 	udiv	r6, r7, r1
 800030a:	fb01 7716 	mls	r7, r1, r6, r7
 800030e:	fb06 f00e 	mul.w	r0, r6, lr
 8000312:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x5c>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f106 37ff 	add.w	r7, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x5a>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 8137 	bhi.w	8000598 <__udivmoddi4+0x2c8>
 800032a:	463e      	mov	r6, r7
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f1 	udiv	r0, r2, r1
 8000334:	fb01 2210 	mls	r2, r1, r0, r2
 8000338:	fb00 fe0e 	mul.w	lr, r0, lr
 800033c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x86>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x84>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 811c 	bhi.w	800058c <__udivmoddi4+0x2bc>
 8000354:	4610      	mov	r0, r2
 8000356:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	2600      	movs	r6, #0
 8000360:	b11d      	cbz	r5, 800036a <__udivmoddi4+0x9a>
 8000362:	40dc      	lsrs	r4, r3
 8000364:	2300      	movs	r3, #0
 8000366:	e9c5 4300 	strd	r4, r3, [r5]
 800036a:	4631      	mov	r1, r6
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	428b      	cmp	r3, r1
 8000372:	d909      	bls.n	8000388 <__udivmoddi4+0xb8>
 8000374:	2d00      	cmp	r5, #0
 8000376:	f000 80fd 	beq.w	8000574 <__udivmoddi4+0x2a4>
 800037a:	2600      	movs	r6, #0
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	4630      	mov	r0, r6
 8000382:	4631      	mov	r1, r6
 8000384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000388:	fab3 f683 	clz	r6, r3
 800038c:	2e00      	cmp	r6, #0
 800038e:	d14b      	bne.n	8000428 <__udivmoddi4+0x158>
 8000390:	428b      	cmp	r3, r1
 8000392:	f0c0 80f2 	bcc.w	800057a <__udivmoddi4+0x2aa>
 8000396:	4282      	cmp	r2, r0
 8000398:	f240 80ef 	bls.w	800057a <__udivmoddi4+0x2aa>
 800039c:	4630      	mov	r0, r6
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e3      	beq.n	800036a <__udivmoddi4+0x9a>
 80003a2:	e9c5 4700 	strd	r4, r7, [r5]
 80003a6:	e7e0      	b.n	800036a <__udivmoddi4+0x9a>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xdc>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f382 	clz	r3, r2
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	f040 809d 	bne.w	80004f0 <__udivmoddi4+0x220>
 80003b6:	1a89      	subs	r1, r1, r2
 80003b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003bc:	b297      	uxth	r7, r2
 80003be:	2601      	movs	r6, #1
 80003c0:	0c20      	lsrs	r0, r4, #16
 80003c2:	fbb1 f2fe 	udiv	r2, r1, lr
 80003c6:	fb0e 1112 	mls	r1, lr, r2, r1
 80003ca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ce:	fb07 f002 	mul.w	r0, r7, r2
 80003d2:	4288      	cmp	r0, r1
 80003d4:	d90f      	bls.n	80003f6 <__udivmoddi4+0x126>
 80003d6:	eb1c 0101 	adds.w	r1, ip, r1
 80003da:	f102 38ff 	add.w	r8, r2, #4294967295
 80003de:	bf2c      	ite	cs
 80003e0:	f04f 0901 	movcs.w	r9, #1
 80003e4:	f04f 0900 	movcc.w	r9, #0
 80003e8:	4288      	cmp	r0, r1
 80003ea:	d903      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003ec:	f1b9 0f00 	cmp.w	r9, #0
 80003f0:	f000 80cf 	beq.w	8000592 <__udivmoddi4+0x2c2>
 80003f4:	4642      	mov	r2, r8
 80003f6:	1a09      	subs	r1, r1, r0
 80003f8:	b2a4      	uxth	r4, r4
 80003fa:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000402:	fb00 f707 	mul.w	r7, r0, r7
 8000406:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040a:	42a7      	cmp	r7, r4
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x150>
 800040e:	eb1c 0404 	adds.w	r4, ip, r4
 8000412:	f100 31ff 	add.w	r1, r0, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0x14e>
 8000418:	42a7      	cmp	r7, r4
 800041a:	f200 80b4 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041e:	4608      	mov	r0, r1
 8000420:	1be4      	subs	r4, r4, r7
 8000422:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000426:	e79b      	b.n	8000360 <__udivmoddi4+0x90>
 8000428:	f1c6 0720 	rsb	r7, r6, #32
 800042c:	40b3      	lsls	r3, r6
 800042e:	fa01 f406 	lsl.w	r4, r1, r6
 8000432:	fa22 fc07 	lsr.w	ip, r2, r7
 8000436:	40f9      	lsrs	r1, r7
 8000438:	40b2      	lsls	r2, r6
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f307 	lsr.w	r3, r0, r7
 8000442:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000446:	431c      	orrs	r4, r3
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fa00 f306 	lsl.w	r3, r0, r6
 8000450:	0c20      	lsrs	r0, r4, #16
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	fb09 1118 	mls	r1, r9, r8, r1
 800045a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800045e:	fb08 f00e 	mul.w	r0, r8, lr
 8000462:	4288      	cmp	r0, r1
 8000464:	d90f      	bls.n	8000486 <__udivmoddi4+0x1b6>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f108 3aff 	add.w	sl, r8, #4294967295
 800046e:	bf2c      	ite	cs
 8000470:	f04f 0b01 	movcs.w	fp, #1
 8000474:	f04f 0b00 	movcc.w	fp, #0
 8000478:	4288      	cmp	r0, r1
 800047a:	d903      	bls.n	8000484 <__udivmoddi4+0x1b4>
 800047c:	f1bb 0f00 	cmp.w	fp, #0
 8000480:	f000 808d 	beq.w	800059e <__udivmoddi4+0x2ce>
 8000484:	46d0      	mov	r8, sl
 8000486:	1a09      	subs	r1, r1, r0
 8000488:	b2a4      	uxth	r4, r4
 800048a:	fbb1 f0f9 	udiv	r0, r1, r9
 800048e:	fb09 1110 	mls	r1, r9, r0, r1
 8000492:	fb00 fe0e 	mul.w	lr, r0, lr
 8000496:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800049a:	458e      	cmp	lr, r1
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x1de>
 800049e:	eb1c 0101 	adds.w	r1, ip, r1
 80004a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a6:	d201      	bcs.n	80004ac <__udivmoddi4+0x1dc>
 80004a8:	458e      	cmp	lr, r1
 80004aa:	d87f      	bhi.n	80005ac <__udivmoddi4+0x2dc>
 80004ac:	4620      	mov	r0, r4
 80004ae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b2:	eba1 010e 	sub.w	r1, r1, lr
 80004b6:	fba0 9802 	umull	r9, r8, r0, r2
 80004ba:	4541      	cmp	r1, r8
 80004bc:	464c      	mov	r4, r9
 80004be:	46c6      	mov	lr, r8
 80004c0:	d302      	bcc.n	80004c8 <__udivmoddi4+0x1f8>
 80004c2:	d106      	bne.n	80004d2 <__udivmoddi4+0x202>
 80004c4:	454b      	cmp	r3, r9
 80004c6:	d204      	bcs.n	80004d2 <__udivmoddi4+0x202>
 80004c8:	3801      	subs	r0, #1
 80004ca:	ebb9 0402 	subs.w	r4, r9, r2
 80004ce:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004d2:	2d00      	cmp	r5, #0
 80004d4:	d070      	beq.n	80005b8 <__udivmoddi4+0x2e8>
 80004d6:	1b1a      	subs	r2, r3, r4
 80004d8:	eb61 010e 	sbc.w	r1, r1, lr
 80004dc:	fa22 f306 	lsr.w	r3, r2, r6
 80004e0:	fa01 f707 	lsl.w	r7, r1, r7
 80004e4:	40f1      	lsrs	r1, r6
 80004e6:	2600      	movs	r6, #0
 80004e8:	431f      	orrs	r7, r3
 80004ea:	e9c5 7100 	strd	r7, r1, [r5]
 80004ee:	e73c      	b.n	800036a <__udivmoddi4+0x9a>
 80004f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f4:	f1c3 0020 	rsb	r0, r3, #32
 80004f8:	fa01 f203 	lsl.w	r2, r1, r3
 80004fc:	fa21 f600 	lsr.w	r6, r1, r0
 8000500:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000504:	fa24 f100 	lsr.w	r1, r4, r0
 8000508:	fa1f f78c 	uxth.w	r7, ip
 800050c:	409c      	lsls	r4, r3
 800050e:	4311      	orrs	r1, r2
 8000510:	fbb6 f0fe 	udiv	r0, r6, lr
 8000514:	0c0a      	lsrs	r2, r1, #16
 8000516:	fb0e 6610 	mls	r6, lr, r0, r6
 800051a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800051e:	fb00 f607 	mul.w	r6, r0, r7
 8000522:	4296      	cmp	r6, r2
 8000524:	d90e      	bls.n	8000544 <__udivmoddi4+0x274>
 8000526:	eb1c 0202 	adds.w	r2, ip, r2
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	bf2c      	ite	cs
 8000530:	f04f 0901 	movcs.w	r9, #1
 8000534:	f04f 0900 	movcc.w	r9, #0
 8000538:	4296      	cmp	r6, r2
 800053a:	d902      	bls.n	8000542 <__udivmoddi4+0x272>
 800053c:	f1b9 0f00 	cmp.w	r9, #0
 8000540:	d031      	beq.n	80005a6 <__udivmoddi4+0x2d6>
 8000542:	4640      	mov	r0, r8
 8000544:	1b92      	subs	r2, r2, r6
 8000546:	b289      	uxth	r1, r1
 8000548:	fbb2 f6fe 	udiv	r6, r2, lr
 800054c:	fb0e 2216 	mls	r2, lr, r6, r2
 8000550:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000554:	fb06 f207 	mul.w	r2, r6, r7
 8000558:	428a      	cmp	r2, r1
 800055a:	d907      	bls.n	800056c <__udivmoddi4+0x29c>
 800055c:	eb1c 0101 	adds.w	r1, ip, r1
 8000560:	f106 38ff 	add.w	r8, r6, #4294967295
 8000564:	d201      	bcs.n	800056a <__udivmoddi4+0x29a>
 8000566:	428a      	cmp	r2, r1
 8000568:	d823      	bhi.n	80005b2 <__udivmoddi4+0x2e2>
 800056a:	4646      	mov	r6, r8
 800056c:	1a89      	subs	r1, r1, r2
 800056e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000572:	e725      	b.n	80003c0 <__udivmoddi4+0xf0>
 8000574:	462e      	mov	r6, r5
 8000576:	4628      	mov	r0, r5
 8000578:	e6f7      	b.n	800036a <__udivmoddi4+0x9a>
 800057a:	1a84      	subs	r4, r0, r2
 800057c:	eb61 0303 	sbc.w	r3, r1, r3
 8000580:	2001      	movs	r0, #1
 8000582:	461f      	mov	r7, r3
 8000584:	e70b      	b.n	800039e <__udivmoddi4+0xce>
 8000586:	4464      	add	r4, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e749      	b.n	8000420 <__udivmoddi4+0x150>
 800058c:	4464      	add	r4, ip
 800058e:	3802      	subs	r0, #2
 8000590:	e6e1      	b.n	8000356 <__udivmoddi4+0x86>
 8000592:	3a02      	subs	r2, #2
 8000594:	4461      	add	r1, ip
 8000596:	e72e      	b.n	80003f6 <__udivmoddi4+0x126>
 8000598:	3e02      	subs	r6, #2
 800059a:	4462      	add	r2, ip
 800059c:	e6c6      	b.n	800032c <__udivmoddi4+0x5c>
 800059e:	f1a8 0802 	sub.w	r8, r8, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e76f      	b.n	8000486 <__udivmoddi4+0x1b6>
 80005a6:	3802      	subs	r0, #2
 80005a8:	4462      	add	r2, ip
 80005aa:	e7cb      	b.n	8000544 <__udivmoddi4+0x274>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4461      	add	r1, ip
 80005b0:	e77d      	b.n	80004ae <__udivmoddi4+0x1de>
 80005b2:	3e02      	subs	r6, #2
 80005b4:	4461      	add	r1, ip
 80005b6:	e7d9      	b.n	800056c <__udivmoddi4+0x29c>
 80005b8:	462e      	mov	r6, r5
 80005ba:	e6d6      	b.n	800036a <__udivmoddi4+0x9a>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <GNSS_PRINT>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int GNSS_PRINT(char *pBuffer)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  if (HAL_UART_Transmit(&huart4, (uint8_t*)pBuffer, (uint16_t)strlen((char *)pBuffer), 1000) != HAL_OK)
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f7ff fe61 	bl	8000290 <strlen>
 80005ce:	4603      	mov	r3, r0
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d6:	6879      	ldr	r1, [r7, #4]
 80005d8:	4806      	ldr	r0, [pc, #24]	; (80005f4 <GNSS_PRINT+0x34>)
 80005da:	f005 f9bf 	bl	800595c <HAL_UART_Transmit>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <GNSS_PRINT+0x28>
  {
    return 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	e000      	b.n	80005ea <GNSS_PRINT+0x2a>
  }

  return 0;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000008c 	.word	0x2000008c

080005f8 <GNSS_DATA_SendCommand>:


void GNSS_DATA_SendCommand(uint8_t *pCommand)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  int32_t status;

  if (pCommand[0] != 36U) /* An NMEA command must begin with '$' */
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b24      	cmp	r3, #36	; 0x24
 8000606:	d003      	beq.n	8000610 <GNSS_DATA_SendCommand+0x18>
  {
    PRINT_INFO("Invalid command (an NMEA command begins with '$').\n\r");
 8000608:	480e      	ldr	r0, [pc, #56]	; (8000644 <GNSS_DATA_SendCommand+0x4c>)
 800060a:	f7ff ffd9 	bl	80005c0 <GNSS_PRINT>
    {
      status = HAL_UART_Transmit(&huart4, (uint8_t*)gnssCmd, (uint16_t)strlen((char *)gnssCmd), 1000);
    }
    while(status != 0);
  }
}
 800060e:	e015      	b.n	800063c <GNSS_DATA_SendCommand+0x44>
    snprintf((char *)gnssCmd, 90, "%s\r\n", (char *)pCommand);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a0d      	ldr	r2, [pc, #52]	; (8000648 <GNSS_DATA_SendCommand+0x50>)
 8000614:	215a      	movs	r1, #90	; 0x5a
 8000616:	480d      	ldr	r0, [pc, #52]	; (800064c <GNSS_DATA_SendCommand+0x54>)
 8000618:	f005 fff2 	bl	8006600 <sniprintf>
      status = HAL_UART_Transmit(&huart4, (uint8_t*)gnssCmd, (uint16_t)strlen((char *)gnssCmd), 1000);
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <GNSS_DATA_SendCommand+0x54>)
 800061e:	f7ff fe37 	bl	8000290 <strlen>
 8000622:	4603      	mov	r3, r0
 8000624:	b29a      	uxth	r2, r3
 8000626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062a:	4908      	ldr	r1, [pc, #32]	; (800064c <GNSS_DATA_SendCommand+0x54>)
 800062c:	4808      	ldr	r0, [pc, #32]	; (8000650 <GNSS_DATA_SendCommand+0x58>)
 800062e:	f005 f995 	bl	800595c <HAL_UART_Transmit>
 8000632:	4603      	mov	r3, r0
 8000634:	60fb      	str	r3, [r7, #12]
    while(status != 0);
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d1ef      	bne.n	800061c <GNSS_DATA_SendCommand+0x24>
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	08006f3c 	.word	0x08006f3c
 8000648:	08006f74 	.word	0x08006f74
 800064c:	200001b4 	.word	0x200001b4
 8000650:	2000008c 	.word	0x2000008c

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 fad9 	bl	8000c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f833 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 f923 	bl	80008ac <MX_GPIO_Init>
  MX_UART4_Init();
 8000666:	f000 f889 	bl	800077c <MX_UART4_Init>
  MX_USART1_UART_Init();
 800066a:	f000 f8d3 	bl	8000814 <MX_USART1_UART_Init>
  MX_ICACHE_Init();
 800066e:	f000 f872 	bl	8000756 <MX_ICACHE_Init>
     * 0x100000 $GPGLL Message
     */
  //  int lowMask = 0x18004F;


  int lowMask = 0x2;
 8000672:	2302      	movs	r3, #2
 8000674:	607b      	str	r3, [r7, #4]
  int highMask = 0x0;
 8000676:	2300      	movs	r3, #0
 8000678:	603b      	str	r3, [r7, #0]
  snprintf((char *)gnssCmd, 90, "$PSTMCFGMSGL,%d,%d,%x,%x",
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	9302      	str	r3, [sp, #8]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	9301      	str	r3, [sp, #4]
 8000682:	2301      	movs	r3, #1
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	2300      	movs	r3, #0
 8000688:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <main+0x64>)
 800068a:	215a      	movs	r1, #90	; 0x5a
 800068c:	480b      	ldr	r0, [pc, #44]	; (80006bc <main+0x68>)
 800068e:	f005 ffb7 	bl	8006600 <sniprintf>
                   0, /*NMEA 0*/
                   1, /*Rate*/
                   lowMask,
                   highMask);

  GNSS_DATA_SendCommand(gnssCmd);
 8000692:	480a      	ldr	r0, [pc, #40]	; (80006bc <main+0x68>)
 8000694:	f7ff ffb0 	bl	80005f8 <GNSS_DATA_SendCommand>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_UART_Receive(&huart4, (uint8_t*)xbuffer, (uint16_t)strlen((char *)xbuffer), 1000);
 8000698:	4809      	ldr	r0, [pc, #36]	; (80006c0 <main+0x6c>)
 800069a:	f7ff fdf9 	bl	8000290 <strlen>
 800069e:	4603      	mov	r3, r0
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a6:	4906      	ldr	r1, [pc, #24]	; (80006c0 <main+0x6c>)
 80006a8:	4806      	ldr	r0, [pc, #24]	; (80006c4 <main+0x70>)
 80006aa:	f005 f9e5 	bl	8005a78 <HAL_UART_Receive>

	  HAL_Delay(5000);
 80006ae:	f241 3088 	movw	r0, #5000	; 0x1388
 80006b2:	f000 fb31 	bl	8000d18 <HAL_Delay>
  {
 80006b6:	e7ef      	b.n	8000698 <main+0x44>
 80006b8:	08006f7c 	.word	0x08006f7c
 80006bc:	200001b4 	.word	0x200001b4
 80006c0:	20000210 	.word	0x20000210
 80006c4:	2000008c 	.word	0x2000008c

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b09e      	sub	sp, #120	; 0x78
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0318 	add.w	r3, r7, #24
 80006d2:	2260      	movs	r2, #96	; 0x60
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f005 ff8a 	bl	80065f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	463b      	mov	r3, r7
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]
 80006ea:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80006ec:	2000      	movs	r0, #0
 80006ee:	f000 fe23 	bl	8001338 <HAL_PWREx_ControlVoltageScaling>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006f8:	f000 f8f2 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fc:	2302      	movs	r3, #2
 80006fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000706:	2310      	movs	r3, #16
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800070a:	2300      	movs	r3, #0
 800070c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	f107 0318 	add.w	r3, r7, #24
 8000712:	4618      	mov	r0, r3
 8000714:	f000 fe9c 	bl	8001450 <HAL_RCC_OscConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800071e:	f000 f8df 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	231f      	movs	r3, #31
 8000724:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000726:	2301      	movs	r3, #1
 8000728:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	2101      	movs	r1, #1
 800073e:	4618      	mov	r0, r3
 8000740:	f001 fd62 	bl	8002208 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800074a:	f000 f8c9 	bl	80008e0 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3778      	adds	r7, #120	; 0x78
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800075a:	2000      	movs	r0, #0
 800075c:	f000 fdbc 	bl	80012d8 <HAL_ICACHE_ConfigAssociativityMode>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000766:	f000 f8bb 	bl	80008e0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800076a:	f000 fdd5 	bl	8001318 <HAL_ICACHE_Enable>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000774:	f000 f8b4 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}

0800077c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <MX_UART4_Init+0x90>)
 8000782:	4a23      	ldr	r2, [pc, #140]	; (8000810 <MX_UART4_Init+0x94>)
 8000784:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000786:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_UART4_Init+0x90>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_UART4_Init+0x90>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_UART4_Init+0x90>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_UART4_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_UART4_Init+0x90>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_UART4_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_UART4_Init+0x90>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_UART4_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_UART4_Init+0x90>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_UART4_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007c4:	4811      	ldr	r0, [pc, #68]	; (800080c <MX_UART4_Init+0x90>)
 80007c6:	f005 f879 	bl	80058bc <HAL_UART_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80007d0:	f000 f886 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d4:	2100      	movs	r1, #0
 80007d6:	480d      	ldr	r0, [pc, #52]	; (800080c <MX_UART4_Init+0x90>)
 80007d8:	f005 fe16 	bl	8006408 <HAL_UARTEx_SetTxFifoThreshold>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80007e2:	f000 f87d 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e6:	2100      	movs	r1, #0
 80007e8:	4808      	ldr	r0, [pc, #32]	; (800080c <MX_UART4_Init+0x90>)
 80007ea:	f005 fe4b 	bl	8006484 <HAL_UARTEx_SetRxFifoThreshold>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80007f4:	f000 f874 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_UART4_Init+0x90>)
 80007fa:	f005 fdcc 	bl	8006396 <HAL_UARTEx_DisableFifoMode>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000804:	f000 f86c 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	2000008c 	.word	0x2000008c
 8000810:	40004c00 	.word	0x40004c00

08000814 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000818:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 800081a:	4a23      	ldr	r2, [pc, #140]	; (80008a8 <MX_USART1_UART_Init+0x94>)
 800081c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800081e:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 8000820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000824:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800085c:	4811      	ldr	r0, [pc, #68]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 800085e:	f005 f82d 	bl	80058bc <HAL_UART_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000868:	f000 f83a 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800086c:	2100      	movs	r1, #0
 800086e:	480d      	ldr	r0, [pc, #52]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 8000870:	f005 fdca 	bl	8006408 <HAL_UARTEx_SetTxFifoThreshold>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800087a:	f000 f831 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087e:	2100      	movs	r1, #0
 8000880:	4808      	ldr	r0, [pc, #32]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 8000882:	f005 fdff 	bl	8006484 <HAL_UARTEx_SetRxFifoThreshold>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800088c:	f000 f828 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_USART1_UART_Init+0x90>)
 8000892:	f005 fd80 	bl	8006396 <HAL_UARTEx_DisableFifoMode>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800089c:	f000 f820 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000120 	.word	0x20000120
 80008a8:	40013800 	.word	0x40013800

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <MX_GPIO_Init+0x30>)
 80008b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008b8:	4a08      	ldr	r2, [pc, #32]	; (80008dc <MX_GPIO_Init+0x30>)
 80008ba:	f043 0301 	orr.w	r3, r3, #1
 80008be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_GPIO_Init+0x30>)
 80008c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	46020c00 	.word	0x46020c00

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>

080008ea <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b0c2      	sub	sp, #264	; 0x108
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000902:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000906:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000918:	f107 0318 	add.w	r3, r7, #24
 800091c:	22d8      	movs	r2, #216	; 0xd8
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f005 fe65 	bl	80065f0 <memset>
  if(huart->Instance==UART4)
 8000926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800092a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a52      	ldr	r2, [pc, #328]	; (8000a7c <HAL_UART_MspInit+0x184>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d145      	bne.n	80009c4 <HAL_UART_MspInit+0xcc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000938:	f04f 0208 	mov.w	r2, #8
 800093c:	f04f 0300 	mov.w	r3, #0
 8000940:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000944:	2300      	movs	r3, #0
 8000946:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000948:	f107 0318 	add.w	r3, r7, #24
 800094c:	4618      	mov	r0, r3
 800094e:	f002 f831 	bl	80029b4 <HAL_RCCEx_PeriphCLKConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8000958:	f7ff ffc2 	bl	80008e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800095c:	4b48      	ldr	r3, [pc, #288]	; (8000a80 <HAL_UART_MspInit+0x188>)
 800095e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000962:	4a47      	ldr	r2, [pc, #284]	; (8000a80 <HAL_UART_MspInit+0x188>)
 8000964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000968:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800096c:	4b44      	ldr	r3, [pc, #272]	; (8000a80 <HAL_UART_MspInit+0x188>)
 800096e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b41      	ldr	r3, [pc, #260]	; (8000a80 <HAL_UART_MspInit+0x188>)
 800097c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000980:	4a3f      	ldr	r2, [pc, #252]	; (8000a80 <HAL_UART_MspInit+0x188>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800098a:	4b3d      	ldr	r3, [pc, #244]	; (8000a80 <HAL_UART_MspInit+0x188>)
 800098c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000998:	2303      	movs	r3, #3
 800099a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80009b0:	2308      	movs	r3, #8
 80009b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80009ba:	4619      	mov	r1, r3
 80009bc:	4831      	ldr	r0, [pc, #196]	; (8000a84 <HAL_UART_MspInit+0x18c>)
 80009be:	f000 fab3 	bl	8000f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009c2:	e056      	b.n	8000a72 <HAL_UART_MspInit+0x17a>
  else if(huart->Instance==USART1)
 80009c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80009c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a2d      	ldr	r2, [pc, #180]	; (8000a88 <HAL_UART_MspInit+0x190>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d14d      	bne.n	8000a72 <HAL_UART_MspInit+0x17a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009d6:	f04f 0201 	mov.w	r2, #1
 80009da:	f04f 0300 	mov.w	r3, #0
 80009de:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009e2:	2300      	movs	r3, #0
 80009e4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e6:	f107 0318 	add.w	r3, r7, #24
 80009ea:	4618      	mov	r0, r3
 80009ec:	f001 ffe2 	bl	80029b4 <HAL_RCCEx_PeriphCLKConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_UART_MspInit+0x102>
      Error_Handler();
 80009f6:	f7ff ff73 	bl	80008e0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <HAL_UART_MspInit+0x188>)
 80009fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000a00:	4a1f      	ldr	r2, [pc, #124]	; (8000a80 <HAL_UART_MspInit+0x188>)
 8000a02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a06:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000a0a:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <HAL_UART_MspInit+0x188>)
 8000a0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <HAL_UART_MspInit+0x188>)
 8000a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a1e:	4a18      	ldr	r2, [pc, #96]	; (8000a80 <HAL_UART_MspInit+0x188>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <HAL_UART_MspInit+0x188>)
 8000a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a2e:	f003 0201 	and.w	r2, r3, #1
 8000a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000a36:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000a40:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000a44:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a4a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a60:	2307      	movs	r3, #7
 8000a62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <HAL_UART_MspInit+0x18c>)
 8000a6e:	f000 fa5b 	bl	8000f28 <HAL_GPIO_Init>
}
 8000a72:	bf00      	nop
 8000a74:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40004c00 	.word	0x40004c00
 8000a80:	46020c00 	.word	0x46020c00
 8000a84:	42020000 	.word	0x42020000
 8000a88:	40013800 	.word	0x40013800

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <MemManage_Handler+0x4>

08000a9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad8:	f000 f8fe 	bl	8000cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae8:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <_sbrk+0x5c>)
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <_sbrk+0x60>)
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <_sbrk+0x64>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <_sbrk+0x68>)
 8000b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <_sbrk+0x64>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d207      	bcs.n	8000b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b10:	f005 fd44 	bl	800659c <__errno>
 8000b14:	4603      	mov	r3, r0
 8000b16:	220c      	movs	r2, #12
 8000b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1e:	e009      	b.n	8000b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <_sbrk+0x64>)
 8000b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b32:	68fb      	ldr	r3, [r7, #12]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20270000 	.word	0x20270000
 8000b40:	00000400 	.word	0x00000400
 8000b44:	200003a0 	.word	0x200003a0
 8000b48:	200003b8 	.word	0x200003b8

08000b4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b50:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <SystemInit+0x68>)
 8000b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b56:	4a17      	ldr	r2, [pc, #92]	; (8000bb4 <SystemInit+0x68>)
 8000b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <SystemInit+0x6c>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <SystemInit+0x6c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <SystemInit+0x6c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <SystemInit+0x6c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <SystemInit+0x6c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <SystemInit+0x6c>)
 8000b7e:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b82:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b86:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <SystemInit+0x6c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <SystemInit+0x6c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a09      	ldr	r2, [pc, #36]	; (8000bb8 <SystemInit+0x6c>)
 8000b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b98:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <SystemInit+0x6c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <SystemInit+0x68>)
 8000ba2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ba6:	609a      	str	r2, [r3, #8]
  #endif
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00
 8000bb8:	46020c00 	.word	0x46020c00

08000bbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bc0:	f7ff ffc4 	bl	8000b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bc4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bc6:	e003      	b.n	8000bd0 <LoopCopyDataInit>

08000bc8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000bca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bcc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bce:	3104      	adds	r1, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000bd0:	480a      	ldr	r0, [pc, #40]	; (8000bfc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000bd4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bd6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bd8:	d3f6      	bcc.n	8000bc8 <CopyDataInit>
	ldr	r2, =_sbss
 8000bda:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000bdc:	e002      	b.n	8000be4 <LoopFillZerobss>

08000bde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bde:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000be0:	f842 3b04 	str.w	r3, [r2], #4

08000be4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <LoopForever+0x16>)
	cmp	r2, r3
 8000be6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000be8:	d3f9      	bcc.n	8000bde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bea:	f005 fcdd 	bl	80065a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bee:	f7ff fd31 	bl	8000654 <main>

08000bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf2:	e7fe      	b.n	8000bf2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000bf4:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8000bf8:	080070dc 	.word	0x080070dc
	ldr	r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c00:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000c04:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000c08:	200003b5 	.word	0x200003b5

08000c0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC1_2_IRQHandler>
	...

08000c10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_Init+0x4c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <HAL_Init+0x4c>)
 8000c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c20:	2003      	movs	r0, #3
 8000c22:	f000 f94f 	bl	8000ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000c26:	f001 fce1 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <HAL_Init+0x50>)
 8000c2e:	6a1b      	ldr	r3, [r3, #32]
 8000c30:	f003 030f 	and.w	r3, r3, #15
 8000c34:	490b      	ldr	r1, [pc, #44]	; (8000c64 <HAL_Init+0x54>)
 8000c36:	5ccb      	ldrb	r3, [r1, r3]
 8000c38:	fa22 f303 	lsr.w	r3, r2, r3
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <HAL_Init+0x58>)
 8000c3e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c40:	200f      	movs	r0, #15
 8000c42:	f000 f813 	bl	8000c6c <HAL_InitTick>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e002      	b.n	8000c56 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c50:	f7ff fe4b 	bl	80008ea <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40022000 	.word	0x40022000
 8000c60:	46020c00 	.word	0x46020c00
 8000c64:	08006f98 	.word	0x08006f98
 8000c68:	20000000 	.word	0x20000000

08000c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <HAL_InitTick+0x60>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d101      	bne.n	8000c80 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e021      	b.n	8000cc4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <HAL_InitTick+0x64>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_InitTick+0x60>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 f939 	bl	8000f0e <HAL_SYSTICK_Config>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00e      	b.n	8000cc4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b0f      	cmp	r3, #15
 8000caa:	d80a      	bhi.n	8000cc2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cac:	2200      	movs	r2, #0
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f000 f911 	bl	8000eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb8:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <HAL_InitTick+0x68>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e000      	b.n	8000cc4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000004 	.word	0x20000004

08000cd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x20>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x24>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <HAL_IncTick+0x24>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	200003a4 	.word	0x200003a4

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	200003a4 	.word	0x200003a4

08000d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d20:	f7ff ffee 	bl	8000d00 <HAL_GetTick>
 8000d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d30:	d005      	beq.n	8000d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_Delay+0x44>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d3e:	bf00      	nop
 8000d40:	f7ff ffde 	bl	8000d00 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d8f7      	bhi.n	8000d40 <HAL_Delay+0x28>
  {
  }
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008

08000d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d92:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	60d3      	str	r3, [r2, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	f003 0307 	and.w	r3, r3, #7
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000dd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	db0a      	blt.n	8000dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	490c      	ldr	r1, [pc, #48]	; (8000e10 <__NVIC_SetPriority+0x4c>)
 8000dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000de2:	0112      	lsls	r2, r2, #4
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	440b      	add	r3, r1
 8000de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dec:	e00a      	b.n	8000e04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4908      	ldr	r1, [pc, #32]	; (8000e14 <__NVIC_SetPriority+0x50>)
 8000df4:	88fb      	ldrh	r3, [r7, #6]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	3b04      	subs	r3, #4
 8000dfc:	0112      	lsls	r2, r2, #4
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	440b      	add	r3, r1
 8000e02:	761a      	strb	r2, [r3, #24]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000e100 	.word	0xe000e100
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f1c3 0307 	rsb	r3, r3, #7
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	bf28      	it	cs
 8000e36:	2304      	movcs	r3, #4
 8000e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	2b06      	cmp	r3, #6
 8000e40:	d902      	bls.n	8000e48 <NVIC_EncodePriority+0x30>
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3b03      	subs	r3, #3
 8000e46:	e000      	b.n	8000e4a <NVIC_EncodePriority+0x32>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43da      	mvns	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e60:	f04f 31ff 	mov.w	r1, #4294967295
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	43d9      	mvns	r1, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	4313      	orrs	r3, r2
         );
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3724      	adds	r7, #36	; 0x24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
	...

08000e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e90:	d301      	bcc.n	8000e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00f      	b.n	8000eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <SysTick_Config+0x40>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9e:	210f      	movs	r1, #15
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea4:	f7ff ff8e 	bl	8000dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <SysTick_Config+0x40>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eae:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <SysTick_Config+0x40>)
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	e000e010 	.word	0xe000e010

08000ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ff47 	bl	8000d60 <__NVIC_SetPriorityGrouping>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
 8000ee6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee8:	f7ff ff5e 	bl	8000da8 <__NVIC_GetPriorityGrouping>
 8000eec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	6978      	ldr	r0, [r7, #20]
 8000ef4:	f7ff ff90 	bl	8000e18 <NVIC_EncodePriority>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff5f 	bl	8000dc4 <__NVIC_SetPriority>
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffb2 	bl	8000e80 <SysTick_Config>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f3a:	e1ba      	b.n	80012b2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	2101      	movs	r1, #1
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 81aa 	beq.w	80012ac <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a55      	ldr	r2, [pc, #340]	; (80010b0 <HAL_GPIO_Init+0x188>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d15d      	bne.n	800101c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000f66:	2201      	movs	r2, #1
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69fa      	ldr	r2, [r7, #28]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0201 	and.w	r2, r3, #1
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69fa      	ldr	r2, [r7, #28]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69fa      	ldr	r2, [r7, #28]
 8000f8e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000f90:	4a48      	ldr	r2, [pc, #288]	; (80010b4 <HAL_GPIO_Init+0x18c>)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f98:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000f9a:	4a46      	ldr	r2, [pc, #280]	; (80010b4 <HAL_GPIO_Init+0x18c>)
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	4413      	add	r3, r2
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	08da      	lsrs	r2, r3, #3
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	3208      	adds	r2, #8
 8000fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69fa      	ldr	r2, [r7, #28]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	f003 0307 	and.w	r3, r3, #7
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	220b      	movs	r2, #11
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69fa      	ldr	r2, [r7, #28]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	08da      	lsrs	r2, r3, #3
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	3208      	adds	r2, #8
 8000fe6:	69f9      	ldr	r1, [r7, #28]
 8000fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69fa      	ldr	r2, [r7, #28]
 8001000:	4013      	ands	r3, r2
 8001002:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	2202      	movs	r2, #2
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	69fa      	ldr	r2, [r7, #28]
 8001010:	4313      	orrs	r3, r2
 8001012:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	69fa      	ldr	r2, [r7, #28]
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	e067      	b.n	80010ec <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x104>
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b12      	cmp	r3, #18
 800102a:	d145      	bne.n	80010b8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	08da      	lsrs	r2, r3, #3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3208      	adds	r2, #8
 8001034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001038:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	220f      	movs	r2, #15
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69fa      	ldr	r2, [r7, #28]
 800104c:	4013      	ands	r3, r2
 800104e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	f003 020f 	and.w	r2, r3, #15
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69fa      	ldr	r2, [r7, #28]
 8001066:	4313      	orrs	r3, r2
 8001068:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	08da      	lsrs	r2, r3, #3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3208      	adds	r2, #8
 8001072:	69f9      	ldr	r1, [r7, #28]
 8001074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	2203      	movs	r2, #3
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	4013      	ands	r3, r2
 800108e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0203 	and.w	r2, r3, #3
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69fa      	ldr	r2, [r7, #28]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	69fa      	ldr	r2, [r7, #28]
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	e01e      	b.n	80010ec <HAL_GPIO_Init+0x1c4>
 80010ae:	bf00      	nop
 80010b0:	46020000 	.word	0x46020000
 80010b4:	08006ff0 	.word	0x08006ff0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69fa      	ldr	r2, [r7, #28]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0203 	and.w	r2, r3, #3
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69fa      	ldr	r2, [r7, #28]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	69fa      	ldr	r2, [r7, #28]
 80010ea:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d00b      	beq.n	800110c <HAL_GPIO_Init+0x1e4>
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d007      	beq.n	800110c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001100:	2b11      	cmp	r3, #17
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b12      	cmp	r3, #18
 800110a:	d130      	bne.n	800116e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69fa      	ldr	r2, [r7, #28]
 8001120:	4013      	ands	r3, r2
 8001122:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	68da      	ldr	r2, [r3, #12]
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69fa      	ldr	r2, [r7, #28]
 8001132:	4313      	orrs	r3, r2
 8001134:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	69fa      	ldr	r2, [r7, #28]
 800113a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001142:	2201      	movs	r2, #1
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69fa      	ldr	r2, [r7, #28]
 800114e:	4013      	ands	r3, r2
 8001150:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	091b      	lsrs	r3, r3, #4
 8001158:	f003 0201 	and.w	r2, r3, #1
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	69fa      	ldr	r2, [r7, #28]
 8001164:	4313      	orrs	r3, r2
 8001166:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b03      	cmp	r3, #3
 8001174:	d017      	beq.n	80011a6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2203      	movs	r2, #3
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	69fa      	ldr	r2, [r7, #28]
 800118a:	4013      	ands	r3, r2
 800118c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	69fa      	ldr	r2, [r7, #28]
 800119c:	4313      	orrs	r3, r2
 800119e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	69fa      	ldr	r2, [r7, #28]
 80011a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d07c      	beq.n	80012ac <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80011b2:	4a47      	ldr	r2, [pc, #284]	; (80012d0 <HAL_GPIO_Init+0x3a8>)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	3318      	adds	r3, #24
 80011ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011be:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	220f      	movs	r2, #15
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69fa      	ldr	r2, [r7, #28]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	0a9a      	lsrs	r2, r3, #10
 80011da:	4b3e      	ldr	r3, [pc, #248]	; (80012d4 <HAL_GPIO_Init+0x3ac>)
 80011dc:	4013      	ands	r3, r2
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	f002 0203 	and.w	r2, r2, #3
 80011e4:	00d2      	lsls	r2, r2, #3
 80011e6:	4093      	lsls	r3, r2
 80011e8:	69fa      	ldr	r2, [r7, #28]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80011ee:	4938      	ldr	r1, [pc, #224]	; (80012d0 <HAL_GPIO_Init+0x3a8>)
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	3318      	adds	r3, #24
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80011fc:	4b34      	ldr	r3, [pc, #208]	; (80012d0 <HAL_GPIO_Init+0x3a8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	43db      	mvns	r3, r3
 8001206:	69fa      	ldr	r2, [r7, #28]
 8001208:	4013      	ands	r3, r2
 800120a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001218:	69fa      	ldr	r2, [r7, #28]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4313      	orrs	r3, r2
 800121e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001220:	4a2b      	ldr	r2, [pc, #172]	; (80012d0 <HAL_GPIO_Init+0x3a8>)
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001226:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <HAL_GPIO_Init+0x3a8>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	43db      	mvns	r3, r3
 8001230:	69fa      	ldr	r2, [r7, #28]
 8001232:	4013      	ands	r3, r2
 8001234:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4313      	orrs	r3, r2
 8001248:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800124a:	4a21      	ldr	r2, [pc, #132]	; (80012d0 <HAL_GPIO_Init+0x3a8>)
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <HAL_GPIO_Init+0x3a8>)
 8001252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001256:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	43db      	mvns	r3, r3
 800125c:	69fa      	ldr	r2, [r7, #28]
 800125e:	4013      	ands	r3, r2
 8001260:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4313      	orrs	r3, r2
 8001274:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001276:	4a16      	ldr	r2, [pc, #88]	; (80012d0 <HAL_GPIO_Init+0x3a8>)
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <HAL_GPIO_Init+0x3a8>)
 8001280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001284:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43db      	mvns	r3, r3
 800128a:	69fa      	ldr	r2, [r7, #28]
 800128c:	4013      	ands	r3, r2
 800128e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800129c:	69fa      	ldr	r2, [r7, #28]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80012a4:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <HAL_GPIO_Init+0x3a8>)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	3301      	adds	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	fa22 f303 	lsr.w	r3, r2, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f47f ae3d 	bne.w	8000f3c <HAL_GPIO_Init+0x14>
  }
}
 80012c2:	bf00      	nop
 80012c4:	bf00      	nop
 80012c6:	3724      	adds	r7, #36	; 0x24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	46022000 	.word	0x46022000
 80012d4:	002f7f7f 	.word	0x002f7f7f

080012d8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012e0:	2300      	movs	r3, #0
 80012e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	e007      	b.n	8001306 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80012f6:	4b07      	ldr	r3, [pc, #28]	; (8001314 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 0204 	bic.w	r2, r3, #4
 80012fe:	4905      	ldr	r1, [pc, #20]	; (8001314 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4313      	orrs	r3, r2
 8001304:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001306:	7bfb      	ldrb	r3, [r7, #15]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	40030400 	.word	0x40030400

08001318 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_ICACHE_Enable+0x1c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <HAL_ICACHE_Enable+0x1c>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	40030400 	.word	0x40030400

08001338 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001340:	4b39      	ldr	r3, [pc, #228]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001344:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001348:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	429a      	cmp	r2, r3
 8001350:	d10b      	bne.n	800136a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001358:	d905      	bls.n	8001366 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800135a:	4b33      	ldr	r3, [pc, #204]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	4a32      	ldr	r2, [pc, #200]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001364:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e057      	b.n	800141a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001370:	d90a      	bls.n	8001388 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8001372:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4313      	orrs	r3, r2
 800137e:	4a2a      	ldr	r2, [pc, #168]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001384:	60d3      	str	r3, [r2, #12]
 8001386:	e007      	b.n	8001398 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001388:	4b27      	ldr	r3, [pc, #156]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001390:	4925      	ldr	r1, [pc, #148]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4313      	orrs	r3, r2
 8001396:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001398:	4b24      	ldr	r3, [pc, #144]	; (800142c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a24      	ldr	r2, [pc, #144]	; (8001430 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800139e:	fba2 2303 	umull	r2, r3, r2, r3
 80013a2:	099b      	lsrs	r3, r3, #6
 80013a4:	2232      	movs	r2, #50	; 0x32
 80013a6:	fb02 f303 	mul.w	r3, r2, r3
 80013aa:	4a21      	ldr	r2, [pc, #132]	; (8001430 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80013ac:	fba2 2303 	umull	r2, r3, r2, r3
 80013b0:	099b      	lsrs	r3, r3, #6
 80013b2:	3301      	adds	r3, #1
 80013b4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80013b6:	e002      	b.n	80013be <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d102      	bne.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x98>
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1f3      	bne.n	80013b8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d01b      	beq.n	800140e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a15      	ldr	r2, [pc, #84]	; (8001430 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80013dc:	fba2 2303 	umull	r2, r3, r2, r3
 80013e0:	099b      	lsrs	r3, r3, #6
 80013e2:	2232      	movs	r2, #50	; 0x32
 80013e4:	fb02 f303 	mul.w	r3, r2, r3
 80013e8:	4a11      	ldr	r2, [pc, #68]	; (8001430 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80013ea:	fba2 2303 	umull	r2, r3, r2, r3
 80013ee:	099b      	lsrs	r3, r3, #6
 80013f0:	3301      	adds	r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80013f4:	e002      	b.n	80013fc <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80013fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f3      	bne.n	80013f6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e000      	b.n	800141a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	46020800 	.word	0x46020800
 800142c:	20000000 	.word	0x20000000
 8001430:	10624dd3 	.word	0x10624dd3

08001434 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <HAL_PWREx_GetVoltageRange+0x18>)
 800143a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800143c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	46020800 	.word	0x46020800

08001450 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08e      	sub	sp, #56	; 0x38
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001458:	2300      	movs	r3, #0
 800145a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d102      	bne.n	800146a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	f000 bec8 	b.w	80021fa <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800146a:	4b99      	ldr	r3, [pc, #612]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001474:	4b96      	ldr	r3, [pc, #600]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0310 	and.w	r3, r3, #16
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 816c 	beq.w	8001764 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800148c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800148e:	2b00      	cmp	r3, #0
 8001490:	d007      	beq.n	80014a2 <HAL_RCC_OscConfig+0x52>
 8001492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001494:	2b0c      	cmp	r3, #12
 8001496:	f040 80de 	bne.w	8001656 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800149a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149c:	2b01      	cmp	r3, #1
 800149e:	f040 80da 	bne.w	8001656 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d102      	bne.n	80014b0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	f000 bea5 	b.w	80021fa <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014b4:	4b86      	ldr	r3, [pc, #536]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d004      	beq.n	80014ca <HAL_RCC_OscConfig+0x7a>
 80014c0:	4b83      	ldr	r3, [pc, #524]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80014c8:	e005      	b.n	80014d6 <HAL_RCC_OscConfig+0x86>
 80014ca:	4b81      	ldr	r3, [pc, #516]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 80014cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014d0:	041b      	lsls	r3, r3, #16
 80014d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d255      	bcs.n	8001586 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80014da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d10a      	bne.n	80014f6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	4618      	mov	r0, r3
 80014e6:	f001 f9df 	bl	80028a8 <RCC_SetFlashLatencyFromMSIRange>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d002      	beq.n	80014f6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	f000 be82 	b.w	80021fa <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80014f6:	4b76      	ldr	r3, [pc, #472]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	4a75      	ldr	r2, [pc, #468]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 80014fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001500:	6093      	str	r3, [r2, #8]
 8001502:	4b73      	ldr	r3, [pc, #460]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	4970      	ldr	r1, [pc, #448]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001510:	4313      	orrs	r3, r2
 8001512:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800151c:	d309      	bcc.n	8001532 <HAL_RCC_OscConfig+0xe2>
 800151e:	4b6c      	ldr	r3, [pc, #432]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	f023 021f 	bic.w	r2, r3, #31
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	4969      	ldr	r1, [pc, #420]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 800152c:	4313      	orrs	r3, r2
 800152e:	60cb      	str	r3, [r1, #12]
 8001530:	e07e      	b.n	8001630 <HAL_RCC_OscConfig+0x1e0>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	2b00      	cmp	r3, #0
 8001538:	da0a      	bge.n	8001550 <HAL_RCC_OscConfig+0x100>
 800153a:	4b65      	ldr	r3, [pc, #404]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	015b      	lsls	r3, r3, #5
 8001548:	4961      	ldr	r1, [pc, #388]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 800154a:	4313      	orrs	r3, r2
 800154c:	60cb      	str	r3, [r1, #12]
 800154e:	e06f      	b.n	8001630 <HAL_RCC_OscConfig+0x1e0>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001558:	d30a      	bcc.n	8001570 <HAL_RCC_OscConfig+0x120>
 800155a:	4b5d      	ldr	r3, [pc, #372]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	029b      	lsls	r3, r3, #10
 8001568:	4959      	ldr	r1, [pc, #356]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 800156a:	4313      	orrs	r3, r2
 800156c:	60cb      	str	r3, [r1, #12]
 800156e:	e05f      	b.n	8001630 <HAL_RCC_OscConfig+0x1e0>
 8001570:	4b57      	ldr	r3, [pc, #348]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	03db      	lsls	r3, r3, #15
 800157e:	4954      	ldr	r1, [pc, #336]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001580:	4313      	orrs	r3, r2
 8001582:	60cb      	str	r3, [r1, #12]
 8001584:	e054      	b.n	8001630 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001586:	4b52      	ldr	r3, [pc, #328]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	4a51      	ldr	r2, [pc, #324]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 800158c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001590:	6093      	str	r3, [r2, #8]
 8001592:	4b4f      	ldr	r3, [pc, #316]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	494c      	ldr	r1, [pc, #304]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80015ac:	d309      	bcc.n	80015c2 <HAL_RCC_OscConfig+0x172>
 80015ae:	4b48      	ldr	r3, [pc, #288]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	f023 021f 	bic.w	r2, r3, #31
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	4945      	ldr	r1, [pc, #276]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	60cb      	str	r3, [r1, #12]
 80015c0:	e028      	b.n	8001614 <HAL_RCC_OscConfig+0x1c4>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	da0a      	bge.n	80015e0 <HAL_RCC_OscConfig+0x190>
 80015ca:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	015b      	lsls	r3, r3, #5
 80015d8:	493d      	ldr	r1, [pc, #244]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	60cb      	str	r3, [r1, #12]
 80015de:	e019      	b.n	8001614 <HAL_RCC_OscConfig+0x1c4>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015e8:	d30a      	bcc.n	8001600 <HAL_RCC_OscConfig+0x1b0>
 80015ea:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	029b      	lsls	r3, r3, #10
 80015f8:	4935      	ldr	r1, [pc, #212]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	60cb      	str	r3, [r1, #12]
 80015fe:	e009      	b.n	8001614 <HAL_RCC_OscConfig+0x1c4>
 8001600:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	03db      	lsls	r3, r3, #15
 800160e:	4930      	ldr	r1, [pc, #192]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001610:	4313      	orrs	r3, r2
 8001612:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10a      	bne.n	8001630 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	4618      	mov	r0, r3
 8001620:	f001 f942 	bl	80028a8 <RCC_SetFlashLatencyFromMSIRange>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d002      	beq.n	8001630 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	f000 bde5 	b.w	80021fa <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001630:	f001 f8e4 	bl	80027fc <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001634:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <HAL_RCC_OscConfig+0x284>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fb17 	bl	8000c6c <HAL_InitTick>
 800163e:	4603      	mov	r3, r0
 8001640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8001644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 808a 	beq.w	8001762 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800164e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001652:	f000 bdd2 	b.w	80021fa <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d066      	beq.n	800172c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800165e:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a1b      	ldr	r2, [pc, #108]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800166a:	f7ff fb49 	bl	8000d00 <HAL_GetTick>
 800166e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001670:	e009      	b.n	8001686 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001672:	f7ff fb45 	bl	8000d00 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d902      	bls.n	8001686 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	f000 bdba 	b.w	80021fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0ef      	beq.n	8001672 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	4a0e      	ldr	r2, [pc, #56]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 8001698:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800169c:	6093      	str	r3, [r2, #8]
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	4909      	ldr	r1, [pc, #36]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80016b8:	d30e      	bcc.n	80016d8 <HAL_RCC_OscConfig+0x288>
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f023 021f 	bic.w	r2, r3, #31
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	4902      	ldr	r1, [pc, #8]	; (80016d0 <HAL_RCC_OscConfig+0x280>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	60cb      	str	r3, [r1, #12]
 80016cc:	e04a      	b.n	8001764 <HAL_RCC_OscConfig+0x314>
 80016ce:	bf00      	nop
 80016d0:	46020c00 	.word	0x46020c00
 80016d4:	20000004 	.word	0x20000004
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	2b00      	cmp	r3, #0
 80016de:	da0a      	bge.n	80016f6 <HAL_RCC_OscConfig+0x2a6>
 80016e0:	4b98      	ldr	r3, [pc, #608]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	015b      	lsls	r3, r3, #5
 80016ee:	4995      	ldr	r1, [pc, #596]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	60cb      	str	r3, [r1, #12]
 80016f4:	e036      	b.n	8001764 <HAL_RCC_OscConfig+0x314>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016fe:	d30a      	bcc.n	8001716 <HAL_RCC_OscConfig+0x2c6>
 8001700:	4b90      	ldr	r3, [pc, #576]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	029b      	lsls	r3, r3, #10
 800170e:	498d      	ldr	r1, [pc, #564]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001710:	4313      	orrs	r3, r2
 8001712:	60cb      	str	r3, [r1, #12]
 8001714:	e026      	b.n	8001764 <HAL_RCC_OscConfig+0x314>
 8001716:	4b8b      	ldr	r3, [pc, #556]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	03db      	lsls	r3, r3, #15
 8001724:	4987      	ldr	r1, [pc, #540]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001726:	4313      	orrs	r3, r2
 8001728:	60cb      	str	r3, [r1, #12]
 800172a:	e01b      	b.n	8001764 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800172c:	4b85      	ldr	r3, [pc, #532]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a84      	ldr	r2, [pc, #528]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001732:	f023 0301 	bic.w	r3, r3, #1
 8001736:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001738:	f7ff fae2 	bl	8000d00 <HAL_GetTick>
 800173c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800173e:	e009      	b.n	8001754 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001740:	f7ff fade 	bl	8000d00 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d902      	bls.n	8001754 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	f000 bd53 	b.w	80021fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001754:	4b7b      	ldr	r3, [pc, #492]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1ef      	bne.n	8001740 <HAL_RCC_OscConfig+0x2f0>
 8001760:	e000      	b.n	8001764 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001762:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 808b 	beq.w	8001888 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001774:	2b08      	cmp	r3, #8
 8001776:	d005      	beq.n	8001784 <HAL_RCC_OscConfig+0x334>
 8001778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177a:	2b0c      	cmp	r3, #12
 800177c:	d109      	bne.n	8001792 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800177e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001780:	2b03      	cmp	r3, #3
 8001782:	d106      	bne.n	8001792 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d17d      	bne.n	8001888 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	f000 bd34 	b.w	80021fa <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800179a:	d106      	bne.n	80017aa <HAL_RCC_OscConfig+0x35a>
 800179c:	4b69      	ldr	r3, [pc, #420]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a68      	ldr	r2, [pc, #416]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80017a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	e041      	b.n	800182e <HAL_RCC_OscConfig+0x3de>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017b2:	d112      	bne.n	80017da <HAL_RCC_OscConfig+0x38a>
 80017b4:	4b63      	ldr	r3, [pc, #396]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a62      	ldr	r2, [pc, #392]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80017ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	4b60      	ldr	r3, [pc, #384]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a5f      	ldr	r2, [pc, #380]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80017c6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b5d      	ldr	r3, [pc, #372]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a5c      	ldr	r2, [pc, #368]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80017d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	e029      	b.n	800182e <HAL_RCC_OscConfig+0x3de>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80017e2:	d112      	bne.n	800180a <HAL_RCC_OscConfig+0x3ba>
 80017e4:	4b57      	ldr	r3, [pc, #348]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a56      	ldr	r2, [pc, #344]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80017ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b54      	ldr	r3, [pc, #336]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a53      	ldr	r2, [pc, #332]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80017f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b51      	ldr	r3, [pc, #324]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a50      	ldr	r2, [pc, #320]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	e011      	b.n	800182e <HAL_RCC_OscConfig+0x3de>
 800180a:	4b4e      	ldr	r3, [pc, #312]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a4d      	ldr	r2, [pc, #308]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	4b4b      	ldr	r3, [pc, #300]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a4a      	ldr	r2, [pc, #296]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 800181c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b48      	ldr	r3, [pc, #288]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a47      	ldr	r2, [pc, #284]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001828:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800182c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d014      	beq.n	8001860 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8001836:	f7ff fa63 	bl	8000d00 <HAL_GetTick>
 800183a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800183c:	e009      	b.n	8001852 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800183e:	f7ff fa5f 	bl	8000d00 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b64      	cmp	r3, #100	; 0x64
 800184a:	d902      	bls.n	8001852 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	f000 bcd4 	b.w	80021fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001852:	4b3c      	ldr	r3, [pc, #240]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0ef      	beq.n	800183e <HAL_RCC_OscConfig+0x3ee>
 800185e:	e013      	b.n	8001888 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001860:	f7ff fa4e 	bl	8000d00 <HAL_GetTick>
 8001864:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001866:	e009      	b.n	800187c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001868:	f7ff fa4a 	bl	8000d00 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b64      	cmp	r3, #100	; 0x64
 8001874:	d902      	bls.n	800187c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	f000 bcbf 	b.w	80021fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800187c:	4b31      	ldr	r3, [pc, #196]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1ef      	bne.n	8001868 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d05f      	beq.n	8001954 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001896:	2b04      	cmp	r3, #4
 8001898:	d005      	beq.n	80018a6 <HAL_RCC_OscConfig+0x456>
 800189a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189c:	2b0c      	cmp	r3, #12
 800189e:	d114      	bne.n	80018ca <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d111      	bne.n	80018ca <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d102      	bne.n	80018b4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	f000 bca3 	b.w	80021fa <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80018b4:	4b23      	ldr	r3, [pc, #140]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	041b      	lsls	r3, r3, #16
 80018c2:	4920      	ldr	r1, [pc, #128]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80018c8:	e044      	b.n	8001954 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d024      	beq.n	800191c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80018d2:	4b1c      	ldr	r3, [pc, #112]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a1b      	ldr	r2, [pc, #108]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80018d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018dc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80018de:	f7ff fa0f 	bl	8000d00 <HAL_GetTick>
 80018e2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018e4:	e009      	b.n	80018fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e6:	f7ff fa0b 	bl	8000d00 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d902      	bls.n	80018fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	f000 bc80 	b.w	80021fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018fa:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0ef      	beq.n	80018e6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	041b      	lsls	r3, r3, #16
 8001914:	490b      	ldr	r1, [pc, #44]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001916:	4313      	orrs	r3, r2
 8001918:	610b      	str	r3, [r1, #16]
 800191a:	e01b      	b.n	8001954 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a08      	ldr	r2, [pc, #32]	; (8001944 <HAL_RCC_OscConfig+0x4f4>)
 8001922:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001926:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001928:	f7ff f9ea 	bl	8000d00 <HAL_GetTick>
 800192c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800192e:	e00b      	b.n	8001948 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001930:	f7ff f9e6 	bl	8000d00 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d904      	bls.n	8001948 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	f000 bc5b 	b.w	80021fa <HAL_RCC_OscConfig+0xdaa>
 8001944:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001948:	4baf      	ldr	r3, [pc, #700]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1ed      	bne.n	8001930 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 80c8 	beq.w	8001af2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001968:	4ba7      	ldr	r3, [pc, #668]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 800196a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	2b00      	cmp	r3, #0
 8001974:	d111      	bne.n	800199a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	4ba4      	ldr	r3, [pc, #656]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800197c:	4aa2      	ldr	r2, [pc, #648]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 800197e:	f043 0304 	orr.w	r3, r3, #4
 8001982:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001986:	4ba0      	ldr	r3, [pc, #640]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001994:	2301      	movs	r3, #1
 8001996:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800199a:	4b9c      	ldr	r3, [pc, #624]	; (8001c0c <HAL_RCC_OscConfig+0x7bc>)
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d119      	bne.n	80019da <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80019a6:	4b99      	ldr	r3, [pc, #612]	; (8001c0c <HAL_RCC_OscConfig+0x7bc>)
 80019a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019aa:	4a98      	ldr	r2, [pc, #608]	; (8001c0c <HAL_RCC_OscConfig+0x7bc>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b2:	f7ff f9a5 	bl	8000d00 <HAL_GetTick>
 80019b6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80019b8:	e009      	b.n	80019ce <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ba:	f7ff f9a1 	bl	8000d00 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d902      	bls.n	80019ce <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	f000 bc16 	b.w	80021fa <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80019ce:	4b8f      	ldr	r3, [pc, #572]	; (8001c0c <HAL_RCC_OscConfig+0x7bc>)
 80019d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0ef      	beq.n	80019ba <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d05f      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80019e2:	4b89      	ldr	r3, [pc, #548]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 80019e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019e8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699a      	ldr	r2, [r3, #24]
 80019ee:	6a3b      	ldr	r3, [r7, #32]
 80019f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d037      	beq.n	8001a68 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d006      	beq.n	8001a10 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e3f4      	b.n	80021fa <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d01b      	beq.n	8001a52 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8001a1a:	4b7b      	ldr	r3, [pc, #492]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001a1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a20:	4a79      	ldr	r2, [pc, #484]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001a22:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001a26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8001a2a:	f7ff f969 	bl	8000d00 <HAL_GetTick>
 8001a2e:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a32:	f7ff f965 	bl	8000d00 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b05      	cmp	r3, #5
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e3da      	b.n	80021fa <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001a44:	4b70      	ldr	r3, [pc, #448]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001a46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1ef      	bne.n	8001a32 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001a52:	4b6d      	ldr	r3, [pc, #436]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001a54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a58:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4969      	ldr	r1, [pc, #420]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001a68:	4b67      	ldr	r3, [pc, #412]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001a6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a6e:	4a66      	ldr	r2, [pc, #408]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001a70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a74:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001a78:	f7ff f942 	bl	8000d00 <HAL_GetTick>
 8001a7c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a80:	f7ff f93e 	bl	8000d00 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b05      	cmp	r3, #5
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e3b3      	b.n	80021fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001a92:	4b5d      	ldr	r3, [pc, #372]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001a94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0ef      	beq.n	8001a80 <HAL_RCC_OscConfig+0x630>
 8001aa0:	e01b      	b.n	8001ada <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001aa2:	4b59      	ldr	r3, [pc, #356]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001aa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aa8:	4a57      	ldr	r2, [pc, #348]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001aaa:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001aae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001ab2:	f7ff f925 	bl	8000d00 <HAL_GetTick>
 8001ab6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aba:	f7ff f921 	bl	8000d00 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e396      	b.n	80021fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001acc:	4b4e      	ldr	r3, [pc, #312]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001ace:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ad2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1ef      	bne.n	8001aba <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ada:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d107      	bne.n	8001af2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae2:	4b49      	ldr	r3, [pc, #292]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae8:	4a47      	ldr	r2, [pc, #284]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001aea:	f023 0304 	bic.w	r3, r3, #4
 8001aee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8111 	beq.w	8001d22 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b06:	4b40      	ldr	r3, [pc, #256]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d111      	bne.n	8001b38 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b14:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b1a:	4a3b      	ldr	r2, [pc, #236]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001b1c:	f043 0304 	orr.w	r3, r3, #4
 8001b20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001b24:	4b38      	ldr	r3, [pc, #224]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001b32:	2301      	movs	r3, #1
 8001b34:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001b38:	4b34      	ldr	r3, [pc, #208]	; (8001c0c <HAL_RCC_OscConfig+0x7bc>)
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d118      	bne.n	8001b76 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001b44:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <HAL_RCC_OscConfig+0x7bc>)
 8001b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b48:	4a30      	ldr	r2, [pc, #192]	; (8001c0c <HAL_RCC_OscConfig+0x7bc>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b50:	f7ff f8d6 	bl	8000d00 <HAL_GetTick>
 8001b54:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b58:	f7ff f8d2 	bl	8000d00 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e347      	b.n	80021fa <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001b6a:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <HAL_RCC_OscConfig+0x7bc>)
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d01f      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d010      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b8e:	4b1e      	ldr	r3, [pc, #120]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b94:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001b96:	f043 0304 	orr.w	r3, r3, #4
 8001b9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001ba0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ba4:	4a18      	ldr	r2, [pc, #96]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bae:	e018      	b.n	8001be2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001bb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bb6:	4a14      	ldr	r2, [pc, #80]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bc0:	e00f      	b.n	8001be2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001bc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bc8:	4a0f      	ldr	r2, [pc, #60]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001bca:	f023 0301 	bic.w	r3, r3, #1
 8001bce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001bd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bd8:	4a0b      	ldr	r2, [pc, #44]	; (8001c08 <HAL_RCC_OscConfig+0x7b8>)
 8001bda:	f023 0304 	bic.w	r3, r3, #4
 8001bde:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d057      	beq.n	8001c9a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8001bea:	f7ff f889 	bl	8000d00 <HAL_GetTick>
 8001bee:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bf0:	e00e      	b.n	8001c10 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf2:	f7ff f885 	bl	8000d00 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d905      	bls.n	8001c10 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e2f8      	b.n	80021fa <HAL_RCC_OscConfig+0xdaa>
 8001c08:	46020c00 	.word	0x46020c00
 8001c0c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c10:	4b9c      	ldr	r3, [pc, #624]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001c12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0e9      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d01b      	beq.n	8001c62 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c2a:	4b96      	ldr	r3, [pc, #600]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001c2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c30:	4a94      	ldr	r2, [pc, #592]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001c3a:	e00a      	b.n	8001c52 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3c:	f7ff f860 	bl	8000d00 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e2d3      	b.n	80021fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001c52:	4b8c      	ldr	r3, [pc, #560]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0ed      	beq.n	8001c3c <HAL_RCC_OscConfig+0x7ec>
 8001c60:	e053      	b.n	8001d0a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c62:	4b88      	ldr	r3, [pc, #544]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c68:	4a86      	ldr	r2, [pc, #536]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001c6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c72:	e00a      	b.n	8001c8a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c74:	f7ff f844 	bl	8000d00 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e2b7      	b.n	80021fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c8a:	4b7e      	ldr	r3, [pc, #504]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001c8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1ed      	bne.n	8001c74 <HAL_RCC_OscConfig+0x824>
 8001c98:	e037      	b.n	8001d0a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001c9a:	f7ff f831 	bl	8000d00 <HAL_GetTick>
 8001c9e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ca0:	e00a      	b.n	8001cb8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca2:	f7ff f82d 	bl	8000d00 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e2a0      	b.n	80021fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb8:	4b72      	ldr	r3, [pc, #456]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001cba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1ed      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001cc6:	4b6f      	ldr	r3, [pc, #444]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001cc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01a      	beq.n	8001d0a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001cd4:	4b6b      	ldr	r3, [pc, #428]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001cd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cda:	4a6a      	ldr	r2, [pc, #424]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001cdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ce0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ce4:	e00a      	b.n	8001cfc <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce6:	f7ff f80b 	bl	8000d00 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e27e      	b.n	80021fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001cfc:	4b61      	ldr	r3, [pc, #388]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001cfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1ed      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d0a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d107      	bne.n	8001d22 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d12:	4b5c      	ldr	r3, [pc, #368]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d18:	4a5a      	ldr	r2, [pc, #360]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001d1a:	f023 0304 	bic.w	r3, r3, #4
 8001d1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0320 	and.w	r3, r3, #32
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d036      	beq.n	8001d9c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d019      	beq.n	8001d6a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001d36:	4b53      	ldr	r3, [pc, #332]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a52      	ldr	r2, [pc, #328]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001d3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d40:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001d42:	f7fe ffdd 	bl	8000d00 <HAL_GetTick>
 8001d46:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d4a:	f7fe ffd9 	bl	8000d00 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e24e      	b.n	80021fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001d5c:	4b49      	ldr	r3, [pc, #292]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x8fa>
 8001d68:	e018      	b.n	8001d9c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001d6a:	4b46      	ldr	r3, [pc, #280]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a45      	ldr	r2, [pc, #276]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001d70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d74:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001d76:	f7fe ffc3 	bl	8000d00 <HAL_GetTick>
 8001d7a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d7e:	f7fe ffbf 	bl	8000d00 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e234      	b.n	80021fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001d90:	4b3c      	ldr	r3, [pc, #240]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f0      	bne.n	8001d7e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d036      	beq.n	8001e16 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d019      	beq.n	8001de4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001db0:	4b34      	ldr	r3, [pc, #208]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a33      	ldr	r2, [pc, #204]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001db6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dba:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001dbc:	f7fe ffa0 	bl	8000d00 <HAL_GetTick>
 8001dc0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001dc4:	f7fe ff9c 	bl	8000d00 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e211      	b.n	80021fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001dd6:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x974>
 8001de2:	e018      	b.n	8001e16 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a26      	ldr	r2, [pc, #152]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001dea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dee:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001df0:	f7fe ff86 	bl	8000d00 <HAL_GetTick>
 8001df4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001df8:	f7fe ff82 	bl	8000d00 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e1f7      	b.n	80021fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d07f      	beq.n	8001f22 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d062      	beq.n	8001ef0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8001e2a:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	4a15      	ldr	r2, [pc, #84]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001e30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e34:	6093      	str	r3, [r2, #8]
 8001e36:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e42:	4910      	ldr	r1, [pc, #64]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001e50:	d309      	bcc.n	8001e66 <HAL_RCC_OscConfig+0xa16>
 8001e52:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f023 021f 	bic.w	r2, r3, #31
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	4909      	ldr	r1, [pc, #36]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	60cb      	str	r3, [r1, #12]
 8001e64:	e02a      	b.n	8001ebc <HAL_RCC_OscConfig+0xa6c>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	da0c      	bge.n	8001e88 <HAL_RCC_OscConfig+0xa38>
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	015b      	lsls	r3, r3, #5
 8001e7c:	4901      	ldr	r1, [pc, #4]	; (8001e84 <HAL_RCC_OscConfig+0xa34>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	60cb      	str	r3, [r1, #12]
 8001e82:	e01b      	b.n	8001ebc <HAL_RCC_OscConfig+0xa6c>
 8001e84:	46020c00 	.word	0x46020c00
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e90:	d30a      	bcc.n	8001ea8 <HAL_RCC_OscConfig+0xa58>
 8001e92:	4ba1      	ldr	r3, [pc, #644]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	029b      	lsls	r3, r3, #10
 8001ea0:	499d      	ldr	r1, [pc, #628]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	60cb      	str	r3, [r1, #12]
 8001ea6:	e009      	b.n	8001ebc <HAL_RCC_OscConfig+0xa6c>
 8001ea8:	4b9b      	ldr	r3, [pc, #620]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	03db      	lsls	r3, r3, #15
 8001eb6:	4998      	ldr	r1, [pc, #608]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001ebc:	4b96      	ldr	r3, [pc, #600]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a95      	ldr	r2, [pc, #596]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8001ec2:	f043 0310 	orr.w	r3, r3, #16
 8001ec6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001ec8:	f7fe ff1a 	bl	8000d00 <HAL_GetTick>
 8001ecc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001ed0:	f7fe ff16 	bl	8000d00 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e18b      	b.n	80021fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001ee2:	4b8d      	ldr	r3, [pc, #564]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0320 	and.w	r3, r3, #32
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0xa80>
 8001eee:	e018      	b.n	8001f22 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8001ef0:	4b89      	ldr	r3, [pc, #548]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a88      	ldr	r2, [pc, #544]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8001ef6:	f023 0310 	bic.w	r3, r3, #16
 8001efa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001efc:	f7fe ff00 	bl	8000d00 <HAL_GetTick>
 8001f00:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001f04:	f7fe fefc 	bl	8000d00 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e171      	b.n	80021fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001f16:	4b80      	ldr	r3, [pc, #512]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0320 	and.w	r3, r3, #32
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 8166 	beq.w	80021f8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f32:	4b79      	ldr	r3, [pc, #484]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b0c      	cmp	r3, #12
 8001f3c:	f000 80f2 	beq.w	8002124 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	f040 80c5 	bne.w	80020d4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001f4a:	4b73      	ldr	r3, [pc, #460]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a72      	ldr	r2, [pc, #456]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8001f50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f54:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001f56:	f7fe fed3 	bl	8000d00 <HAL_GetTick>
 8001f5a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5e:	f7fe fecf 	bl	8000d00 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e144      	b.n	80021fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f70:	4b69      	ldr	r3, [pc, #420]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f0      	bne.n	8001f5e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f7c:	4b66      	ldr	r3, [pc, #408]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8001f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d111      	bne.n	8001fae <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8001f8a:	4b63      	ldr	r3, [pc, #396]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8001f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f90:	4a61      	ldr	r2, [pc, #388]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001f9a:	4b5f      	ldr	r3, [pc, #380]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8001f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8001fae:	4b5b      	ldr	r3, [pc, #364]	; (800211c <HAL_RCC_OscConfig+0xccc>)
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001fba:	d102      	bne.n	8001fc2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001fc2:	4b56      	ldr	r3, [pc, #344]	; (800211c <HAL_RCC_OscConfig+0xccc>)
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	4a55      	ldr	r2, [pc, #340]	; (800211c <HAL_RCC_OscConfig+0xccc>)
 8001fc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fcc:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8001fce:	4b52      	ldr	r3, [pc, #328]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fd6:	f023 0303 	bic.w	r3, r3, #3
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fe2:	3a01      	subs	r2, #1
 8001fe4:	0212      	lsls	r2, r2, #8
 8001fe6:	4311      	orrs	r1, r2
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001fec:	430a      	orrs	r2, r1
 8001fee:	494a      	ldr	r1, [pc, #296]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	628b      	str	r3, [r1, #40]	; 0x28
 8001ff4:	4b48      	ldr	r3, [pc, #288]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8001ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ff8:	4b49      	ldr	r3, [pc, #292]	; (8002120 <HAL_RCC_OscConfig+0xcd0>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002000:	3a01      	subs	r2, #1
 8002002:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800200a:	3a01      	subs	r2, #1
 800200c:	0252      	lsls	r2, r2, #9
 800200e:	b292      	uxth	r2, r2
 8002010:	4311      	orrs	r1, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002016:	3a01      	subs	r2, #1
 8002018:	0412      	lsls	r2, r2, #16
 800201a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800201e:	4311      	orrs	r1, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002024:	3a01      	subs	r2, #1
 8002026:	0612      	lsls	r2, r2, #24
 8002028:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800202c:	430a      	orrs	r2, r1
 800202e:	493a      	ldr	r1, [pc, #232]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8002030:	4313      	orrs	r3, r2
 8002032:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002034:	4b38      	ldr	r3, [pc, #224]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8002036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002038:	4a37      	ldr	r2, [pc, #220]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 800203a:	f023 0310 	bic.w	r3, r3, #16
 800203e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	4a34      	ldr	r2, [pc, #208]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800204a:	4b33      	ldr	r3, [pc, #204]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	4a32      	ldr	r2, [pc, #200]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8002050:	f043 0310 	orr.w	r3, r3, #16
 8002054:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002056:	4b30      	ldr	r3, [pc, #192]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	f023 020c 	bic.w	r2, r3, #12
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	492d      	ldr	r1, [pc, #180]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8002064:	4313      	orrs	r3, r2
 8002066:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8002068:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800206c:	2b01      	cmp	r3, #1
 800206e:	d105      	bne.n	800207c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002070:	4b2a      	ldr	r3, [pc, #168]	; (800211c <HAL_RCC_OscConfig+0xccc>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4a29      	ldr	r2, [pc, #164]	; (800211c <HAL_RCC_OscConfig+0xccc>)
 8002076:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800207a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800207c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002080:	2b01      	cmp	r3, #1
 8002082:	d107      	bne.n	8002094 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002084:	4b24      	ldr	r3, [pc, #144]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8002086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800208a:	4a23      	ldr	r2, [pc, #140]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 800208c:	f023 0304 	bic.w	r3, r3, #4
 8002090:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002094:	4b20      	ldr	r3, [pc, #128]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8002096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002098:	4a1f      	ldr	r2, [pc, #124]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 800209a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800209e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1c      	ldr	r2, [pc, #112]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 80020a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020aa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80020ac:	f7fe fe28 	bl	8000d00 <HAL_GetTick>
 80020b0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b4:	f7fe fe24 	bl	8000d00 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e099      	b.n	80021fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80020c6:	4b14      	ldr	r3, [pc, #80]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0xc64>
 80020d2:	e091      	b.n	80021f8 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80020d4:	4b10      	ldr	r3, [pc, #64]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0f      	ldr	r2, [pc, #60]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 80020da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020de:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80020e0:	f7fe fe0e 	bl	8000d00 <HAL_GetTick>
 80020e4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e8:	f7fe fe0a 	bl	8000d00 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e07f      	b.n	80021fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80020fa:	4b07      	ldr	r3, [pc, #28]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002106:	4b04      	ldr	r3, [pc, #16]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	4a03      	ldr	r2, [pc, #12]	; (8002118 <HAL_RCC_OscConfig+0xcc8>)
 800210c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002110:	f023 0303 	bic.w	r3, r3, #3
 8002114:	6293      	str	r3, [r2, #40]	; 0x28
 8002116:	e06f      	b.n	80021f8 <HAL_RCC_OscConfig+0xda8>
 8002118:	46020c00 	.word	0x46020c00
 800211c:	46020800 	.word	0x46020800
 8002120:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002124:	4b37      	ldr	r3, [pc, #220]	; (8002204 <HAL_RCC_OscConfig+0xdb4>)
 8002126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002128:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800212a:	4b36      	ldr	r3, [pc, #216]	; (8002204 <HAL_RCC_OscConfig+0xdb4>)
 800212c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800212e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002134:	2b01      	cmp	r3, #1
 8002136:	d039      	beq.n	80021ac <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f003 0203 	and.w	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002142:	429a      	cmp	r2, r3
 8002144:	d132      	bne.n	80021ac <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002154:	429a      	cmp	r2, r3
 8002156:	d129      	bne.n	80021ac <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002162:	429a      	cmp	r2, r3
 8002164:	d122      	bne.n	80021ac <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002170:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002172:	429a      	cmp	r2, r3
 8002174:	d11a      	bne.n	80021ac <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	0a5b      	lsrs	r3, r3, #9
 800217a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002182:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002184:	429a      	cmp	r2, r3
 8002186:	d111      	bne.n	80021ac <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	0c1b      	lsrs	r3, r3, #16
 800218c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002194:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002196:	429a      	cmp	r2, r3
 8002198:	d108      	bne.n	80021ac <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	0e1b      	lsrs	r3, r3, #24
 800219e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e024      	b.n	80021fa <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_RCC_OscConfig+0xdb4>)
 80021b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b4:	08db      	lsrs	r3, r3, #3
 80021b6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80021be:	429a      	cmp	r2, r3
 80021c0:	d01a      	beq.n	80021f8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <HAL_RCC_OscConfig+0xdb4>)
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c6:	4a0f      	ldr	r2, [pc, #60]	; (8002204 <HAL_RCC_OscConfig+0xdb4>)
 80021c8:	f023 0310 	bic.w	r3, r3, #16
 80021cc:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ce:	f7fe fd97 	bl	8000d00 <HAL_GetTick>
 80021d2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80021d4:	bf00      	nop
 80021d6:	f7fe fd93 	bl	8000d00 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021de:	4293      	cmp	r3, r2
 80021e0:	d0f9      	beq.n	80021d6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e6:	4a07      	ldr	r2, [pc, #28]	; (8002204 <HAL_RCC_OscConfig+0xdb4>)
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_RCC_OscConfig+0xdb4>)
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	4a04      	ldr	r2, [pc, #16]	; (8002204 <HAL_RCC_OscConfig+0xdb4>)
 80021f2:	f043 0310 	orr.w	r3, r3, #16
 80021f6:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3738      	adds	r7, #56	; 0x38
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	46020c00 	.word	0x46020c00

08002208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e1d9      	b.n	80025d0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800221c:	4b9b      	ldr	r3, [pc, #620]	; (800248c <HAL_RCC_ClockConfig+0x284>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d910      	bls.n	800224c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222a:	4b98      	ldr	r3, [pc, #608]	; (800248c <HAL_RCC_ClockConfig+0x284>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 020f 	bic.w	r2, r3, #15
 8002232:	4996      	ldr	r1, [pc, #600]	; (800248c <HAL_RCC_ClockConfig+0x284>)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b94      	ldr	r3, [pc, #592]	; (800248c <HAL_RCC_ClockConfig+0x284>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e1c1      	b.n	80025d0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0310 	and.w	r3, r3, #16
 8002254:	2b00      	cmp	r3, #0
 8002256:	d010      	beq.n	800227a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	4b8c      	ldr	r3, [pc, #560]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002264:	429a      	cmp	r2, r3
 8002266:	d908      	bls.n	800227a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002268:	4b89      	ldr	r3, [pc, #548]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	4986      	ldr	r1, [pc, #536]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 8002276:	4313      	orrs	r3, r2
 8002278:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d012      	beq.n	80022ac <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	4b81      	ldr	r3, [pc, #516]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002294:	429a      	cmp	r2, r3
 8002296:	d909      	bls.n	80022ac <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002298:	4b7d      	ldr	r3, [pc, #500]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	497a      	ldr	r1, [pc, #488]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d010      	beq.n	80022da <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	4b74      	ldr	r3, [pc, #464]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d908      	bls.n	80022da <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80022c8:	4b71      	ldr	r3, [pc, #452]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	496e      	ldr	r1, [pc, #440]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d010      	beq.n	8002308 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	4b69      	ldr	r3, [pc, #420]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d908      	bls.n	8002308 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80022f6:	4b66      	ldr	r3, [pc, #408]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	f023 020f 	bic.w	r2, r3, #15
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	4963      	ldr	r1, [pc, #396]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 8002304:	4313      	orrs	r3, r2
 8002306:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80d2 	beq.w	80024ba <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8002316:	2300      	movs	r3, #0
 8002318:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b03      	cmp	r3, #3
 8002320:	d143      	bne.n	80023aa <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002322:	4b5b      	ldr	r3, [pc, #364]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 8002324:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	d110      	bne.n	8002352 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002330:	4b57      	ldr	r3, [pc, #348]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 8002332:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002336:	4a56      	ldr	r2, [pc, #344]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 8002338:	f043 0304 	orr.w	r3, r3, #4
 800233c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002340:	4b53      	ldr	r3, [pc, #332]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 8002342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800234e:	2301      	movs	r3, #1
 8002350:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8002352:	f7fe fcd5 	bl	8000d00 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002358:	4b4e      	ldr	r3, [pc, #312]	; (8002494 <HAL_RCC_ClockConfig+0x28c>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00f      	beq.n	8002384 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002364:	e008      	b.n	8002378 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8002366:	f7fe fccb 	bl	8000d00 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e12b      	b.n	80025d0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002378:	4b46      	ldr	r3, [pc, #280]	; (8002494 <HAL_RCC_ClockConfig+0x28c>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002384:	7dfb      	ldrb	r3, [r7, #23]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d107      	bne.n	800239a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800238a:	4b41      	ldr	r3, [pc, #260]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 800238c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002390:	4a3f      	ldr	r2, [pc, #252]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 8002392:	f023 0304 	bic.w	r3, r3, #4
 8002396:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800239a:	4b3d      	ldr	r3, [pc, #244]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d121      	bne.n	80023ea <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e112      	b.n	80025d0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023b2:	4b37      	ldr	r3, [pc, #220]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d115      	bne.n	80023ea <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e106      	b.n	80025d0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80023ca:	4b31      	ldr	r3, [pc, #196]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e0fa      	b.n	80025d0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023da:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e0f2      	b.n	80025d0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80023ea:	4b29      	ldr	r3, [pc, #164]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	f023 0203 	bic.w	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4926      	ldr	r1, [pc, #152]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80023fc:	f7fe fc80 	bl	8000d00 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d112      	bne.n	8002430 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800240a:	e00a      	b.n	8002422 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800240c:	f7fe fc78 	bl	8000d00 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	; 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e0d6      	b.n	80025d0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002422:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b0c      	cmp	r3, #12
 800242c:	d1ee      	bne.n	800240c <HAL_RCC_ClockConfig+0x204>
 800242e:	e044      	b.n	80024ba <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d112      	bne.n	800245e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002438:	e00a      	b.n	8002450 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800243a:	f7fe fc61 	bl	8000d00 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f241 3288 	movw	r2, #5000	; 0x1388
 8002448:	4293      	cmp	r3, r2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e0bf      	b.n	80025d0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b08      	cmp	r3, #8
 800245a:	d1ee      	bne.n	800243a <HAL_RCC_ClockConfig+0x232>
 800245c:	e02d      	b.n	80024ba <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d123      	bne.n	80024ae <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002466:	e00a      	b.n	800247e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002468:	f7fe fc4a 	bl	8000d00 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e0a8      	b.n	80025d0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800247e:	4b04      	ldr	r3, [pc, #16]	; (8002490 <HAL_RCC_ClockConfig+0x288>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1ee      	bne.n	8002468 <HAL_RCC_ClockConfig+0x260>
 800248a:	e016      	b.n	80024ba <HAL_RCC_ClockConfig+0x2b2>
 800248c:	40022000 	.word	0x40022000
 8002490:	46020c00 	.word	0x46020c00
 8002494:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002498:	f7fe fc32 	bl	8000d00 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e090      	b.n	80025d0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ae:	4b4a      	ldr	r3, [pc, #296]	; (80025d8 <HAL_RCC_ClockConfig+0x3d0>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d1ee      	bne.n	8002498 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d010      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	4b43      	ldr	r3, [pc, #268]	; (80025d8 <HAL_RCC_ClockConfig+0x3d0>)
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d208      	bcs.n	80024e8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80024d6:	4b40      	ldr	r3, [pc, #256]	; (80025d8 <HAL_RCC_ClockConfig+0x3d0>)
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	f023 020f 	bic.w	r2, r3, #15
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	493d      	ldr	r1, [pc, #244]	; (80025d8 <HAL_RCC_ClockConfig+0x3d0>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024e8:	4b3c      	ldr	r3, [pc, #240]	; (80025dc <HAL_RCC_ClockConfig+0x3d4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d210      	bcs.n	8002518 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f6:	4b39      	ldr	r3, [pc, #228]	; (80025dc <HAL_RCC_ClockConfig+0x3d4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 020f 	bic.w	r2, r3, #15
 80024fe:	4937      	ldr	r1, [pc, #220]	; (80025dc <HAL_RCC_ClockConfig+0x3d4>)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	4313      	orrs	r3, r2
 8002504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002506:	4b35      	ldr	r3, [pc, #212]	; (80025dc <HAL_RCC_ClockConfig+0x3d4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e05b      	b.n	80025d0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d010      	beq.n	8002546 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	4b2b      	ldr	r3, [pc, #172]	; (80025d8 <HAL_RCC_ClockConfig+0x3d0>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002530:	429a      	cmp	r2, r3
 8002532:	d208      	bcs.n	8002546 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002534:	4b28      	ldr	r3, [pc, #160]	; (80025d8 <HAL_RCC_ClockConfig+0x3d0>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4925      	ldr	r1, [pc, #148]	; (80025d8 <HAL_RCC_ClockConfig+0x3d0>)
 8002542:	4313      	orrs	r3, r2
 8002544:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d012      	beq.n	8002578 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691a      	ldr	r2, [r3, #16]
 8002556:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <HAL_RCC_ClockConfig+0x3d0>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	091b      	lsrs	r3, r3, #4
 800255c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002560:	429a      	cmp	r2, r3
 8002562:	d209      	bcs.n	8002578 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002564:	4b1c      	ldr	r3, [pc, #112]	; (80025d8 <HAL_RCC_ClockConfig+0x3d0>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	4919      	ldr	r1, [pc, #100]	; (80025d8 <HAL_RCC_ClockConfig+0x3d0>)
 8002574:	4313      	orrs	r3, r2
 8002576:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	2b00      	cmp	r3, #0
 8002582:	d010      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	695a      	ldr	r2, [r3, #20]
 8002588:	4b13      	ldr	r3, [pc, #76]	; (80025d8 <HAL_RCC_ClockConfig+0x3d0>)
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002590:	429a      	cmp	r2, r3
 8002592:	d208      	bcs.n	80025a6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002594:	4b10      	ldr	r3, [pc, #64]	; (80025d8 <HAL_RCC_ClockConfig+0x3d0>)
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	490d      	ldr	r1, [pc, #52]	; (80025d8 <HAL_RCC_ClockConfig+0x3d0>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80025a6:	f000 f821 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 80025aa:	4602      	mov	r2, r0
 80025ac:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <HAL_RCC_ClockConfig+0x3d0>)
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	490a      	ldr	r1, [pc, #40]	; (80025e0 <HAL_RCC_ClockConfig+0x3d8>)
 80025b6:	5ccb      	ldrb	r3, [r1, r3]
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
 80025bc:	4a09      	ldr	r2, [pc, #36]	; (80025e4 <HAL_RCC_ClockConfig+0x3dc>)
 80025be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025c0:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <HAL_RCC_ClockConfig+0x3e0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe fb51 	bl	8000c6c <HAL_InitTick>
 80025ca:	4603      	mov	r3, r0
 80025cc:	73fb      	strb	r3, [r7, #15]

  return status;
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	46020c00 	.word	0x46020c00
 80025dc:	40022000 	.word	0x40022000
 80025e0:	08006f98 	.word	0x08006f98
 80025e4:	20000000 	.word	0x20000000
 80025e8:	20000004 	.word	0x20000004

080025ec <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b08b      	sub	sp, #44	; 0x2c
 80025f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025fa:	4b7b      	ldr	r3, [pc, #492]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002604:	4b78      	ldr	r3, [pc, #480]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0x34>
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	2b0c      	cmp	r3, #12
 8002618:	d121      	bne.n	800265e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d11e      	bne.n	800265e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002620:	4b71      	ldr	r3, [pc, #452]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d107      	bne.n	800263c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800262c:	4b6e      	ldr	r3, [pc, #440]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800262e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002632:	0b1b      	lsrs	r3, r3, #12
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
 800263a:	e005      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800263c:	4b6a      	ldr	r3, [pc, #424]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	0f1b      	lsrs	r3, r3, #28
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002648:	4a68      	ldr	r2, [pc, #416]	; (80027ec <HAL_RCC_GetSysClockFreq+0x200>)
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002650:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d110      	bne.n	800267a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800265c:	e00d      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800265e:	4b62      	ldr	r3, [pc, #392]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b04      	cmp	r3, #4
 8002668:	d102      	bne.n	8002670 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800266a:	4b61      	ldr	r3, [pc, #388]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x204>)
 800266c:	623b      	str	r3, [r7, #32]
 800266e:	e004      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	2b08      	cmp	r3, #8
 8002674:	d101      	bne.n	800267a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002676:	4b5e      	ldr	r3, [pc, #376]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002678:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	2b0c      	cmp	r3, #12
 800267e:	f040 80ac 	bne.w	80027da <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002682:	4b59      	ldr	r3, [pc, #356]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800268c:	4b56      	ldr	r3, [pc, #344]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800268e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	3301      	adds	r3, #1
 8002698:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800269a:	4b53      	ldr	r3, [pc, #332]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80026a6:	4b50      	ldr	r3, [pc, #320]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80026a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026aa:	08db      	lsrs	r3, r3, #3
 80026ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	fb02 f303 	mul.w	r3, r2, r3
 80026b6:	ee07 3a90 	vmov	s15, r3
 80026ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026be:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 8086 	beq.w	80027d6 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d003      	beq.n	80026d8 <HAL_RCC_GetSysClockFreq+0xec>
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d022      	beq.n	800271c <HAL_RCC_GetSysClockFreq+0x130>
 80026d6:	e043      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	ee07 3a90 	vmov	s15, r3
 80026de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026e2:	eddf 6a44 	vldr	s13, [pc, #272]	; 80027f4 <HAL_RCC_GetSysClockFreq+0x208>
 80026e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026ea:	4b3f      	ldr	r3, [pc, #252]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80026ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f2:	ee07 3a90 	vmov	s15, r3
 80026f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80026fa:	ed97 6a01 	vldr	s12, [r7, #4]
 80026fe:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80027f8 <HAL_RCC_GetSysClockFreq+0x20c>
 8002702:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002706:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800270a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800270e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002716:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800271a:	e046      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	ee07 3a90 	vmov	s15, r3
 8002722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002726:	eddf 6a33 	vldr	s13, [pc, #204]	; 80027f4 <HAL_RCC_GetSysClockFreq+0x208>
 800272a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800272e:	4b2e      	ldr	r3, [pc, #184]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002736:	ee07 3a90 	vmov	s15, r3
 800273a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800273e:	ed97 6a01 	vldr	s12, [r7, #4]
 8002742:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80027f8 <HAL_RCC_GetSysClockFreq+0x20c>
 8002746:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800274a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800274e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002752:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800275a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800275e:	e024      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	ee07 3a90 	vmov	s15, r3
 8002766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	ee07 3a90 	vmov	s15, r3
 8002770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002774:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002778:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800277a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002780:	ee07 3a90 	vmov	s15, r3
 8002784:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002788:	ed97 6a01 	vldr	s12, [r7, #4]
 800278c:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80027f8 <HAL_RCC_GetSysClockFreq+0x20c>
 8002790:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002794:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002798:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800279c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a4:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80027a8:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80027aa:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80027ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ae:	0e1b      	lsrs	r3, r3, #24
 80027b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027b4:	3301      	adds	r3, #1
 80027b6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	ee07 3a90 	vmov	s15, r3
 80027be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80027c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027ce:	ee17 3a90 	vmov	r3, s15
 80027d2:	623b      	str	r3, [r7, #32]
 80027d4:	e001      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80027da:	6a3b      	ldr	r3, [r7, #32]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	372c      	adds	r7, #44	; 0x2c
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	46020c00 	.word	0x46020c00
 80027ec:	08006fb0 	.word	0x08006fb0
 80027f0:	00f42400 	.word	0x00f42400
 80027f4:	4b742400 	.word	0x4b742400
 80027f8:	46000000 	.word	0x46000000

080027fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002800:	f7ff fef4 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b07      	ldr	r3, [pc, #28]	; (8002824 <HAL_RCC_GetHCLKFreq+0x28>)
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	4906      	ldr	r1, [pc, #24]	; (8002828 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002810:	5ccb      	ldrb	r3, [r1, r3]
 8002812:	fa22 f303 	lsr.w	r3, r2, r3
 8002816:	4a05      	ldr	r2, [pc, #20]	; (800282c <HAL_RCC_GetHCLKFreq+0x30>)
 8002818:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800281a:	4b04      	ldr	r3, [pc, #16]	; (800282c <HAL_RCC_GetHCLKFreq+0x30>)
 800281c:	681b      	ldr	r3, [r3, #0]
}
 800281e:	4618      	mov	r0, r3
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	46020c00 	.word	0x46020c00
 8002828:	08006f98 	.word	0x08006f98
 800282c:	20000000 	.word	0x20000000

08002830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002834:	f7ff ffe2 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002838:	4602      	mov	r2, r0
 800283a:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	091b      	lsrs	r3, r3, #4
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	4903      	ldr	r1, [pc, #12]	; (8002854 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002846:	5ccb      	ldrb	r3, [r1, r3]
 8002848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800284c:	4618      	mov	r0, r3
 800284e:	bd80      	pop	{r7, pc}
 8002850:	46020c00 	.word	0x46020c00
 8002854:	08006fa8 	.word	0x08006fa8

08002858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800285c:	f7ff ffce 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002860:	4602      	mov	r2, r0
 8002862:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	0a1b      	lsrs	r3, r3, #8
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	4903      	ldr	r1, [pc, #12]	; (800287c <HAL_RCC_GetPCLK2Freq+0x24>)
 800286e:	5ccb      	ldrb	r3, [r1, r3]
 8002870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002874:	4618      	mov	r0, r3
 8002876:	bd80      	pop	{r7, pc}
 8002878:	46020c00 	.word	0x46020c00
 800287c:	08006fa8 	.word	0x08006fa8

08002880 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002884:	f7ff ffba 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002888:	4602      	mov	r2, r0
 800288a:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <HAL_RCC_GetPCLK3Freq+0x20>)
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	091b      	lsrs	r3, r3, #4
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	4903      	ldr	r1, [pc, #12]	; (80028a4 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002896:	5ccb      	ldrb	r3, [r1, r3]
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800289c:	4618      	mov	r0, r3
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	46020c00 	.word	0x46020c00
 80028a4:	08006fa8 	.word	0x08006fa8

080028a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028b0:	4b3e      	ldr	r3, [pc, #248]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80028b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028be:	f7fe fdb9 	bl	8001434 <HAL_PWREx_GetVoltageRange>
 80028c2:	6178      	str	r0, [r7, #20]
 80028c4:	e019      	b.n	80028fa <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028c6:	4b39      	ldr	r3, [pc, #228]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80028c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028cc:	4a37      	ldr	r2, [pc, #220]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80028ce:	f043 0304 	orr.w	r3, r3, #4
 80028d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80028d6:	4b35      	ldr	r3, [pc, #212]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80028d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028e4:	f7fe fda6 	bl	8001434 <HAL_PWREx_GetVoltageRange>
 80028e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028ea:	4b30      	ldr	r3, [pc, #192]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80028ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f0:	4a2e      	ldr	r2, [pc, #184]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80028f2:	f023 0304 	bic.w	r3, r3, #4
 80028f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002900:	d003      	beq.n	800290a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002908:	d109      	bne.n	800291e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002910:	d202      	bcs.n	8002918 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002912:	2301      	movs	r3, #1
 8002914:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002916:	e033      	b.n	8002980 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002918:	2300      	movs	r3, #0
 800291a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800291c:	e030      	b.n	8002980 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002924:	d208      	bcs.n	8002938 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800292c:	d102      	bne.n	8002934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800292e:	2303      	movs	r3, #3
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	e025      	b.n	8002980 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e035      	b.n	80029a4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800293e:	d90f      	bls.n	8002960 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d109      	bne.n	800295a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800294c:	d902      	bls.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	e015      	b.n	8002980 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002954:	2301      	movs	r3, #1
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	e012      	b.n	8002980 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	e00f      	b.n	8002980 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002966:	d109      	bne.n	800297c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296e:	d102      	bne.n	8002976 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002970:	2301      	movs	r3, #1
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	e004      	b.n	8002980 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002976:	2302      	movs	r3, #2
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	e001      	b.n	8002980 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800297c:	2301      	movs	r3, #1
 800297e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f023 020f 	bic.w	r2, r3, #15
 8002988:	4909      	ldr	r1, [pc, #36]	; (80029b0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002990:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 030f 	and.w	r3, r3, #15
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	429a      	cmp	r2, r3
 800299c:	d001      	beq.n	80029a2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	46020c00 	.word	0x46020c00
 80029b0:	40022000 	.word	0x40022000

080029b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80029b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029b8:	b0c4      	sub	sp, #272	; 0x110
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029c0:	2300      	movs	r3, #0
 80029c2:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d4:	f002 0401 	and.w	r4, r2, #1
 80029d8:	2500      	movs	r5, #0
 80029da:	ea54 0305 	orrs.w	r3, r4, r5
 80029de:	d00b      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80029e0:	4bd5      	ldr	r3, [pc, #852]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80029e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e6:	f023 0103 	bic.w	r1, r3, #3
 80029ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f0:	4ad1      	ldr	r2, [pc, #836]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80029f2:	430b      	orrs	r3, r1
 80029f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a00:	f002 0802 	and.w	r8, r2, #2
 8002a04:	f04f 0900 	mov.w	r9, #0
 8002a08:	ea58 0309 	orrs.w	r3, r8, r9
 8002a0c:	d00b      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002a0e:	4bca      	ldr	r3, [pc, #808]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a14:	f023 010c 	bic.w	r1, r3, #12
 8002a18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1e:	4ac6      	ldr	r2, [pc, #792]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002a20:	430b      	orrs	r3, r1
 8002a22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2e:	f002 0a04 	and.w	sl, r2, #4
 8002a32:	f04f 0b00 	mov.w	fp, #0
 8002a36:	ea5a 030b 	orrs.w	r3, sl, fp
 8002a3a:	d00b      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002a3c:	4bbe      	ldr	r3, [pc, #760]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a42:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4c:	4aba      	ldr	r2, [pc, #744]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002a4e:	430b      	orrs	r3, r1
 8002a50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5c:	f002 0308 	and.w	r3, r2, #8
 8002a60:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002a6a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4313      	orrs	r3, r2
 8002a72:	d00b      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002a74:	4bb0      	ldr	r3, [pc, #704]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a84:	4aac      	ldr	r2, [pc, #688]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002a86:	430b      	orrs	r3, r1
 8002a88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a94:	f002 0310 	and.w	r3, r2, #16
 8002a98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002aa2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	d00b      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002aac:	4ba2      	ldr	r3, [pc, #648]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ab2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002abc:	4a9e      	ldr	r2, [pc, #632]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002abe:	430b      	orrs	r3, r1
 8002ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002acc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8002ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ada:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	d00b      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002ae4:	4b94      	ldr	r3, [pc, #592]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ae6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002aea:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002af2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002af4:	4a90      	ldr	r2, [pc, #576]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002af6:	430b      	orrs	r3, r1
 8002af8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002afc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b04:	f002 0320 	and.w	r3, r2, #32
 8002b08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002b12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b16:	460b      	mov	r3, r1
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	d00b      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002b1c:	4b86      	ldr	r3, [pc, #536]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002b1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b22:	f023 0107 	bic.w	r1, r3, #7
 8002b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b2c:	4a82      	ldr	r2, [pc, #520]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002b40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b44:	2300      	movs	r3, #0
 8002b46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002b4a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4313      	orrs	r3, r2
 8002b52:	d00b      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002b54:	4b78      	ldr	r3, [pc, #480]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b5a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b64:	4a74      	ldr	r2, [pc, #464]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002b66:	430b      	orrs	r3, r1
 8002b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002b78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b82:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002b86:	460b      	mov	r3, r1
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	d00b      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002b8c:	4b6a      	ldr	r3, [pc, #424]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9c:	4a66      	ldr	r2, [pc, #408]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002b9e:	430b      	orrs	r3, r1
 8002ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bac:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8002bb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	d00b      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002bc4:	4b5c      	ldr	r3, [pc, #368]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002bc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd4:	4a58      	ldr	r2, [pc, #352]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002bd6:	430b      	orrs	r3, r1
 8002bd8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002be8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bec:	2300      	movs	r3, #0
 8002bee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002bf2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	d00b      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002bfc:	4b4e      	ldr	r3, [pc, #312]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c02:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8002c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c0c:	4a4a      	ldr	r2, [pc, #296]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002c0e:	430b      	orrs	r3, r1
 8002c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8002c14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8002c20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c24:	2300      	movs	r3, #0
 8002c26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c2a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4313      	orrs	r3, r2
 8002c32:	d00b      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8002c34:	4b40      	ldr	r3, [pc, #256]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002c36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002c3a:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8002c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c44:	4a3c      	ldr	r2, [pc, #240]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002c46:	430b      	orrs	r3, r1
 8002c48:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8002c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c54:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8002c58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c62:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c66:	460b      	mov	r3, r1
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	d00c      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8002c6c:	4b32      	ldr	r3, [pc, #200]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002c6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002c72:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c7e:	4a2e      	ldr	r2, [pc, #184]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002c80:	430b      	orrs	r3, r1
 8002c82:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8e:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8002c92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c96:	2300      	movs	r3, #0
 8002c98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002c9c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	d00c      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002ca6:	4b24      	ldr	r3, [pc, #144]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ca8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cac:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb8:	4a1f      	ldr	r2, [pc, #124]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002cba:	430b      	orrs	r3, r1
 8002cbc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc8:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002ccc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002cd6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	d00c      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002ce0:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ce6:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8002cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf2:	4a11      	ldr	r2, [pc, #68]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8002cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d02:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002d06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d10:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002d14:	460b      	mov	r3, r1
 8002d16:	4313      	orrs	r3, r2
 8002d18:	d010      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8002d1a:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d20:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d2c:	4a02      	ldr	r2, [pc, #8]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d2e:	430b      	orrs	r3, r1
 8002d30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d34:	e002      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x388>
 8002d36:	bf00      	nop
 8002d38:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d44:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002d48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002d52:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002d56:	460b      	mov	r3, r1
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	d04c      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8002d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d64:	2b80      	cmp	r3, #128	; 0x80
 8002d66:	d02d      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002d68:	2b80      	cmp	r3, #128	; 0x80
 8002d6a:	d827      	bhi.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002d6c:	2b60      	cmp	r3, #96	; 0x60
 8002d6e:	d02b      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8002d70:	2b60      	cmp	r3, #96	; 0x60
 8002d72:	d823      	bhi.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002d74:	2b40      	cmp	r3, #64	; 0x40
 8002d76:	d006      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8002d78:	2b40      	cmp	r3, #64	; 0x40
 8002d7a:	d81f      	bhi.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d009      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d011      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8002d84:	e01a      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d86:	4bbe      	ldr	r3, [pc, #760]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8a:	4abd      	ldr	r2, [pc, #756]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d90:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002d92:	e01a      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002d94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d98:	3308      	adds	r3, #8
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f002 fc5e 	bl	800565c <RCCEx_PLL2_Config>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002da6:	e010      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dac:	332c      	adds	r3, #44	; 0x2c
 8002dae:	4618      	mov	r0, r3
 8002db0:	f002 fcec 	bl	800578c <RCCEx_PLL3_Config>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002dba:	e006      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002dc2:	e002      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8002dc4:	bf00      	nop
 8002dc6:	e000      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8002dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dca:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10d      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8002dd2:	4bab      	ldr	r3, [pc, #684]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dd4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002dd8:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8002ddc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002de0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002de4:	4aa6      	ldr	r2, [pc, #664]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002de6:	430b      	orrs	r3, r1
 8002de8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002dec:	e003      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dee:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002df2:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfe:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002e02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e06:	2300      	movs	r3, #0
 8002e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e0c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8002e10:	460b      	mov	r3, r1
 8002e12:	4313      	orrs	r3, r2
 8002e14:	d053      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8002e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e22:	d033      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8002e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e28:	d82c      	bhi.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002e2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e2e:	d02f      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8002e30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e34:	d826      	bhi.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e3a:	d008      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8002e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e40:	d820      	bhi.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e4a:	d011      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002e4c:	e01a      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e4e:	4b8c      	ldr	r3, [pc, #560]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	4a8b      	ldr	r2, [pc, #556]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e58:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002e5a:	e01a      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e60:	3308      	adds	r3, #8
 8002e62:	4618      	mov	r0, r3
 8002e64:	f002 fbfa 	bl	800565c <RCCEx_PLL2_Config>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002e6e:	e010      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e74:	332c      	adds	r3, #44	; 0x2c
 8002e76:	4618      	mov	r0, r3
 8002e78:	f002 fc88 	bl	800578c <RCCEx_PLL3_Config>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002e82:	e006      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002e8a:	e002      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8002e8c:	bf00      	nop
 8002e8e:	e000      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8002e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e92:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10d      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8002e9a:	4b79      	ldr	r3, [pc, #484]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002ea0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ea8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002eac:	4a74      	ldr	r2, [pc, #464]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eae:	430b      	orrs	r3, r1
 8002eb0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002eb4:	e003      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb6:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002eba:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec6:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002eca:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ecc:	2300      	movs	r3, #0
 8002ece:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ed0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	d046      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8002eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ede:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ee2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002ee6:	d028      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002ee8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002eec:	d821      	bhi.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8002eee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ef2:	d022      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002ef4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ef8:	d81b      	bhi.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8002efa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002efe:	d01c      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002f00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f04:	d815      	bhi.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8002f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f0a:	d008      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8002f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f10:	d80f      	bhi.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d011      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f1a:	d00e      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002f1c:	e009      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f22:	3308      	adds	r3, #8
 8002f24:	4618      	mov	r0, r3
 8002f26:	f002 fb99 	bl	800565c <RCCEx_PLL2_Config>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002f30:	e004      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002f38:	e000      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 8002f3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f3c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10d      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8002f44:	4b4e      	ldr	r3, [pc, #312]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f4a:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f56:	4a4a      	ldr	r2, [pc, #296]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f5e:	e003      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f60:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002f64:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8002f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f70:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8002f74:	673b      	str	r3, [r7, #112]	; 0x70
 8002f76:	2300      	movs	r3, #0
 8002f78:	677b      	str	r3, [r7, #116]	; 0x74
 8002f7a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4313      	orrs	r3, r2
 8002f82:	d03f      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8002f84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d81e      	bhi.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8002f90:	a201      	add	r2, pc, #4	; (adr r2, 8002f98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f96:	bf00      	nop
 8002f98:	08002fd7 	.word	0x08002fd7
 8002f9c:	08002fad 	.word	0x08002fad
 8002fa0:	08002fbb 	.word	0x08002fbb
 8002fa4:	08002fd7 	.word	0x08002fd7
 8002fa8:	08002fd7 	.word	0x08002fd7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002fac:	4b34      	ldr	r3, [pc, #208]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb0:	4a33      	ldr	r2, [pc, #204]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb6:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002fb8:	e00e      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fbe:	332c      	adds	r3, #44	; 0x2c
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f002 fbe3 	bl	800578c <RCCEx_PLL3_Config>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002fcc:	e004      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002fd4:	e000      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 8002fd6:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002fd8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10d      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8002fe0:	4b27      	ldr	r3, [pc, #156]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002fe6:	f023 0107 	bic.w	r1, r3, #7
 8002fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff2:	4a23      	ldr	r2, [pc, #140]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002ffa:	e003      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ffc:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003000:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300c:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003010:	66bb      	str	r3, [r7, #104]	; 0x68
 8003012:	2300      	movs	r3, #0
 8003014:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003016:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800301a:	460b      	mov	r3, r1
 800301c:	4313      	orrs	r3, r2
 800301e:	d04c      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003024:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003028:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800302c:	d02a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 800302e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003032:	d821      	bhi.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8003034:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003038:	d026      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 800303a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800303e:	d81b      	bhi.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8003040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003044:	d00e      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8003046:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800304a:	d815      	bhi.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01d      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8003050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003054:	d110      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003056:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	4a09      	ldr	r2, [pc, #36]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800305c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003060:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003062:	e014      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003068:	332c      	adds	r3, #44	; 0x2c
 800306a:	4618      	mov	r0, r3
 800306c:	f002 fb8e 	bl	800578c <RCCEx_PLL3_Config>
 8003070:	4603      	mov	r3, r0
 8003072:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003076:	e00a      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800307e:	e006      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8003080:	46020c00 	.word	0x46020c00
        break;
 8003084:	bf00      	nop
 8003086:	e002      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8003088:	bf00      	nop
 800308a:	e000      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 800308c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800308e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10d      	bne.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003096:	4baf      	ldr	r3, [pc, #700]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003098:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800309c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80030a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030a8:	4aaa      	ldr	r2, [pc, #680]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80030aa:	430b      	orrs	r3, r1
 80030ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030b0:	e003      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80030b6:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80030c6:	663b      	str	r3, [r7, #96]	; 0x60
 80030c8:	2300      	movs	r3, #0
 80030ca:	667b      	str	r3, [r7, #100]	; 0x64
 80030cc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80030d0:	460b      	mov	r3, r1
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f000 80b5 	beq.w	8003242 <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d8:	2300      	movs	r3, #0
 80030da:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030de:	4b9d      	ldr	r3, [pc, #628]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80030e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d113      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ec:	4b99      	ldr	r3, [pc, #612]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80030ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030f2:	4a98      	ldr	r2, [pc, #608]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80030f4:	f043 0304 	orr.w	r3, r3, #4
 80030f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80030fc:	4b95      	ldr	r3, [pc, #596]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80030fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800310a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
      pwrclkchanged = SET;
 800310e:	2301      	movs	r3, #1
 8003110:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003114:	4b90      	ldr	r3, [pc, #576]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	4a8f      	ldr	r2, [pc, #572]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003120:	f7fd fdee 	bl	8000d00 <HAL_GetTick>
 8003124:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003128:	e00b      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312a:	f7fd fde9 	bl	8000d00 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d903      	bls.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003140:	e005      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003142:	4b85      	ldr	r3, [pc, #532]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8003144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0ed      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 800314e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003152:	2b00      	cmp	r3, #0
 8003154:	d165      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003156:	4b7f      	ldr	r3, [pc, #508]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003158:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800315c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003160:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003164:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003168:	2b00      	cmp	r3, #0
 800316a:	d023      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x800>
 800316c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003170:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8003174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003178:	4293      	cmp	r3, r2
 800317a:	d01b      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800317c:	4b75      	ldr	r3, [pc, #468]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800317e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003186:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800318a:	4b72      	ldr	r3, [pc, #456]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800318c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003190:	4a70      	ldr	r2, [pc, #448]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003196:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800319a:	4b6e      	ldr	r3, [pc, #440]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800319c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031a0:	4a6c      	ldr	r2, [pc, #432]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80031a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031aa:	4a6a      	ldr	r2, [pc, #424]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80031ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d019      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fd fd9e 	bl	8000d00 <HAL_GetTick>
 80031c4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031c8:	e00d      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ca:	f7fd fd99 	bl	8000d00 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031d4:	1ad2      	subs	r2, r2, r3
 80031d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80031da:	429a      	cmp	r2, r3
 80031dc:	d903      	bls.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            break;
 80031e4:	e006      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031e6:	4b5b      	ldr	r3, [pc, #364]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80031e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0ea      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 80031f4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10d      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80031fc:	4b55      	ldr	r3, [pc, #340]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80031fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003202:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800320a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800320e:	4a51      	ldr	r2, [pc, #324]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003210:	430b      	orrs	r3, r1
 8003212:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003216:	e008      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003218:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800321c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 8003220:	e003      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003222:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003226:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800322a:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 800322e:	2b01      	cmp	r3, #1
 8003230:	d107      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003232:	4b48      	ldr	r3, [pc, #288]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003238:	4a46      	ldr	r2, [pc, #280]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800323a:	f023 0304 	bic.w	r3, r3, #4
 800323e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324a:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800324e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003250:	2300      	movs	r3, #0
 8003252:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003254:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003258:	460b      	mov	r3, r1
 800325a:	4313      	orrs	r3, r2
 800325c:	d042      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800325e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003262:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003266:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800326a:	d022      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800326c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003270:	d81b      	bhi.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8003272:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003276:	d011      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8003278:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800327c:	d815      	bhi.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d019      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x902>
 8003282:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003286:	d110      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800328c:	3308      	adds	r3, #8
 800328e:	4618      	mov	r0, r3
 8003290:	f002 f9e4 	bl	800565c <RCCEx_PLL2_Config>
 8003294:	4603      	mov	r3, r0
 8003296:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800329a:	e00d      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800329c:	4b2d      	ldr	r3, [pc, #180]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	4a2c      	ldr	r2, [pc, #176]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80032a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a6:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80032a8:	e006      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80032b0:	e002      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 80032b2:	bf00      	nop
 80032b4:	e000      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 80032b6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80032b8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10d      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80032c0:	4b24      	ldr	r3, [pc, #144]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80032c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80032ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032d2:	4a20      	ldr	r2, [pc, #128]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80032d4:	430b      	orrs	r3, r1
 80032d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032da:	e003      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032dc:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80032e0:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80032e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ec:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80032f0:	653b      	str	r3, [r7, #80]	; 0x50
 80032f2:	2300      	movs	r3, #0
 80032f4:	657b      	str	r3, [r7, #84]	; 0x54
 80032f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80032fa:	460b      	mov	r3, r1
 80032fc:	4313      	orrs	r3, r2
 80032fe:	d031      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003304:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800330c:	d00b      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800330e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003312:	d804      	bhi.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331c:	d007      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003324:	e004      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8003326:	bf00      	nop
 8003328:	e002      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800332a:	bf00      	nop
 800332c:	e000      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800332e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003330:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003334:	2b00      	cmp	r3, #0
 8003336:	d111      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003338:	4b06      	ldr	r3, [pc, #24]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800333a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800333e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003346:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800334a:	4a02      	ldr	r2, [pc, #8]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800334c:	430b      	orrs	r3, r1
 800334e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003352:	e007      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8003354:	46020c00 	.word	0x46020c00
 8003358:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003360:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8003364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336c:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003370:	64bb      	str	r3, [r7, #72]	; 0x48
 8003372:	2300      	movs	r3, #0
 8003374:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003376:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800337a:	460b      	mov	r3, r1
 800337c:	4313      	orrs	r3, r2
 800337e:	d00c      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8003380:	4bb2      	ldr	r3, [pc, #712]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003382:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003386:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800338a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800338e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003392:	4aae      	ldr	r2, [pc, #696]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003394:	430b      	orrs	r3, r1
 8003396:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800339a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800339e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80033a6:	643b      	str	r3, [r7, #64]	; 0x40
 80033a8:	2300      	movs	r3, #0
 80033aa:	647b      	str	r3, [r7, #68]	; 0x44
 80033ac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80033b0:	460b      	mov	r3, r1
 80033b2:	4313      	orrs	r3, r2
 80033b4:	d019      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80033b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033c2:	d105      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80033c4:	4ba1      	ldr	r3, [pc, #644]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80033c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c8:	4aa0      	ldr	r2, [pc, #640]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80033ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ce:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80033d0:	4b9e      	ldr	r3, [pc, #632]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80033d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80033d6:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80033da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033e2:	4a9a      	ldr	r2, [pc, #616]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80033e4:	430b      	orrs	r3, r1
 80033e6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80033ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80033f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80033f8:	2300      	movs	r3, #0
 80033fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033fc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003400:	460b      	mov	r3, r1
 8003402:	4313      	orrs	r3, r2
 8003404:	d00c      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003406:	4b91      	ldr	r3, [pc, #580]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800340c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003414:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003418:	4a8c      	ldr	r2, [pc, #560]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800341a:	430b      	orrs	r3, r1
 800341c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003420:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003428:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800342c:	633b      	str	r3, [r7, #48]	; 0x30
 800342e:	2300      	movs	r3, #0
 8003430:	637b      	str	r3, [r7, #52]	; 0x34
 8003432:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003436:	460b      	mov	r3, r1
 8003438:	4313      	orrs	r3, r2
 800343a:	d00c      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800343c:	4b83      	ldr	r3, [pc, #524]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800343e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003442:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800344a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800344e:	4a7f      	ldr	r2, [pc, #508]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003450:	430b      	orrs	r3, r1
 8003452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800345a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003462:	62bb      	str	r3, [r7, #40]	; 0x28
 8003464:	2300      	movs	r3, #0
 8003466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003468:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800346c:	460b      	mov	r3, r1
 800346e:	4313      	orrs	r3, r2
 8003470:	d00c      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003472:	4b76      	ldr	r3, [pc, #472]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003474:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003478:	f023 0218 	bic.w	r2, r3, #24
 800347c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003480:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003484:	4971      	ldr	r1, [pc, #452]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800348c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003498:	623b      	str	r3, [r7, #32]
 800349a:	2300      	movs	r3, #0
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
 800349e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80034a2:	460b      	mov	r3, r1
 80034a4:	4313      	orrs	r3, r2
 80034a6:	d032      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80034a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80034b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034b4:	d105      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034b6:	4b65      	ldr	r3, [pc, #404]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80034b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ba:	4a64      	ldr	r2, [pc, #400]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80034bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c0:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80034c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80034ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034ce:	d108      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034d4:	3308      	adds	r3, #8
 80034d6:	4618      	mov	r0, r3
 80034d8:	f002 f8c0 	bl	800565c <RCCEx_PLL2_Config>
 80034dc:	4603      	mov	r3, r0
 80034de:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    }
    if (ret == HAL_OK)
 80034e2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10d      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80034ea:	4b58      	ldr	r3, [pc, #352]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80034ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80034f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80034fc:	4953      	ldr	r1, [pc, #332]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8003504:	e003      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003506:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800350a:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800350e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003516:	2100      	movs	r1, #0
 8003518:	61b9      	str	r1, [r7, #24]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	61fb      	str	r3, [r7, #28]
 8003520:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003524:	460b      	mov	r3, r1
 8003526:	4313      	orrs	r3, r2
 8003528:	d04a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800352a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800352e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003532:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003536:	d01e      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8003538:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800353c:	d825      	bhi.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800353e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003542:	d00e      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003544:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003548:	d81f      	bhi.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800354a:	2b00      	cmp	r3, #0
 800354c:	d021      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800354e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003552:	d11a      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003554:	4b3d      	ldr	r3, [pc, #244]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	4a3c      	ldr	r2, [pc, #240]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800355a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800355e:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8003560:	e018      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003566:	3308      	adds	r3, #8
 8003568:	4618      	mov	r0, r3
 800356a:	f002 f877 	bl	800565c <RCCEx_PLL2_Config>
 800356e:	4603      	mov	r3, r0
 8003570:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8003574:	e00e      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800357a:	332c      	adds	r3, #44	; 0x2c
 800357c:	4618      	mov	r0, r3
 800357e:	f002 f905 	bl	800578c <RCCEx_PLL3_Config>
 8003582:	4603      	mov	r3, r0
 8003584:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8003588:	e004      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003590:	e000      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 8003592:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003594:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10d      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800359c:	4b2b      	ldr	r3, [pc, #172]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800359e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80035a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80035ae:	4927      	ldr	r1, [pc, #156]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80035b6:	e003      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80035bc:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80035c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80035d6:	460b      	mov	r3, r1
 80035d8:	4313      	orrs	r3, r2
 80035da:	d03d      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80035dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035e8:	d00e      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80035ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035ee:	d815      	bhi.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d017      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80035f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035f8:	d110      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035fa:	4b14      	ldr	r3, [pc, #80]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	4a13      	ldr	r2, [pc, #76]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003604:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003606:	e00e      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800360c:	3308      	adds	r3, #8
 800360e:	4618      	mov	r0, r3
 8003610:	f002 f824 	bl	800565c <RCCEx_PLL2_Config>
 8003614:	4603      	mov	r3, r0
 8003616:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800361a:	e004      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003622:	e000      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8003624:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003626:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800362a:	2b00      	cmp	r3, #0
 800362c:	d110      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800362e:	4b07      	ldr	r3, [pc, #28]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003634:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800363c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003640:	4902      	ldr	r1, [pc, #8]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003648:	e006      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 800364a:	bf00      	nop
 800364c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003650:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003654:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8003658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800366e:	460b      	mov	r3, r1
 8003670:	4313      	orrs	r3, r2
 8003672:	d00c      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8003674:	4b2c      	ldr	r3, [pc, #176]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003676:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800367a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800367e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003682:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003686:	4928      	ldr	r1, [pc, #160]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800368e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003696:	2100      	movs	r1, #0
 8003698:	6039      	str	r1, [r7, #0]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	607b      	str	r3, [r7, #4]
 80036a0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80036a4:	460b      	mov	r3, r1
 80036a6:	4313      	orrs	r3, r2
 80036a8:	d036      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 80036aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80036b2:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80036b6:	d00d      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80036b8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80036bc:	d811      	bhi.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80036be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036c2:	d012      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80036c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036c8:	d80b      	bhi.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00d      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80036ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d2:	d106      	bne.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80036d4:	4b14      	ldr	r3, [pc, #80]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	4a13      	ldr	r2, [pc, #76]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80036da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036de:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 80036e0:	e004      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80036e8:	e000      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 80036ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ec:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10d      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 80036f4:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80036f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80036fa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80036fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003702:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003706:	4908      	ldr	r1, [pc, #32]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800370e:	e003      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003710:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003714:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8003718:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
}
 800371c:	4618      	mov	r0, r3
 800371e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003722:	46bd      	mov	sp, r7
 8003724:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003728:	46020c00 	.word	0x46020c00

0800372c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800372c:	b480      	push	{r7}
 800372e:	b089      	sub	sp, #36	; 0x24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003734:	4bad      	ldr	r3, [pc, #692]	; (80039ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800373c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800373e:	4bab      	ldr	r3, [pc, #684]	; (80039ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003748:	4ba8      	ldr	r3, [pc, #672]	; (80039ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800374a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374c:	0a1b      	lsrs	r3, r3, #8
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	3301      	adds	r3, #1
 8003754:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003756:	4ba5      	ldr	r3, [pc, #660]	; (80039ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	091b      	lsrs	r3, r3, #4
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003762:	4ba2      	ldr	r3, [pc, #648]	; (80039ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	08db      	lsrs	r3, r3, #3
 8003768:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800377a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 8123 	beq.w	80039cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	2b03      	cmp	r3, #3
 800378a:	d062      	beq.n	8003852 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2b03      	cmp	r3, #3
 8003790:	f200 8081 	bhi.w	8003896 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d024      	beq.n	80037e4 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d17a      	bne.n	8003896 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	ee07 3a90 	vmov	s15, r3
 80037a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037aa:	eddf 6a91 	vldr	s13, [pc, #580]	; 80039f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80037ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037b2:	4b8e      	ldr	r3, [pc, #568]	; (80039ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80037b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80037c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80037c6:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80039f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80037ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80037d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037e2:	e08f      	b.n	8003904 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80037e4:	4b81      	ldr	r3, [pc, #516]	; (80039ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 80037f0:	4b7e      	ldr	r3, [pc, #504]	; (80039ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	0f1b      	lsrs	r3, r3, #28
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	e006      	b.n	800380a <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 80037fc:	4b7b      	ldr	r3, [pc, #492]	; (80039ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80037fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003802:	041b      	lsls	r3, r3, #16
 8003804:	0f1b      	lsrs	r3, r3, #28
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	4a7b      	ldr	r2, [pc, #492]	; (80039f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 800380c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003810:	ee07 3a90 	vmov	s15, r3
 8003814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	ee07 3a90 	vmov	s15, r3
 800382c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003830:	ed97 6a02 	vldr	s12, [r7, #8]
 8003834:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80039f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003838:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800383c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003840:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003844:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800384c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003850:	e058      	b.n	8003904 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	ee07 3a90 	vmov	s15, r3
 8003858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385c:	eddf 6a64 	vldr	s13, [pc, #400]	; 80039f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003860:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003864:	4b61      	ldr	r3, [pc, #388]	; (80039ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800386c:	ee07 3a90 	vmov	s15, r3
 8003870:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003874:	ed97 6a02 	vldr	s12, [r7, #8]
 8003878:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80039f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800387c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003880:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003884:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003888:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800388c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003890:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003894:	e036      	b.n	8003904 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003896:	4b55      	ldr	r3, [pc, #340]	; (80039ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 80038a2:	4b52      	ldr	r3, [pc, #328]	; (80039ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	0f1b      	lsrs	r3, r3, #28
 80038a8:	f003 030f 	and.w	r3, r3, #15
 80038ac:	e006      	b.n	80038bc <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 80038ae:	4b4f      	ldr	r3, [pc, #316]	; (80039ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80038b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038b4:	041b      	lsls	r3, r3, #16
 80038b6:	0f1b      	lsrs	r3, r3, #28
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	4a4e      	ldr	r2, [pc, #312]	; (80039f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 80038be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c2:	ee07 3a90 	vmov	s15, r3
 80038c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	ee07 3a90 	vmov	s15, r3
 80038d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80038e6:	eddf 5a43 	vldr	s11, [pc, #268]	; 80039f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80038ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80038fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003902:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003904:	4b39      	ldr	r3, [pc, #228]	; (80039ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d017      	beq.n	8003940 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003910:	4b36      	ldr	r3, [pc, #216]	; (80039ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003914:	0a5b      	lsrs	r3, r3, #9
 8003916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800391a:	ee07 3a90 	vmov	s15, r3
 800391e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8003922:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003926:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800392a:	edd7 6a07 	vldr	s13, [r7, #28]
 800392e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003936:	ee17 2a90 	vmov	r2, s15
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	e002      	b.n	8003946 <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003946:	4b29      	ldr	r3, [pc, #164]	; (80039ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d017      	beq.n	8003982 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003952:	4b26      	ldr	r3, [pc, #152]	; (80039ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003956:	0c1b      	lsrs	r3, r3, #16
 8003958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800395c:	ee07 3a90 	vmov	s15, r3
 8003960:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003964:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003968:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800396c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003978:	ee17 2a90 	vmov	r2, s15
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	605a      	str	r2, [r3, #4]
 8003980:	e002      	b.n	8003988 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003988:	4b18      	ldr	r3, [pc, #96]	; (80039ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d017      	beq.n	80039c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003994:	4b15      	ldr	r3, [pc, #84]	; (80039ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003998:	0e1b      	lsrs	r3, r3, #24
 800399a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800399e:	ee07 3a90 	vmov	s15, r3
 80039a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80039a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039aa:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80039ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80039b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039ba:	ee17 2a90 	vmov	r2, s15
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80039c2:	e00c      	b.n	80039de <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	609a      	str	r2, [r3, #8]
}
 80039ca:	e008      	b.n	80039de <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	609a      	str	r2, [r3, #8]
}
 80039de:	bf00      	nop
 80039e0:	3724      	adds	r7, #36	; 0x24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	46020c00 	.word	0x46020c00
 80039f0:	4b742400 	.word	0x4b742400
 80039f4:	46000000 	.word	0x46000000
 80039f8:	08006fb0 	.word	0x08006fb0

080039fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b089      	sub	sp, #36	; 0x24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003a04:	4bad      	ldr	r3, [pc, #692]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a0c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003a0e:	4bab      	ldr	r3, [pc, #684]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003a18:	4ba8      	ldr	r3, [pc, #672]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	0a1b      	lsrs	r3, r3, #8
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	3301      	adds	r3, #1
 8003a24:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003a26:	4ba5      	ldr	r3, [pc, #660]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	091b      	lsrs	r3, r3, #4
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003a32:	4ba2      	ldr	r3, [pc, #648]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	08db      	lsrs	r3, r3, #3
 8003a38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	fb02 f303 	mul.w	r3, r2, r3
 8003a42:	ee07 3a90 	vmov	s15, r3
 8003a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a4a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 8123 	beq.w	8003c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2b03      	cmp	r3, #3
 8003a5a:	d062      	beq.n	8003b22 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	f200 8081 	bhi.w	8003b66 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d024      	beq.n	8003ab4 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d17a      	bne.n	8003b66 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	ee07 3a90 	vmov	s15, r3
 8003a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7a:	eddf 6a91 	vldr	s13, [pc, #580]	; 8003cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a82:	4b8e      	ldr	r3, [pc, #568]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a92:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a96:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8003cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ab2:	e08f      	b.n	8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003ab4:	4b81      	ldr	r3, [pc, #516]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8003ac0:	4b7e      	ldr	r3, [pc, #504]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	0f1b      	lsrs	r3, r3, #28
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	e006      	b.n	8003ada <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8003acc:	4b7b      	ldr	r3, [pc, #492]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ace:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ad2:	041b      	lsls	r3, r3, #16
 8003ad4:	0f1b      	lsrs	r3, r3, #28
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	4a7b      	ldr	r2, [pc, #492]	; (8003cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8003adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae0:	ee07 3a90 	vmov	s15, r3
 8003ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	ee07 3a90 	vmov	s15, r3
 8003aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	ee07 3a90 	vmov	s15, r3
 8003afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b00:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b04:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003b08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b14:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b20:	e058      	b.n	8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	ee07 3a90 	vmov	s15, r3
 8003b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2c:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003b30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b34:	4b61      	ldr	r3, [pc, #388]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b3c:	ee07 3a90 	vmov	s15, r3
 8003b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b44:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b48:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003b4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003b50:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b58:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b64:	e036      	b.n	8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003b66:	4b55      	ldr	r3, [pc, #340]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8003b72:	4b52      	ldr	r3, [pc, #328]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	0f1b      	lsrs	r3, r3, #28
 8003b78:	f003 030f 	and.w	r3, r3, #15
 8003b7c:	e006      	b.n	8003b8c <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8003b7e:	4b4f      	ldr	r3, [pc, #316]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003b80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b84:	041b      	lsls	r3, r3, #16
 8003b86:	0f1b      	lsrs	r3, r3, #28
 8003b88:	f003 030f 	and.w	r3, r3, #15
 8003b8c:	4a4e      	ldr	r2, [pc, #312]	; (8003cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8003b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b92:	ee07 3a90 	vmov	s15, r3
 8003b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	ee07 3a90 	vmov	s15, r3
 8003ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	ee07 3a90 	vmov	s15, r3
 8003bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bb6:	eddf 5a43 	vldr	s11, [pc, #268]	; 8003cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bd2:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003bd4:	4b39      	ldr	r3, [pc, #228]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d017      	beq.n	8003c10 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003be0:	4b36      	ldr	r3, [pc, #216]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be4:	0a5b      	lsrs	r3, r3, #9
 8003be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bea:	ee07 3a90 	vmov	s15, r3
 8003bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8003bf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bf6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003bfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c06:	ee17 2a90 	vmov	r2, s15
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	e002      	b.n	8003c16 <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003c16:	4b29      	ldr	r3, [pc, #164]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d017      	beq.n	8003c52 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003c22:	4b26      	ldr	r3, [pc, #152]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c26:	0c1b      	lsrs	r3, r3, #16
 8003c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c2c:	ee07 3a90 	vmov	s15, r3
 8003c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003c34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c38:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003c3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c48:	ee17 2a90 	vmov	r2, s15
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	605a      	str	r2, [r3, #4]
 8003c50:	e002      	b.n	8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003c58:	4b18      	ldr	r3, [pc, #96]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d017      	beq.n	8003c94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003c64:	4b15      	ldr	r3, [pc, #84]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c68:	0e1b      	lsrs	r3, r3, #24
 8003c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c6e:	ee07 3a90 	vmov	s15, r3
 8003c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8003c76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c7a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003c7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c8a:	ee17 2a90 	vmov	r2, s15
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003c92:	e00c      	b.n	8003cae <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	609a      	str	r2, [r3, #8]
}
 8003c9a:	e008      	b.n	8003cae <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	609a      	str	r2, [r3, #8]
}
 8003cae:	bf00      	nop
 8003cb0:	3724      	adds	r7, #36	; 0x24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	46020c00 	.word	0x46020c00
 8003cc0:	4b742400 	.word	0x4b742400
 8003cc4:	46000000 	.word	0x46000000
 8003cc8:	08006fb0 	.word	0x08006fb0

08003ccc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b089      	sub	sp, #36	; 0x24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003cd4:	4bad      	ldr	r3, [pc, #692]	; (8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cdc:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8003cde:	4bab      	ldr	r3, [pc, #684]	; (8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8003ce8:	4ba8      	ldr	r3, [pc, #672]	; (8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	0a1b      	lsrs	r3, r3, #8
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8003cf6:	4ba5      	ldr	r3, [pc, #660]	; (8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	091b      	lsrs	r3, r3, #4
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003d02:	4ba2      	ldr	r3, [pc, #648]	; (8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d06:	08db      	lsrs	r3, r3, #3
 8003d08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	fb02 f303 	mul.w	r3, r2, r3
 8003d12:	ee07 3a90 	vmov	s15, r3
 8003d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d1a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 8123 	beq.w	8003f6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d062      	beq.n	8003df2 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	f200 8081 	bhi.w	8003e36 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d024      	beq.n	8003d84 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d17a      	bne.n	8003e36 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	ee07 3a90 	vmov	s15, r3
 8003d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d4a:	eddf 6a91 	vldr	s13, [pc, #580]	; 8003f90 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d52:	4b8e      	ldr	r3, [pc, #568]	; (8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5a:	ee07 3a90 	vmov	s15, r3
 8003d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d62:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d66:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8003f94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8003d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7e:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8003d82:	e08f      	b.n	8003ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003d84:	4b81      	ldr	r3, [pc, #516]	; (8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8003d90:	4b7e      	ldr	r3, [pc, #504]	; (8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	0f1b      	lsrs	r3, r3, #28
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	e006      	b.n	8003daa <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8003d9c:	4b7b      	ldr	r3, [pc, #492]	; (8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003d9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003da2:	041b      	lsls	r3, r3, #16
 8003da4:	0f1b      	lsrs	r3, r3, #28
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	4a7b      	ldr	r2, [pc, #492]	; (8003f98 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8003dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db0:	ee07 3a90 	vmov	s15, r3
 8003db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	ee07 3a90 	vmov	s15, r3
 8003dcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dd0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dd4:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003f94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8003dd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ddc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003de0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003de4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003df0:	e058      	b.n	8003ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	ee07 3a90 	vmov	s15, r3
 8003df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dfc:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003f90 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003e00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e04:	4b61      	ldr	r3, [pc, #388]	; (8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e0c:	ee07 3a90 	vmov	s15, r3
 8003e10:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e14:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e18:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003f94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8003e1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003e20:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e28:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e34:	e036      	b.n	8003ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003e36:	4b55      	ldr	r3, [pc, #340]	; (8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 8003e42:	4b52      	ldr	r3, [pc, #328]	; (8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	0f1b      	lsrs	r3, r3, #28
 8003e48:	f003 030f 	and.w	r3, r3, #15
 8003e4c:	e006      	b.n	8003e5c <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 8003e4e:	4b4f      	ldr	r3, [pc, #316]	; (8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003e50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e54:	041b      	lsls	r3, r3, #16
 8003e56:	0f1b      	lsrs	r3, r3, #28
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	4a4e      	ldr	r2, [pc, #312]	; (8003f98 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8003e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e62:	ee07 3a90 	vmov	s15, r3
 8003e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	ee07 3a90 	vmov	s15, r3
 8003e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	ee07 3a90 	vmov	s15, r3
 8003e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e82:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e86:	eddf 5a43 	vldr	s11, [pc, #268]	; 8003f94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8003e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ea2:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8003ea4:	4b39      	ldr	r3, [pc, #228]	; (8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d017      	beq.n	8003ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003eb0:	4b36      	ldr	r3, [pc, #216]	; (8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb4:	0a5b      	lsrs	r3, r3, #9
 8003eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8003ec2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ec6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003eca:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ed6:	ee17 2a90 	vmov	r2, s15
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	e002      	b.n	8003ee6 <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8003ee6:	4b29      	ldr	r3, [pc, #164]	; (8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d017      	beq.n	8003f22 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003ef2:	4b26      	ldr	r3, [pc, #152]	; (8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	0c1b      	lsrs	r3, r3, #16
 8003ef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003efc:	ee07 3a90 	vmov	s15, r3
 8003f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8003f04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f08:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003f0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f18:	ee17 2a90 	vmov	r2, s15
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	605a      	str	r2, [r3, #4]
 8003f20:	e002      	b.n	8003f28 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8003f28:	4b18      	ldr	r3, [pc, #96]	; (8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d017      	beq.n	8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003f34:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f38:	0e1b      	lsrs	r3, r3, #24
 8003f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8003f46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f4a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003f4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f5a:	ee17 2a90 	vmov	r2, s15
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8003f62:	e00c      	b.n	8003f7e <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	609a      	str	r2, [r3, #8]
}
 8003f6a:	e008      	b.n	8003f7e <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	609a      	str	r2, [r3, #8]
}
 8003f7e:	bf00      	nop
 8003f80:	3724      	adds	r7, #36	; 0x24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	46020c00 	.word	0x46020c00
 8003f90:	4b742400 	.word	0x4b742400
 8003f94:	46000000 	.word	0x46000000
 8003f98:	08006fb0 	.word	0x08006fb0

08003f9c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08e      	sub	sp, #56	; 0x38
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003fa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003faa:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8003fae:	430b      	orrs	r3, r1
 8003fb0:	d145      	bne.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003fb2:	4ba7      	ldr	r3, [pc, #668]	; (8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fbc:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003fbe:	4ba4      	ldr	r3, [pc, #656]	; (8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003fc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d108      	bne.n	8003fde <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fd2:	d104      	bne.n	8003fde <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8003fd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8003fda:	f001 bb2f 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003fde:	4b9c      	ldr	r3, [pc, #624]	; (8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fe8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fec:	d114      	bne.n	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8003fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff4:	d110      	bne.n	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003ff6:	4b96      	ldr	r3, [pc, #600]	; (8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003ff8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004000:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004004:	d103      	bne.n	800400e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004006:	23fa      	movs	r3, #250	; 0xfa
 8004008:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800400a:	f001 bb17 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
      else
      {
        frequency = LSI_VALUE;
 800400e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004012:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004014:	f001 bb12 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004018:	4b8d      	ldr	r3, [pc, #564]	; (8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004020:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004024:	d107      	bne.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004028:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800402c:	d103      	bne.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800402e:	4b89      	ldr	r3, [pc, #548]	; (8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004030:	637b      	str	r3, [r7, #52]	; 0x34
 8004032:	f001 bb03 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	637b      	str	r3, [r7, #52]	; 0x34
 800403a:	f001 baff 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800403e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004042:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004046:	430b      	orrs	r3, r1
 8004048:	d151      	bne.n	80040ee <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800404a:	4b81      	ldr	r3, [pc, #516]	; (8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800404c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004050:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004054:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	2b80      	cmp	r3, #128	; 0x80
 800405a:	d035      	beq.n	80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800405c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405e:	2b80      	cmp	r3, #128	; 0x80
 8004060:	d841      	bhi.n	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004064:	2b60      	cmp	r3, #96	; 0x60
 8004066:	d02a      	beq.n	80040be <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406a:	2b60      	cmp	r3, #96	; 0x60
 800406c:	d83b      	bhi.n	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800406e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004070:	2b40      	cmp	r3, #64	; 0x40
 8004072:	d009      	beq.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004076:	2b40      	cmp	r3, #64	; 0x40
 8004078:	d835      	bhi.n	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800407a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00c      	beq.n	800409a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004082:	2b20      	cmp	r3, #32
 8004084:	d012      	beq.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004086:	e02e      	b.n	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff fb4d 	bl	800372c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004096:	f001 bad1 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800409a:	f107 0318 	add.w	r3, r7, #24
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff fcac 	bl	80039fc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040a8:	f001 bac8 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80040ac:	f107 030c 	add.w	r3, r7, #12
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff fe0b 	bl	8003ccc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040ba:	f001 babf 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80040be:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80040c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040c4:	f001 baba 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80040c8:	4b61      	ldr	r3, [pc, #388]	; (8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d4:	d103      	bne.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80040d6:	4b60      	ldr	r3, [pc, #384]	; (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80040d8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80040da:	f001 baaf 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 80040de:	2300      	movs	r3, #0
 80040e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040e2:	f001 baab 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      default :
      {
        frequency = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040ea:	f001 baa7 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80040ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040f2:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80040f6:	430b      	orrs	r3, r1
 80040f8:	d158      	bne.n	80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80040fa:	4b55      	ldr	r3, [pc, #340]	; (8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80040fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004100:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004104:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800410c:	d03b      	beq.n	8004186 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004114:	d846      	bhi.n	80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800411c:	d02e      	beq.n	800417c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004120:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004124:	d83e      	bhi.n	80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800412c:	d00b      	beq.n	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800412e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004134:	d836      	bhi.n	80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00d      	beq.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004142:	d012      	beq.n	800416a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8004144:	e02e      	b.n	80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff faee 	bl	800372c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004154:	f001 ba72 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004158:	f107 0318 	add.w	r3, r7, #24
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff fc4d 	bl	80039fc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004166:	f001 ba69 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800416a:	f107 030c 	add.w	r3, r7, #12
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff fdac 	bl	8003ccc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004178:	f001 ba60 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800417c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004180:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004182:	f001 ba5b 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004186:	4b32      	ldr	r3, [pc, #200]	; (8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004192:	d103      	bne.n	800419c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8004194:	4b30      	ldr	r3, [pc, #192]	; (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004196:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004198:	f001 ba50 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041a0:	f001 ba4c 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      default :

        frequency = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041a8:	f001 ba48 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80041ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041b0:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80041b4:	430b      	orrs	r3, r1
 80041b6:	d126      	bne.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80041b8:	4b25      	ldr	r3, [pc, #148]	; (8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80041ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80041be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041c2:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80041c4:	4b22      	ldr	r3, [pc, #136]	; (8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d0:	d106      	bne.n	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d103      	bne.n	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80041d8:	4b1f      	ldr	r3, [pc, #124]	; (8004258 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80041da:	637b      	str	r3, [r7, #52]	; 0x34
 80041dc:	f001 ba2e 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80041e0:	4b1b      	ldr	r3, [pc, #108]	; (8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ec:	d107      	bne.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80041ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f4:	d103      	bne.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80041f6:	4b19      	ldr	r3, [pc, #100]	; (800425c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80041f8:	637b      	str	r3, [r7, #52]	; 0x34
 80041fa:	f001 ba1f 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	637b      	str	r3, [r7, #52]	; 0x34
 8004202:	f001 ba1b 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004206:	e9d7 2300 	ldrd	r2, r3, [r7]
 800420a:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800420e:	430b      	orrs	r3, r1
 8004210:	d16e      	bne.n	80042f0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004212:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004218:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800421c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004220:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004224:	d03d      	beq.n	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800422c:	d85c      	bhi.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800422e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004230:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004234:	d014      	beq.n	8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800423c:	d854      	bhi.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800423e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01f      	beq.n	8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800424a:	d012      	beq.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800424c:	e04c      	b.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800424e:	bf00      	nop
 8004250:	46020c00 	.word	0x46020c00
 8004254:	0007a120 	.word	0x0007a120
 8004258:	00f42400 	.word	0x00f42400
 800425c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff fa61 	bl	800372c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800426e:	f001 b9e5 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004272:	f107 0318 	add.w	r3, r7, #24
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff fbc0 	bl	80039fc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004280:	f001 b9dc 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004284:	4ba7      	ldr	r3, [pc, #668]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800428c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004290:	d103      	bne.n	800429a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8004292:	4ba5      	ldr	r3, [pc, #660]	; (8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004294:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004296:	f001 b9d1 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 800429a:	2300      	movs	r3, #0
 800429c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800429e:	f001 b9cd 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80042a2:	4ba0      	ldr	r3, [pc, #640]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	d118      	bne.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80042ae:	4b9d      	ldr	r3, [pc, #628]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80042ba:	4b9a      	ldr	r3, [pc, #616]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	0e1b      	lsrs	r3, r3, #24
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	e006      	b.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80042c6:	4b97      	ldr	r3, [pc, #604]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80042c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042cc:	041b      	lsls	r3, r3, #16
 80042ce:	0e1b      	lsrs	r3, r3, #24
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	4a95      	ldr	r2, [pc, #596]	; (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80042d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042da:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80042dc:	f001 b9ae 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042e4:	f001 b9aa 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      default :

        frequency = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042ec:	f001 b9a6 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80042f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042f4:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80042f8:	430b      	orrs	r3, r1
 80042fa:	d17f      	bne.n	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80042fc:	4b89      	ldr	r3, [pc, #548]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80042fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004306:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430a:	2b00      	cmp	r3, #0
 800430c:	d165      	bne.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800430e:	4b85      	ldr	r3, [pc, #532]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004314:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004318:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800431a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004320:	d034      	beq.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004328:	d853      	bhi.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004330:	d00b      	beq.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8004332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004334:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004338:	d84b      	bhi.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433c:	2b00      	cmp	r3, #0
 800433e:	d016      	beq.n	800436e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8004340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004342:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004346:	d009      	beq.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8004348:	e043      	b.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800434a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff f9ec 	bl	800372c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004356:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004358:	f001 b970 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800435c:	f107 0318 	add.w	r3, r7, #24
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff fb4b 	bl	80039fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800436a:	f001 b967 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800436e:	4b6d      	ldr	r3, [pc, #436]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800437a:	d103      	bne.n	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800437c:	4b6a      	ldr	r3, [pc, #424]	; (8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800437e:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004380:	f001 b95c 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
            frequency = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004388:	f001 b958 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800438c:	4b65      	ldr	r3, [pc, #404]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0320 	and.w	r3, r3, #32
 8004394:	2b20      	cmp	r3, #32
 8004396:	d118      	bne.n	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004398:	4b62      	ldr	r3, [pc, #392]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d005      	beq.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 80043a4:	4b5f      	ldr	r3, [pc, #380]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	0e1b      	lsrs	r3, r3, #24
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	e006      	b.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80043b0:	4b5c      	ldr	r3, [pc, #368]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80043b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043b6:	041b      	lsls	r3, r3, #16
 80043b8:	0e1b      	lsrs	r3, r3, #24
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	4a5b      	ldr	r2, [pc, #364]	; (800452c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80043c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043c4:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80043c6:	f001 b939 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
            frequency = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80043ce:	f001 b935 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
        }
        default :
        {
          frequency = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80043d6:	f001 b931 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80043da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043e0:	d108      	bne.n	80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80043e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff f9a0 	bl	800372c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	637b      	str	r3, [r7, #52]	; 0x34
 80043f0:	f001 b924 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else
    {
      frequency = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	637b      	str	r3, [r7, #52]	; 0x34
 80043f8:	f001 b920 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80043fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004400:	1e51      	subs	r1, r2, #1
 8004402:	430b      	orrs	r3, r1
 8004404:	d136      	bne.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004406:	4b47      	ldr	r3, [pc, #284]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800440c:	f003 0303 	and.w	r3, r3, #3
 8004410:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	2b00      	cmp	r3, #0
 8004416:	d104      	bne.n	8004422 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004418:	f7fe fa1e 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 800441c:	6378      	str	r0, [r7, #52]	; 0x34
 800441e:	f001 b90d 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004424:	2b01      	cmp	r3, #1
 8004426:	d104      	bne.n	8004432 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004428:	f7fe f8e0 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 800442c:	6378      	str	r0, [r7, #52]	; 0x34
 800442e:	f001 b905 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004432:	4b3c      	ldr	r3, [pc, #240]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800443a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800443e:	d106      	bne.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8004440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004442:	2b02      	cmp	r3, #2
 8004444:	d103      	bne.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8004446:	4b3a      	ldr	r3, [pc, #232]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004448:	637b      	str	r3, [r7, #52]	; 0x34
 800444a:	f001 b8f7 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800444e:	4b35      	ldr	r3, [pc, #212]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004450:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b02      	cmp	r3, #2
 800445a:	d107      	bne.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	2b03      	cmp	r3, #3
 8004460:	d104      	bne.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8004462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004466:	637b      	str	r3, [r7, #52]	; 0x34
 8004468:	f001 b8e8 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	637b      	str	r3, [r7, #52]	; 0x34
 8004470:	f001 b8e4 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8004474:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004478:	1e91      	subs	r1, r2, #2
 800447a:	430b      	orrs	r3, r1
 800447c:	d136      	bne.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800447e:	4b29      	ldr	r3, [pc, #164]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004484:	f003 030c 	and.w	r3, r3, #12
 8004488:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	2b00      	cmp	r3, #0
 800448e:	d104      	bne.n	800449a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004490:	f7fe f9ce 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8004494:	6378      	str	r0, [r7, #52]	; 0x34
 8004496:	f001 b8d1 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	2b04      	cmp	r3, #4
 800449e:	d104      	bne.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80044a0:	f7fe f8a4 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 80044a4:	6378      	str	r0, [r7, #52]	; 0x34
 80044a6:	f001 b8c9 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80044aa:	4b1e      	ldr	r3, [pc, #120]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b6:	d106      	bne.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80044b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ba:	2b08      	cmp	r3, #8
 80044bc:	d103      	bne.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 80044be:	4b1c      	ldr	r3, [pc, #112]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80044c0:	637b      	str	r3, [r7, #52]	; 0x34
 80044c2:	f001 b8bb 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80044c6:	4b17      	ldr	r3, [pc, #92]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80044c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d107      	bne.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80044d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d6:	2b0c      	cmp	r3, #12
 80044d8:	d104      	bne.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 80044da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044de:	637b      	str	r3, [r7, #52]	; 0x34
 80044e0:	f001 b8ac 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	637b      	str	r3, [r7, #52]	; 0x34
 80044e8:	f001 b8a8 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80044ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044f0:	1f11      	subs	r1, r2, #4
 80044f2:	430b      	orrs	r3, r1
 80044f4:	d13f      	bne.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80044f6:	4b0b      	ldr	r3, [pc, #44]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80044f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004500:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	2b00      	cmp	r3, #0
 8004506:	d104      	bne.n	8004512 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004508:	f7fe f992 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 800450c:	6378      	str	r0, [r7, #52]	; 0x34
 800450e:	f001 b895 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	2b10      	cmp	r3, #16
 8004516:	d10d      	bne.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004518:	f7fe f868 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 800451c:	6378      	str	r0, [r7, #52]	; 0x34
 800451e:	f001 b88d 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8004522:	bf00      	nop
 8004524:	46020c00 	.word	0x46020c00
 8004528:	02dc6c00 	.word	0x02dc6c00
 800452c:	08006fb0 	.word	0x08006fb0
 8004530:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004534:	4ba8      	ldr	r3, [pc, #672]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004540:	d106      	bne.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8004542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004544:	2b20      	cmp	r3, #32
 8004546:	d103      	bne.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8004548:	4ba4      	ldr	r3, [pc, #656]	; (80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800454a:	637b      	str	r3, [r7, #52]	; 0x34
 800454c:	f001 b876 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004550:	4ba1      	ldr	r3, [pc, #644]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004552:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b02      	cmp	r3, #2
 800455c:	d107      	bne.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	2b30      	cmp	r3, #48	; 0x30
 8004562:	d104      	bne.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8004564:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004568:	637b      	str	r3, [r7, #52]	; 0x34
 800456a:	f001 b867 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	637b      	str	r3, [r7, #52]	; 0x34
 8004572:	f001 b863 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8004576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800457a:	f1a2 0108 	sub.w	r1, r2, #8
 800457e:	430b      	orrs	r3, r1
 8004580:	d136      	bne.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004582:	4b95      	ldr	r3, [pc, #596]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004588:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800458c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	2b00      	cmp	r3, #0
 8004592:	d104      	bne.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004594:	f7fe f94c 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8004598:	6378      	str	r0, [r7, #52]	; 0x34
 800459a:	f001 b84f 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a0:	2b40      	cmp	r3, #64	; 0x40
 80045a2:	d104      	bne.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80045a4:	f7fe f822 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 80045a8:	6378      	str	r0, [r7, #52]	; 0x34
 80045aa:	f001 b847 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80045ae:	4b8a      	ldr	r3, [pc, #552]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ba:	d106      	bne.n	80045ca <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	2b80      	cmp	r3, #128	; 0x80
 80045c0:	d103      	bne.n	80045ca <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 80045c2:	4b86      	ldr	r3, [pc, #536]	; (80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80045c4:	637b      	str	r3, [r7, #52]	; 0x34
 80045c6:	f001 b839 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80045ca:	4b83      	ldr	r3, [pc, #524]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80045cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d107      	bne.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80045d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045da:	2bc0      	cmp	r3, #192	; 0xc0
 80045dc:	d104      	bne.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 80045de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045e2:	637b      	str	r3, [r7, #52]	; 0x34
 80045e4:	f001 b82a 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	637b      	str	r3, [r7, #52]	; 0x34
 80045ec:	f001 b826 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80045f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045f4:	f1a2 0110 	sub.w	r1, r2, #16
 80045f8:	430b      	orrs	r3, r1
 80045fa:	d139      	bne.n	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80045fc:	4b76      	ldr	r3, [pc, #472]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80045fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004606:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460a:	2b00      	cmp	r3, #0
 800460c:	d104      	bne.n	8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800460e:	f7fe f90f 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8004612:	6378      	str	r0, [r7, #52]	; 0x34
 8004614:	f001 b812 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800461e:	d104      	bne.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004620:	f7fd ffe4 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 8004624:	6378      	str	r0, [r7, #52]	; 0x34
 8004626:	f001 b809 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800462a:	4b6b      	ldr	r3, [pc, #428]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004636:	d107      	bne.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8004638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800463e:	d103      	bne.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8004640:	4b66      	ldr	r3, [pc, #408]	; (80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004642:	637b      	str	r3, [r7, #52]	; 0x34
 8004644:	f000 bffa 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004648:	4b63      	ldr	r3, [pc, #396]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800464a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b02      	cmp	r3, #2
 8004654:	d108      	bne.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8004656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004658:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800465c:	d104      	bne.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800465e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004662:	637b      	str	r3, [r7, #52]	; 0x34
 8004664:	f000 bfea 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	637b      	str	r3, [r7, #52]	; 0x34
 800466c:	f000 bfe6 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8004670:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004674:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 8004678:	430b      	orrs	r3, r1
 800467a:	d139      	bne.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800467c:	4b56      	ldr	r3, [pc, #344]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800467e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004682:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004686:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	2b00      	cmp	r3, #0
 800468c:	d104      	bne.n	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800468e:	f7fe f8cf 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8004692:	6378      	str	r0, [r7, #52]	; 0x34
 8004694:	f000 bfd2 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469e:	d104      	bne.n	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80046a0:	f7fd ffa4 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 80046a4:	6378      	str	r0, [r7, #52]	; 0x34
 80046a6:	f000 bfc9 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80046aa:	4b4b      	ldr	r3, [pc, #300]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b6:	d107      	bne.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80046b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046be:	d103      	bne.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 80046c0:	4b46      	ldr	r3, [pc, #280]	; (80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80046c2:	637b      	str	r3, [r7, #52]	; 0x34
 80046c4:	f000 bfba 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80046c8:	4b43      	ldr	r3, [pc, #268]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80046ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d108      	bne.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046dc:	d104      	bne.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 80046de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046e2:	637b      	str	r3, [r7, #52]	; 0x34
 80046e4:	f000 bfaa 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	637b      	str	r3, [r7, #52]	; 0x34
 80046ec:	f000 bfa6 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80046f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046f4:	f1a2 0120 	sub.w	r1, r2, #32
 80046f8:	430b      	orrs	r3, r1
 80046fa:	d158      	bne.n	80047ae <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80046fc:	4b36      	ldr	r3, [pc, #216]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80046fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470a:	2b00      	cmp	r3, #0
 800470c:	d104      	bne.n	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800470e:	f7fe f8b7 	bl	8002880 <HAL_RCC_GetPCLK3Freq>
 8004712:	6378      	str	r0, [r7, #52]	; 0x34
 8004714:	f000 bf92 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471a:	2b01      	cmp	r3, #1
 800471c:	d104      	bne.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800471e:	f7fd ff65 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 8004722:	6378      	str	r0, [r7, #52]	; 0x34
 8004724:	f000 bf8a 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004728:	4b2b      	ldr	r3, [pc, #172]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004734:	d106      	bne.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8004736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004738:	2b02      	cmp	r3, #2
 800473a:	d103      	bne.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800473c:	4b27      	ldr	r3, [pc, #156]	; (80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800473e:	637b      	str	r3, [r7, #52]	; 0x34
 8004740:	f000 bf7c 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004744:	4b24      	ldr	r3, [pc, #144]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004746:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b02      	cmp	r3, #2
 8004750:	d107      	bne.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8004752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004754:	2b03      	cmp	r3, #3
 8004756:	d104      	bne.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8004758:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800475c:	637b      	str	r3, [r7, #52]	; 0x34
 800475e:	f000 bf6d 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004762:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0320 	and.w	r3, r3, #32
 800476a:	2b20      	cmp	r3, #32
 800476c:	d11b      	bne.n	80047a6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004770:	2b04      	cmp	r3, #4
 8004772:	d118      	bne.n	80047a6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004774:	4b18      	ldr	r3, [pc, #96]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8004780:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	0e1b      	lsrs	r3, r3, #24
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	e006      	b.n	800479a <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800478c:	4b12      	ldr	r3, [pc, #72]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800478e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004792:	041b      	lsls	r3, r3, #16
 8004794:	0e1b      	lsrs	r3, r3, #24
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	4a11      	ldr	r2, [pc, #68]	; (80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800479c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047a0:	637b      	str	r3, [r7, #52]	; 0x34
 80047a2:	f000 bf4b 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	637b      	str	r3, [r7, #52]	; 0x34
 80047aa:	f000 bf47 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80047ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047b2:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80047b6:	430b      	orrs	r3, r1
 80047b8:	d172      	bne.n	80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80047ba:	4b07      	ldr	r3, [pc, #28]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80047bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047c0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80047c4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047cc:	d10a      	bne.n	80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80047ce:	f7fd ff0d 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 80047d2:	6378      	str	r0, [r7, #52]	; 0x34
 80047d4:	f000 bf32 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 80047d8:	46020c00 	.word	0x46020c00
 80047dc:	00f42400 	.word	0x00f42400
 80047e0:	08006fb0 	.word	0x08006fb0
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ea:	d108      	bne.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047ec:	f107 0318 	add.w	r3, r7, #24
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff f903 	bl	80039fc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	637b      	str	r3, [r7, #52]	; 0x34
 80047fa:	f000 bf1f 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80047fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004800:	2b00      	cmp	r3, #0
 8004802:	d104      	bne.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8004804:	f7fd fffa 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8004808:	6378      	str	r0, [r7, #52]	; 0x34
 800480a:	f000 bf17 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800480e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004810:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004814:	d122      	bne.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004816:	4baa      	ldr	r3, [pc, #680]	; (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b20      	cmp	r3, #32
 8004820:	d118      	bne.n	8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004822:	4ba7      	ldr	r3, [pc, #668]	; (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d005      	beq.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800482e:	4ba4      	ldr	r3, [pc, #656]	; (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	0e1b      	lsrs	r3, r3, #24
 8004834:	f003 030f 	and.w	r3, r3, #15
 8004838:	e006      	b.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800483a:	4ba1      	ldr	r3, [pc, #644]	; (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800483c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004840:	041b      	lsls	r3, r3, #16
 8004842:	0e1b      	lsrs	r3, r3, #24
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	4a9e      	ldr	r2, [pc, #632]	; (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800484a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800484e:	637b      	str	r3, [r7, #52]	; 0x34
 8004850:	f000 bef4 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
      else
      {
        frequency = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	637b      	str	r3, [r7, #52]	; 0x34
 8004858:	f000 bef0 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800485c:	4b98      	ldr	r3, [pc, #608]	; (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004864:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004868:	d107      	bne.n	800487a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800486a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004870:	d103      	bne.n	800487a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8004872:	4b95      	ldr	r3, [pc, #596]	; (8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 8004874:	637b      	str	r3, [r7, #52]	; 0x34
 8004876:	f000 bee1 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800487a:	4b91      	ldr	r3, [pc, #580]	; (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004886:	d107      	bne.n	8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8004888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800488e:	d103      	bne.n	8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8004890:	4b8d      	ldr	r3, [pc, #564]	; (8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 8004892:	637b      	str	r3, [r7, #52]	; 0x34
 8004894:	f000 bed2 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	637b      	str	r3, [r7, #52]	; 0x34
 800489c:	f000 bece 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80048a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048a4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80048a8:	430b      	orrs	r3, r1
 80048aa:	d158      	bne.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80048ac:	4b84      	ldr	r3, [pc, #528]	; (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 80048ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80048b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d84b      	bhi.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 80048be:	a201      	add	r2, pc, #4	; (adr r2, 80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 80048c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c4:	080048fd 	.word	0x080048fd
 80048c8:	080048d9 	.word	0x080048d9
 80048cc:	080048eb 	.word	0x080048eb
 80048d0:	08004907 	.word	0x08004907
 80048d4:	08004911 	.word	0x08004911
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fe ff25 	bl	800372c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048e6:	f000 bea9 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048ea:	f107 030c 	add.w	r3, r7, #12
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff f9ec 	bl	8003ccc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048f8:	f000 bea0 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80048fc:	f7fd ff7e 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8004900:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004902:	f000 be9b 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004906:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800490a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800490c:	f000 be96 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004910:	4b6b      	ldr	r3, [pc, #428]	; (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0320 	and.w	r3, r3, #32
 8004918:	2b20      	cmp	r3, #32
 800491a:	d118      	bne.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800491c:	4b68      	ldr	r3, [pc, #416]	; (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8004928:	4b65      	ldr	r3, [pc, #404]	; (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	0e1b      	lsrs	r3, r3, #24
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	e006      	b.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8004934:	4b62      	ldr	r3, [pc, #392]	; (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004936:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800493a:	041b      	lsls	r3, r3, #16
 800493c:	0e1b      	lsrs	r3, r3, #24
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	4a60      	ldr	r2, [pc, #384]	; (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8004944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004948:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800494a:	f000 be77 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004952:	f000 be73 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      default:

        frequency = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800495a:	f000 be6f 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800495e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004962:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8004966:	430b      	orrs	r3, r1
 8004968:	d167      	bne.n	8004a3a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800496a:	4b55      	ldr	r3, [pc, #340]	; (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800496c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004970:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004974:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004978:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800497c:	d036      	beq.n	80049ec <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004980:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004984:	d855      	bhi.n	8004a32 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004988:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800498c:	d029      	beq.n	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004990:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004994:	d84d      	bhi.n	8004a32 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004998:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800499c:	d013      	beq.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800499e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049a4:	d845      	bhi.n	8004a32 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 80049a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d015      	beq.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 80049ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b2:	d13e      	bne.n	8004a32 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80049b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fe feb7 	bl	800372c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049c2:	f000 be3b 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049c6:	f107 030c 	add.w	r3, r7, #12
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff f97e 	bl	8003ccc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049d4:	f000 be32 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80049d8:	f7fd ff10 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 80049dc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80049de:	f000 be2d 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80049e2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80049e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049e8:	f000 be28 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80049ec:	4b34      	ldr	r3, [pc, #208]	; (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0320 	and.w	r3, r3, #32
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d118      	bne.n	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80049f8:	4b31      	ldr	r3, [pc, #196]	; (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8004a04:	4b2e      	ldr	r3, [pc, #184]	; (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	0e1b      	lsrs	r3, r3, #24
 8004a0a:	f003 030f 	and.w	r3, r3, #15
 8004a0e:	e006      	b.n	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8004a10:	4b2b      	ldr	r3, [pc, #172]	; (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004a12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a16:	041b      	lsls	r3, r3, #16
 8004a18:	0e1b      	lsrs	r3, r3, #24
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	4a29      	ldr	r2, [pc, #164]	; (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8004a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a24:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004a26:	f000 be09 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a2e:	f000 be05 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      default:

        frequency = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a36:	f000 be01 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004a3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a3e:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8004a42:	430b      	orrs	r3, r1
 8004a44:	d153      	bne.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004a46:	4b1e      	ldr	r3, [pc, #120]	; (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a50:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d104      	bne.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004a58:	f7fd feea 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8004a5c:	6378      	str	r0, [r7, #52]	; 0x34
 8004a5e:	f000 bded 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a68:	d104      	bne.n	8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004a6a:	f7fd fdbf 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 8004a6e:	6378      	str	r0, [r7, #52]	; 0x34
 8004a70:	f000 bde4 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004a74:	4b12      	ldr	r3, [pc, #72]	; (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a80:	d107      	bne.n	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8004a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a88:	d103      	bne.n	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8004a8a:	4b0f      	ldr	r3, [pc, #60]	; (8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 8004a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a8e:	f000 bdd5 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8004a92:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	2b20      	cmp	r3, #32
 8004a9c:	d123      	bne.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004aa4:	d11f      	bne.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004aa6:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00c      	beq.n	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8004ab2:	4b03      	ldr	r3, [pc, #12]	; (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	0e1b      	lsrs	r3, r3, #24
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	e00d      	b.n	8004ada <HAL_RCCEx_GetPeriphCLKFreq+0xb3e>
 8004abe:	bf00      	nop
 8004ac0:	46020c00 	.word	0x46020c00
 8004ac4:	08006fb0 	.word	0x08006fb0
 8004ac8:	00f42400 	.word	0x00f42400
 8004acc:	4ba0      	ldr	r3, [pc, #640]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004ace:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ad2:	041b      	lsls	r3, r3, #16
 8004ad4:	0e1b      	lsrs	r3, r3, #24
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	4a9e      	ldr	r2, [pc, #632]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 8004adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ae2:	f000 bdab 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8004aea:	f000 bda7 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8004aee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004af2:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8004af6:	430b      	orrs	r3, r1
 8004af8:	d14c      	bne.n	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004afa:	4b95      	ldr	r3, [pc, #596]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b00:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004b04:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d104      	bne.n	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0xb7a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004b0c:	f7fd fe90 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8004b10:	6378      	str	r0, [r7, #52]	; 0x34
 8004b12:	f000 bd93 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b1c:	d104      	bne.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004b1e:	f7fd fd65 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 8004b22:	6378      	str	r0, [r7, #52]	; 0x34
 8004b24:	f000 bd8a 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004b28:	4b89      	ldr	r3, [pc, #548]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b34:	d107      	bne.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8004b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b3c:	d103      	bne.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
    {
      frequency = HSI_VALUE;
 8004b3e:	4b86      	ldr	r3, [pc, #536]	; (8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 8004b40:	637b      	str	r3, [r7, #52]	; 0x34
 8004b42:	f000 bd7b 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8004b46:	4b82      	ldr	r3, [pc, #520]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b20      	cmp	r3, #32
 8004b50:	d11c      	bne.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b58:	d118      	bne.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b5a:	4b7d      	ldr	r3, [pc, #500]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d005      	beq.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 8004b66:	4b7a      	ldr	r3, [pc, #488]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	0e1b      	lsrs	r3, r3, #24
 8004b6c:	f003 030f 	and.w	r3, r3, #15
 8004b70:	e006      	b.n	8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8004b72:	4b77      	ldr	r3, [pc, #476]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004b74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b78:	041b      	lsls	r3, r3, #16
 8004b7a:	0e1b      	lsrs	r3, r3, #24
 8004b7c:	f003 030f 	and.w	r3, r3, #15
 8004b80:	4a74      	ldr	r2, [pc, #464]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 8004b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b86:	637b      	str	r3, [r7, #52]	; 0x34
 8004b88:	f000 bd58 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b90:	f000 bd54 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8004b94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b98:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004b9c:	430b      	orrs	r3, r1
 8004b9e:	d158      	bne.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0xcb6>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004ba0:	4b6b      	ldr	r3, [pc, #428]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004ba2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ba6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004baa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bae:	2bc0      	cmp	r3, #192	; 0xc0
 8004bb0:	d028      	beq.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb4:	2bc0      	cmp	r3, #192	; 0xc0
 8004bb6:	d848      	bhi.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	2b80      	cmp	r3, #128	; 0x80
 8004bbc:	d00e      	beq.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	2b80      	cmp	r3, #128	; 0x80
 8004bc2:	d842      	bhi.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 8004bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bcc:	2b40      	cmp	r3, #64	; 0x40
 8004bce:	d014      	beq.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
 8004bd0:	e03b      	b.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8004bd2:	f7fd fe55 	bl	8002880 <HAL_RCC_GetPCLK3Freq>
 8004bd6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004bd8:	f000 bd30 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004bdc:	4b5c      	ldr	r3, [pc, #368]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be8:	d103      	bne.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
        {
          frequency = HSI_VALUE;
 8004bea:	4b5b      	ldr	r3, [pc, #364]	; (8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 8004bec:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004bee:	f000 bd25 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bf6:	f000 bd21 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8004bfa:	f7fd fcf7 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 8004bfe:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004c00:	f000 bd1c 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004c04:	4b52      	ldr	r3, [pc, #328]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0320 	and.w	r3, r3, #32
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	d118      	bne.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c10:	4b4f      	ldr	r3, [pc, #316]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
 8004c1c:	4b4c      	ldr	r3, [pc, #304]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	0e1b      	lsrs	r3, r3, #24
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	e006      	b.n	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8004c28:	4b49      	ldr	r3, [pc, #292]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004c2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c2e:	041b      	lsls	r3, r3, #16
 8004c30:	0e1b      	lsrs	r3, r3, #24
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	4a47      	ldr	r2, [pc, #284]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 8004c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c3c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004c3e:	f000 bcfd 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c46:	f000 bcf9 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
      default:
      {
        frequency = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c4e:	f000 bcf5 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8004c52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c56:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8004c5a:	430b      	orrs	r3, r1
 8004c5c:	d14c      	bne.n	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004c5e:	4b3c      	ldr	r3, [pc, #240]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c68:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d104      	bne.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004c70:	f7fd fdde 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8004c74:	6378      	str	r0, [r7, #52]	; 0x34
 8004c76:	f000 bce1 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c80:	d104      	bne.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004c82:	f7fd fcb3 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 8004c86:	6378      	str	r0, [r7, #52]	; 0x34
 8004c88:	f000 bcd8 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004c8c:	4b30      	ldr	r3, [pc, #192]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c98:	d107      	bne.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca0:	d103      	bne.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
    {
      frequency = HSI_VALUE;
 8004ca2:	4b2d      	ldr	r3, [pc, #180]	; (8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 8004ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ca6:	f000 bcc9 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8004caa:	4b29      	ldr	r3, [pc, #164]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0320 	and.w	r3, r3, #32
 8004cb2:	2b20      	cmp	r3, #32
 8004cb4:	d11c      	bne.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004cbc:	d118      	bne.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004cbe:	4b24      	ldr	r3, [pc, #144]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d005      	beq.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8004cca:	4b21      	ldr	r3, [pc, #132]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	0e1b      	lsrs	r3, r3, #24
 8004cd0:	f003 030f 	and.w	r3, r3, #15
 8004cd4:	e006      	b.n	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 8004cd6:	4b1e      	ldr	r3, [pc, #120]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004cd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004cdc:	041b      	lsls	r3, r3, #16
 8004cde:	0e1b      	lsrs	r3, r3, #24
 8004ce0:	f003 030f 	and.w	r3, r3, #15
 8004ce4:	4a1b      	ldr	r2, [pc, #108]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 8004ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cea:	637b      	str	r3, [r7, #52]	; 0x34
 8004cec:	f000 bca6 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8004cf4:	f000 bca2 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8004cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cfc:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 8004d00:	430b      	orrs	r3, r1
 8004d02:	d152      	bne.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 8004d04:	4b12      	ldr	r3, [pc, #72]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004d06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004d0a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8004d0e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 8004d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d104      	bne.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004d16:	f7fd fd8b 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8004d1a:	6378      	str	r0, [r7, #52]	; 0x34
 8004d1c:	f000 bc8e 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 8004d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d26:	d104      	bne.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004d28:	f7fd fc60 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 8004d2c:	6378      	str	r0, [r7, #52]	; 0x34
 8004d2e:	f000 bc85 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 8004d32:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d3e:	d10d      	bne.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
 8004d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d46:	d109      	bne.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
    {
      frequency = HSI_VALUE;
 8004d48:	4b03      	ldr	r3, [pc, #12]	; (8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 8004d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d4c:	f000 bc76 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8004d50:	46020c00 	.word	0x46020c00
 8004d54:	08006fb0 	.word	0x08006fb0
 8004d58:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 8004d5c:	4ba5      	ldr	r3, [pc, #660]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0320 	and.w	r3, r3, #32
 8004d64:	2b20      	cmp	r3, #32
 8004d66:	d11c      	bne.n	8004da2 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d6e:	d118      	bne.n	8004da2 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d70:	4ba0      	ldr	r3, [pc, #640]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d005      	beq.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 8004d7c:	4b9d      	ldr	r3, [pc, #628]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	0e1b      	lsrs	r3, r3, #24
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	e006      	b.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
 8004d88:	4b9a      	ldr	r3, [pc, #616]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004d8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d8e:	041b      	lsls	r3, r3, #16
 8004d90:	0e1b      	lsrs	r3, r3, #24
 8004d92:	f003 030f 	and.w	r3, r3, #15
 8004d96:	4a98      	ldr	r2, [pc, #608]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8004d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d9e:	f000 bc4d 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	637b      	str	r3, [r7, #52]	; 0x34
 8004da6:	f000 bc49 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8004daa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dae:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 8004db2:	430b      	orrs	r3, r1
 8004db4:	d14a      	bne.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xeb0>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 8004db6:	4b8f      	ldr	r3, [pc, #572]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004db8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004dbc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004dc0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d104      	bne.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004dc8:	f7fd fd32 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8004dcc:	6378      	str	r0, [r7, #52]	; 0x34
 8004dce:	f000 bc35 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dd8:	d104      	bne.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0xe48>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004dda:	f7fd fc07 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 8004dde:	6378      	str	r0, [r7, #52]	; 0x34
 8004de0:	f000 bc2c 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 8004de4:	4b83      	ldr	r3, [pc, #524]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004df0:	d107      	bne.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
 8004df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004df8:	d103      	bne.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
    {
      frequency = HSI_VALUE;
 8004dfa:	4b80      	ldr	r3, [pc, #512]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 8004dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8004dfe:	f000 bc1d 	b.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 8004e02:	4b7c      	ldr	r3, [pc, #496]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	2b20      	cmp	r3, #32
 8004e0c:	d11b      	bne.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e10:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004e14:	d117      	bne.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e16:	4b77      	ldr	r3, [pc, #476]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <HAL_RCCEx_GetPeriphCLKFreq+0xe92>
 8004e22:	4b74      	ldr	r3, [pc, #464]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	0e1b      	lsrs	r3, r3, #24
 8004e28:	f003 030f 	and.w	r3, r3, #15
 8004e2c:	e006      	b.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 8004e2e:	4b71      	ldr	r3, [pc, #452]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004e30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e34:	041b      	lsls	r3, r3, #16
 8004e36:	0e1b      	lsrs	r3, r3, #24
 8004e38:	f003 030f 	and.w	r3, r3, #15
 8004e3c:	4a6e      	ldr	r2, [pc, #440]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8004e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e42:	637b      	str	r3, [r7, #52]	; 0x34
 8004e44:	e3fa      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	637b      	str	r3, [r7, #52]	; 0x34
 8004e4a:	e3f7      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8004e4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e50:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8004e54:	430b      	orrs	r3, r1
 8004e56:	d164      	bne.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0xf86>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8004e58:	4b66      	ldr	r3, [pc, #408]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004e5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e62:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8004e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d120      	bne.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004e6a:	4b62      	ldr	r3, [pc, #392]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0320 	and.w	r3, r3, #32
 8004e72:	2b20      	cmp	r3, #32
 8004e74:	d117      	bne.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e76:	4b5f      	ldr	r3, [pc, #380]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8004e82:	4b5c      	ldr	r3, [pc, #368]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	0e1b      	lsrs	r3, r3, #24
 8004e88:	f003 030f 	and.w	r3, r3, #15
 8004e8c:	e006      	b.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 8004e8e:	4b59      	ldr	r3, [pc, #356]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004e90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e94:	041b      	lsls	r3, r3, #16
 8004e96:	0e1b      	lsrs	r3, r3, #24
 8004e98:	f003 030f 	and.w	r3, r3, #15
 8004e9c:	4a56      	ldr	r2, [pc, #344]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8004e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea4:	e3ca      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
      else
      {
        frequency = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8004eaa:	e3c7      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8004eac:	4b51      	ldr	r3, [pc, #324]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004eae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004eb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eba:	d112      	bne.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xf46>
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ec2:	d10e      	bne.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xf46>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004ec4:	4b4b      	ldr	r3, [pc, #300]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004ec6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ece:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ed2:	d102      	bne.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0xf3e>
      {
        frequency = LSI_VALUE / 128U;
 8004ed4:	23fa      	movs	r3, #250	; 0xfa
 8004ed6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004ed8:	e3b0      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
      else
      {
        frequency = LSI_VALUE;
 8004eda:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004ede:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004ee0:	e3ac      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8004ee2:	4b44      	ldr	r3, [pc, #272]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eee:	d106      	bne.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ef6:	d102      	bne.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      frequency = HSI_VALUE;
 8004ef8:	4b40      	ldr	r3, [pc, #256]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 8004efa:	637b      	str	r3, [r7, #52]	; 0x34
 8004efc:	e39e      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8004efe:	4b3d      	ldr	r3, [pc, #244]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004f00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d107      	bne.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f12:	d103      	bne.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
    {
      frequency = LSE_VALUE;
 8004f14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f18:	637b      	str	r3, [r7, #52]	; 0x34
 8004f1a:	e38f      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f20:	e38c      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8004f22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f26:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8004f2a:	430b      	orrs	r3, r1
 8004f2c:	d16b      	bne.n	8005006 <HAL_RCCEx_GetPeriphCLKFreq+0x106a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004f2e:	4b31      	ldr	r3, [pc, #196]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004f30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f38:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d120      	bne.n	8004f82 <HAL_RCCEx_GetPeriphCLKFreq+0xfe6>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004f40:	4b2c      	ldr	r3, [pc, #176]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b20      	cmp	r3, #32
 8004f4a:	d117      	bne.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe0>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f4c:	4b29      	ldr	r3, [pc, #164]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d005      	beq.n	8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8004f58:	4b26      	ldr	r3, [pc, #152]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	0e1b      	lsrs	r3, r3, #24
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	e006      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
 8004f64:	4b23      	ldr	r3, [pc, #140]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004f66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f6a:	041b      	lsls	r3, r3, #16
 8004f6c:	0e1b      	lsrs	r3, r3, #24
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	4a21      	ldr	r2, [pc, #132]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8004f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f78:	637b      	str	r3, [r7, #52]	; 0x34
 8004f7a:	e35f      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
      else
      {
        frequency = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f80:	e35c      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8004f82:	4b1c      	ldr	r3, [pc, #112]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004f84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f90:	d112      	bne.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f98:	d10e      	bne.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x101c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004f9a:	4b16      	ldr	r3, [pc, #88]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004f9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fa8:	d102      	bne.n	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>
      {
        frequency = LSI_VALUE / 128U;
 8004faa:	23fa      	movs	r3, #250	; 0xfa
 8004fac:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004fae:	e345      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
      else
      {
        frequency = LSI_VALUE;
 8004fb0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004fb4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004fb6:	e341      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004fb8:	4b0e      	ldr	r3, [pc, #56]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc4:	d106      	bne.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fcc:	d102      	bne.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
    {
      frequency = HSI_VALUE;
 8004fce:	4b0b      	ldr	r3, [pc, #44]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 8004fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8004fd2:	e333      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8004fd4:	4b07      	ldr	r3, [pc, #28]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004fd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d10e      	bne.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x1064>
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fe8:	d10a      	bne.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x1064>
    {
      frequency = LSE_VALUE;
 8004fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fee:	637b      	str	r3, [r7, #52]	; 0x34
 8004ff0:	e324      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8004ff2:	bf00      	nop
 8004ff4:	46020c00 	.word	0x46020c00
 8004ff8:	08006fb0 	.word	0x08006fb0
 8004ffc:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	637b      	str	r3, [r7, #52]	; 0x34
 8005004:	e31a      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8005006:	e9d7 2300 	ldrd	r2, r3, [r7]
 800500a:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800500e:	430b      	orrs	r3, r1
 8005010:	d147      	bne.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1106>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005012:	4b9b      	ldr	r3, [pc, #620]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 8005014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005018:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800501c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	2b00      	cmp	r3, #0
 8005022:	d103      	bne.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005024:	f7fd fc04 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8005028:	6378      	str	r0, [r7, #52]	; 0x34
 800502a:	e307      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800502c:	4b94      	ldr	r3, [pc, #592]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 800502e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005032:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800503a:	d112      	bne.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x10c6>
 800503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005042:	d10e      	bne.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x10c6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005044:	4b8e      	ldr	r3, [pc, #568]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 8005046:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800504a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800504e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005052:	d102      	bne.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
      {
        frequency = LSI_VALUE / 128U;
 8005054:	23fa      	movs	r3, #250	; 0xfa
 8005056:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005058:	e2f0      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
      else
      {
        frequency = LSI_VALUE;
 800505a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800505e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005060:	e2ec      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005062:	4b87      	ldr	r3, [pc, #540]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800506a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506e:	d106      	bne.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0x10e2>
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005076:	d102      	bne.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0x10e2>
    {
      frequency = HSI_VALUE;
 8005078:	4b82      	ldr	r3, [pc, #520]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800507a:	637b      	str	r3, [r7, #52]	; 0x34
 800507c:	e2de      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800507e:	4b80      	ldr	r3, [pc, #512]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 8005080:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b02      	cmp	r3, #2
 800508a:	d107      	bne.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0x1100>
 800508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005092:	d103      	bne.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0x1100>
    {
      frequency = LSE_VALUE;
 8005094:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005098:	637b      	str	r3, [r7, #52]	; 0x34
 800509a:	e2cf      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	637b      	str	r3, [r7, #52]	; 0x34
 80050a0:	e2cc      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80050a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050a6:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 80050aa:	430b      	orrs	r3, r1
 80050ac:	d12d      	bne.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x116e>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80050ae:	4b74      	ldr	r3, [pc, #464]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 80050b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050b4:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80050b8:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80050ba:	4b71      	ldr	r3, [pc, #452]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050c6:	d105      	bne.n	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d102      	bne.n	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>
    {
      frequency = HSE_VALUE;
 80050ce:	4b6d      	ldr	r3, [pc, #436]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 80050d0:	637b      	str	r3, [r7, #52]	; 0x34
 80050d2:	e2b3      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80050d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050da:	d107      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x1150>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fe fb23 	bl	800372c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80050e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e8:	637b      	str	r3, [r7, #52]	; 0x34
 80050ea:	e2a7      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80050ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050f2:	d107      	bne.n	8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050f4:	f107 0318 	add.w	r3, r7, #24
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7fe fc7f 	bl	80039fc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	637b      	str	r3, [r7, #52]	; 0x34
 8005102:	e29b      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	637b      	str	r3, [r7, #52]	; 0x34
 8005108:	e298      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800510a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800510e:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8005112:	430b      	orrs	r3, r1
 8005114:	d156      	bne.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005116:	4b5a      	ldr	r3, [pc, #360]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 8005118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800511c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005120:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005128:	d028      	beq.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>
 800512a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005130:	d845      	bhi.n	80051be <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8005132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005134:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005138:	d013      	beq.n	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
 800513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005140:	d83d      	bhi.n	80051be <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8005142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005144:	2b00      	cmp	r3, #0
 8005146:	d004      	beq.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8005148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800514e:	d004      	beq.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8005150:	e035      	b.n	80051be <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005152:	f7fd fb81 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 8005156:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005158:	e270      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800515a:	f7fd fa47 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 800515e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005160:	e26c      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005162:	4b47      	ldr	r3, [pc, #284]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800516a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800516e:	d102      	bne.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
        {
          frequency = HSI_VALUE;
 8005170:	4b44      	ldr	r3, [pc, #272]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 8005172:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005174:	e262      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800517a:	e25f      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800517c:	4b40      	ldr	r3, [pc, #256]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0320 	and.w	r3, r3, #32
 8005184:	2b20      	cmp	r3, #32
 8005186:	d117      	bne.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x121c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005188:	4b3d      	ldr	r3, [pc, #244]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d005      	beq.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1204>
 8005194:	4b3a      	ldr	r3, [pc, #232]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	0e1b      	lsrs	r3, r3, #24
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	e006      	b.n	80051ae <HAL_RCCEx_GetPeriphCLKFreq+0x1212>
 80051a0:	4b37      	ldr	r3, [pc, #220]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 80051a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051a6:	041b      	lsls	r3, r3, #16
 80051a8:	0e1b      	lsrs	r3, r3, #24
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	4a36      	ldr	r2, [pc, #216]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80051b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051b4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80051b6:	e241      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051bc:	e23e      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      default:

        frequency = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051c2:	e23b      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80051c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051c8:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 80051cc:	430b      	orrs	r3, r1
 80051ce:	d15d      	bne.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80051d0:	4b2b      	ldr	r3, [pc, #172]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 80051d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051da:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80051dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051e2:	d028      	beq.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x129a>
 80051e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051ea:	d845      	bhi.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051f2:	d013      	beq.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 80051f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051fa:	d83d      	bhi.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d004      	beq.n	800520c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005208:	d004      	beq.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 800520a:	e035      	b.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800520c:	f7fd fb10 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8005210:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005212:	e213      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005214:	f7fd f9ea 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 8005218:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800521a:	e20f      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800521c:	4b18      	ldr	r3, [pc, #96]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005228:	d102      	bne.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>
        {
          frequency = HSI_VALUE;
 800522a:	4b16      	ldr	r3, [pc, #88]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800522c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800522e:	e205      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005234:	e202      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005236:	4b12      	ldr	r3, [pc, #72]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b20      	cmp	r3, #32
 8005240:	d117      	bne.n	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005242:	4b0f      	ldr	r3, [pc, #60]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d005      	beq.n	800525a <HAL_RCCEx_GetPeriphCLKFreq+0x12be>
 800524e:	4b0c      	ldr	r3, [pc, #48]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	0e1b      	lsrs	r3, r3, #24
 8005254:	f003 030f 	and.w	r3, r3, #15
 8005258:	e006      	b.n	8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>
 800525a:	4b09      	ldr	r3, [pc, #36]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>)
 800525c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005260:	041b      	lsls	r3, r3, #16
 8005262:	0e1b      	lsrs	r3, r3, #24
 8005264:	f003 030f 	and.w	r3, r3, #15
 8005268:	4a07      	ldr	r2, [pc, #28]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800526a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800526e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005270:	e1e4      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005276:	e1e1      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      default:

        frequency = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800527c:	e1de      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800527e:	bf00      	nop
 8005280:	46020c00 	.word	0x46020c00
 8005284:	00f42400 	.word	0x00f42400
 8005288:	08006fb0 	.word	0x08006fb0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800528c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005290:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8005294:	430b      	orrs	r3, r1
 8005296:	d176      	bne.n	8005386 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005298:	4ba6      	ldr	r3, [pc, #664]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 800529a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800529e:	f003 0318 	and.w	r3, r3, #24
 80052a2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80052a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a6:	2b18      	cmp	r3, #24
 80052a8:	d86a      	bhi.n	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 80052aa:	a201      	add	r2, pc, #4	; (adr r2, 80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>)
 80052ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b0:	08005315 	.word	0x08005315
 80052b4:	08005381 	.word	0x08005381
 80052b8:	08005381 	.word	0x08005381
 80052bc:	08005381 	.word	0x08005381
 80052c0:	08005381 	.word	0x08005381
 80052c4:	08005381 	.word	0x08005381
 80052c8:	08005381 	.word	0x08005381
 80052cc:	08005381 	.word	0x08005381
 80052d0:	0800531d 	.word	0x0800531d
 80052d4:	08005381 	.word	0x08005381
 80052d8:	08005381 	.word	0x08005381
 80052dc:	08005381 	.word	0x08005381
 80052e0:	08005381 	.word	0x08005381
 80052e4:	08005381 	.word	0x08005381
 80052e8:	08005381 	.word	0x08005381
 80052ec:	08005381 	.word	0x08005381
 80052f0:	08005325 	.word	0x08005325
 80052f4:	08005381 	.word	0x08005381
 80052f8:	08005381 	.word	0x08005381
 80052fc:	08005381 	.word	0x08005381
 8005300:	08005381 	.word	0x08005381
 8005304:	08005381 	.word	0x08005381
 8005308:	08005381 	.word	0x08005381
 800530c:	08005381 	.word	0x08005381
 8005310:	0800533f 	.word	0x0800533f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005314:	f7fd fab4 	bl	8002880 <HAL_RCC_GetPCLK3Freq>
 8005318:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800531a:	e18f      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800531c:	f7fd f966 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 8005320:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005322:	e18b      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005324:	4b83      	ldr	r3, [pc, #524]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800532c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005330:	d102      	bne.n	8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 8005332:	4b81      	ldr	r3, [pc, #516]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 8005334:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005336:	e181      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800533c:	e17e      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800533e:	4b7d      	ldr	r3, [pc, #500]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0320 	and.w	r3, r3, #32
 8005346:	2b20      	cmp	r3, #32
 8005348:	d117      	bne.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800534a:	4b7a      	ldr	r3, [pc, #488]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d005      	beq.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 8005356:	4b77      	ldr	r3, [pc, #476]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	0e1b      	lsrs	r3, r3, #24
 800535c:	f003 030f 	and.w	r3, r3, #15
 8005360:	e006      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 8005362:	4b74      	ldr	r3, [pc, #464]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 8005364:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005368:	041b      	lsls	r3, r3, #16
 800536a:	0e1b      	lsrs	r3, r3, #24
 800536c:	f003 030f 	and.w	r3, r3, #15
 8005370:	4a72      	ldr	r2, [pc, #456]	; (800553c <HAL_RCCEx_GetPeriphCLKFreq+0x15a0>)
 8005372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005376:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005378:	e160      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800537e:	e15d      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      default:

        frequency = 0U;
 8005380:	2300      	movs	r3, #0
 8005382:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005384:	e15a      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005386:	e9d7 2300 	ldrd	r2, r3, [r7]
 800538a:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800538e:	430b      	orrs	r3, r1
 8005390:	d155      	bne.n	800543e <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005392:	4b68      	ldr	r3, [pc, #416]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 8005394:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005398:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800539c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053a4:	d013      	beq.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 80053a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053ac:	d844      	bhi.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 80053ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053b4:	d013      	beq.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 80053b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053bc:	d83c      	bhi.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d014      	beq.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 80053c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ca:	d014      	beq.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 80053cc:	e034      	b.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053ce:	f107 0318 	add.w	r3, r7, #24
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fe fb12 	bl	80039fc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053dc:	e12e      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fe f9a2 	bl	800372c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053ec:	e126      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80053ee:	f7fd f8fd 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 80053f2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80053f4:	e122      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80053f6:	4b4f      	ldr	r3, [pc, #316]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0320 	and.w	r3, r3, #32
 80053fe:	2b20      	cmp	r3, #32
 8005400:	d117      	bne.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005402:	4b4c      	ldr	r3, [pc, #304]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800540e:	4b49      	ldr	r3, [pc, #292]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	0e1b      	lsrs	r3, r3, #24
 8005414:	f003 030f 	and.w	r3, r3, #15
 8005418:	e006      	b.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800541a:	4b46      	ldr	r3, [pc, #280]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 800541c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005420:	041b      	lsls	r3, r3, #16
 8005422:	0e1b      	lsrs	r3, r3, #24
 8005424:	f003 030f 	and.w	r3, r3, #15
 8005428:	4a44      	ldr	r2, [pc, #272]	; (800553c <HAL_RCCEx_GetPeriphCLKFreq+0x15a0>)
 800542a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800542e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005430:	e104      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
          frequency = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005436:	e101      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      default:

        frequency = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800543c:	e0fe      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800543e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005442:	1e59      	subs	r1, r3, #1
 8005444:	ea52 0301 	orrs.w	r3, r2, r1
 8005448:	d13c      	bne.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800544a:	4b3a      	ldr	r3, [pc, #232]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 800544c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005450:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005454:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005458:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800545c:	d027      	beq.n	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005460:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005464:	d82b      	bhi.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800546c:	d017      	beq.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005470:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005474:	d823      	bhi.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005478:	2b00      	cmp	r3, #0
 800547a:	d004      	beq.n	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005482:	d004      	beq.n	800548e <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8005484:	e01b      	b.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005486:	f7fd f8b1 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 800548a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800548c:	e0d6      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800548e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005492:	4618      	mov	r0, r3
 8005494:	f7fe f94a 	bl	800372c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800549c:	e0ce      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800549e:	f107 0318 	add.w	r3, r7, #24
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fe faaa 	bl	80039fc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054ac:	e0c6      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054ae:	f107 030c 	add.w	r3, r7, #12
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fe fc0a 	bl	8003ccc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054bc:	e0be      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>

      default:

        frequency = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054c2:	e0bb      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80054c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054c8:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80054cc:	430b      	orrs	r3, r1
 80054ce:	d137      	bne.n	8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x15a4>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80054d0:	4b18      	ldr	r3, [pc, #96]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 80054d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054da:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80054dc:	4b15      	ldr	r3, [pc, #84]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 80054de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d106      	bne.n	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 80054ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d103      	bne.n	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 80054f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054f4:	637b      	str	r3, [r7, #52]	; 0x34
 80054f6:	e0a1      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80054f8:	4b0e      	ldr	r3, [pc, #56]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 80054fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005502:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005506:	d112      	bne.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 8005508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800550e:	d10e      	bne.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005510:	4b08      	ldr	r3, [pc, #32]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>)
 8005512:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800551a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800551e:	d102      	bne.n	8005526 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 8005520:	23fa      	movs	r3, #250	; 0xfa
 8005522:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005524:	e08a      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
      else
      {
        frequency = LSI_VALUE;
 8005526:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800552a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800552c:	e086      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	637b      	str	r3, [r7, #52]	; 0x34
 8005532:	e083      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8005534:	46020c00 	.word	0x46020c00
 8005538:	00f42400 	.word	0x00f42400
 800553c:	08006fb0 	.word	0x08006fb0
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005540:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005544:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005548:	430b      	orrs	r3, r1
 800554a:	d131      	bne.n	80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800554c:	4b3e      	ldr	r3, [pc, #248]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>)
 800554e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005552:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005556:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005558:	4b3b      	ldr	r3, [pc, #236]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005564:	d105      	bne.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x15d6>
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	2b00      	cmp	r3, #0
 800556a:	d102      	bne.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x15d6>
    {
      frequency = HSI48_VALUE;
 800556c:	4b37      	ldr	r3, [pc, #220]	; (800564c <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 800556e:	637b      	str	r3, [r7, #52]	; 0x34
 8005570:	e064      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8005572:	4b35      	ldr	r3, [pc, #212]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800557a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800557e:	d106      	bne.n	800558e <HAL_RCCEx_GetPeriphCLKFreq+0x15f2>
 8005580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005586:	d102      	bne.n	800558e <HAL_RCCEx_GetPeriphCLKFreq+0x15f2>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005588:	4b31      	ldr	r3, [pc, #196]	; (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 800558a:	637b      	str	r3, [r7, #52]	; 0x34
 800558c:	e056      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800558e:	4b2e      	ldr	r3, [pc, #184]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800559a:	d106      	bne.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x160e>
 800559c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055a2:	d102      	bne.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x160e>
    {
      frequency = HSI_VALUE;
 80055a4:	4b2b      	ldr	r3, [pc, #172]	; (8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 80055a6:	637b      	str	r3, [r7, #52]	; 0x34
 80055a8:	e048      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	637b      	str	r3, [r7, #52]	; 0x34
 80055ae:	e045      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 80055b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055b4:	f1a3 0108 	sub.w	r1, r3, #8
 80055b8:	ea52 0301 	orrs.w	r3, r2, r1
 80055bc:	d13c      	bne.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 80055be:	4b22      	ldr	r3, [pc, #136]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>)
 80055c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80055c4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80055c8:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 80055ca:	4b1f      	ldr	r3, [pc, #124]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055d6:	d105      	bne.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1648>
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d102      	bne.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1648>
    {
      frequency = HSE_VALUE;
 80055de:	4b1d      	ldr	r3, [pc, #116]	; (8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 80055e0:	637b      	str	r3, [r7, #52]	; 0x34
 80055e2:	e02b      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 80055e4:	4b18      	ldr	r3, [pc, #96]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055f0:	d106      	bne.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
 80055f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055f8:	d102      	bne.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      frequency = HSE_VALUE >> 1U ;
 80055fa:	4b17      	ldr	r3, [pc, #92]	; (8005658 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 80055fc:	637b      	str	r3, [r7, #52]	; 0x34
 80055fe:	e01d      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8005600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005606:	d107      	bne.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800560c:	4618      	mov	r0, r3
 800560e:	f7fe f88d 	bl	800372c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	637b      	str	r3, [r7, #52]	; 0x34
 8005616:	e011      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8005618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800561e:	d108      	bne.n	8005632 <HAL_RCCEx_GetPeriphCLKFreq+0x1696>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005624:	4618      	mov	r0, r3
 8005626:	f7fe f881 	bl	800372c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	085b      	lsrs	r3, r3, #1
 800562e:	637b      	str	r3, [r7, #52]	; 0x34
 8005630:	e004      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8005632:	2300      	movs	r3, #0
 8005634:	637b      	str	r3, [r7, #52]	; 0x34
 8005636:	e001      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005638:	2300      	movs	r3, #0
 800563a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800563c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800563e:	4618      	mov	r0, r3
 8005640:	3738      	adds	r7, #56	; 0x38
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	46020c00 	.word	0x46020c00
 800564c:	02dc6c00 	.word	0x02dc6c00
 8005650:	016e3600 	.word	0x016e3600
 8005654:	00f42400 	.word	0x00f42400
 8005658:	007a1200 	.word	0x007a1200

0800565c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005664:	4b47      	ldr	r3, [pc, #284]	; (8005784 <RCCEx_PLL2_Config+0x128>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a46      	ldr	r2, [pc, #280]	; (8005784 <RCCEx_PLL2_Config+0x128>)
 800566a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800566e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005670:	f7fb fb46 	bl	8000d00 <HAL_GetTick>
 8005674:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005676:	e008      	b.n	800568a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005678:	f7fb fb42 	bl	8000d00 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d901      	bls.n	800568a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e077      	b.n	800577a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800568a:	4b3e      	ldr	r3, [pc, #248]	; (8005784 <RCCEx_PLL2_Config+0x128>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1f0      	bne.n	8005678 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005696:	4b3b      	ldr	r3, [pc, #236]	; (8005784 <RCCEx_PLL2_Config+0x128>)
 8005698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800569e:	f023 0303 	bic.w	r3, r3, #3
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6811      	ldr	r1, [r2, #0]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	6852      	ldr	r2, [r2, #4]
 80056aa:	3a01      	subs	r2, #1
 80056ac:	0212      	lsls	r2, r2, #8
 80056ae:	430a      	orrs	r2, r1
 80056b0:	4934      	ldr	r1, [pc, #208]	; (8005784 <RCCEx_PLL2_Config+0x128>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	62cb      	str	r3, [r1, #44]	; 0x2c
 80056b6:	4b33      	ldr	r3, [pc, #204]	; (8005784 <RCCEx_PLL2_Config+0x128>)
 80056b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056ba:	4b33      	ldr	r3, [pc, #204]	; (8005788 <RCCEx_PLL2_Config+0x12c>)
 80056bc:	4013      	ands	r3, r2
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6892      	ldr	r2, [r2, #8]
 80056c2:	3a01      	subs	r2, #1
 80056c4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	68d2      	ldr	r2, [r2, #12]
 80056cc:	3a01      	subs	r2, #1
 80056ce:	0252      	lsls	r2, r2, #9
 80056d0:	b292      	uxth	r2, r2
 80056d2:	4311      	orrs	r1, r2
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6912      	ldr	r2, [r2, #16]
 80056d8:	3a01      	subs	r2, #1
 80056da:	0412      	lsls	r2, r2, #16
 80056dc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80056e0:	4311      	orrs	r1, r2
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6952      	ldr	r2, [r2, #20]
 80056e6:	3a01      	subs	r2, #1
 80056e8:	0612      	lsls	r2, r2, #24
 80056ea:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80056ee:	430a      	orrs	r2, r1
 80056f0:	4924      	ldr	r1, [pc, #144]	; (8005784 <RCCEx_PLL2_Config+0x128>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80056f6:	4b23      	ldr	r3, [pc, #140]	; (8005784 <RCCEx_PLL2_Config+0x128>)
 80056f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fa:	f023 020c 	bic.w	r2, r3, #12
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	4920      	ldr	r1, [pc, #128]	; (8005784 <RCCEx_PLL2_Config+0x128>)
 8005704:	4313      	orrs	r3, r2
 8005706:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005708:	4b1e      	ldr	r3, [pc, #120]	; (8005784 <RCCEx_PLL2_Config+0x128>)
 800570a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	491c      	ldr	r1, [pc, #112]	; (8005784 <RCCEx_PLL2_Config+0x128>)
 8005712:	4313      	orrs	r3, r2
 8005714:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005716:	4b1b      	ldr	r3, [pc, #108]	; (8005784 <RCCEx_PLL2_Config+0x128>)
 8005718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571a:	4a1a      	ldr	r2, [pc, #104]	; (8005784 <RCCEx_PLL2_Config+0x128>)
 800571c:	f023 0310 	bic.w	r3, r3, #16
 8005720:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005722:	4b18      	ldr	r3, [pc, #96]	; (8005784 <RCCEx_PLL2_Config+0x128>)
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800572a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	69d2      	ldr	r2, [r2, #28]
 8005732:	00d2      	lsls	r2, r2, #3
 8005734:	4913      	ldr	r1, [pc, #76]	; (8005784 <RCCEx_PLL2_Config+0x128>)
 8005736:	4313      	orrs	r3, r2
 8005738:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800573a:	4b12      	ldr	r3, [pc, #72]	; (8005784 <RCCEx_PLL2_Config+0x128>)
 800573c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573e:	4a11      	ldr	r2, [pc, #68]	; (8005784 <RCCEx_PLL2_Config+0x128>)
 8005740:	f043 0310 	orr.w	r3, r3, #16
 8005744:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8005746:	4b0f      	ldr	r3, [pc, #60]	; (8005784 <RCCEx_PLL2_Config+0x128>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a0e      	ldr	r2, [pc, #56]	; (8005784 <RCCEx_PLL2_Config+0x128>)
 800574c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005750:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005752:	f7fb fad5 	bl	8000d00 <HAL_GetTick>
 8005756:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005758:	e008      	b.n	800576c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800575a:	f7fb fad1 	bl	8000d00 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	2b02      	cmp	r3, #2
 8005766:	d901      	bls.n	800576c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e006      	b.n	800577a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800576c:	4b05      	ldr	r3, [pc, #20]	; (8005784 <RCCEx_PLL2_Config+0x128>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0f0      	beq.n	800575a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005778:	2300      	movs	r3, #0

}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	46020c00 	.word	0x46020c00
 8005788:	80800000 	.word	0x80800000

0800578c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005794:	4b47      	ldr	r3, [pc, #284]	; (80058b4 <RCCEx_PLL3_Config+0x128>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a46      	ldr	r2, [pc, #280]	; (80058b4 <RCCEx_PLL3_Config+0x128>)
 800579a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800579e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057a0:	f7fb faae 	bl	8000d00 <HAL_GetTick>
 80057a4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80057a6:	e008      	b.n	80057ba <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80057a8:	f7fb faaa 	bl	8000d00 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e077      	b.n	80058aa <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80057ba:	4b3e      	ldr	r3, [pc, #248]	; (80058b4 <RCCEx_PLL3_Config+0x128>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1f0      	bne.n	80057a8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80057c6:	4b3b      	ldr	r3, [pc, #236]	; (80058b4 <RCCEx_PLL3_Config+0x128>)
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80057ce:	f023 0303 	bic.w	r3, r3, #3
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	6811      	ldr	r1, [r2, #0]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	6852      	ldr	r2, [r2, #4]
 80057da:	3a01      	subs	r2, #1
 80057dc:	0212      	lsls	r2, r2, #8
 80057de:	430a      	orrs	r2, r1
 80057e0:	4934      	ldr	r1, [pc, #208]	; (80058b4 <RCCEx_PLL3_Config+0x128>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	630b      	str	r3, [r1, #48]	; 0x30
 80057e6:	4b33      	ldr	r3, [pc, #204]	; (80058b4 <RCCEx_PLL3_Config+0x128>)
 80057e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057ea:	4b33      	ldr	r3, [pc, #204]	; (80058b8 <RCCEx_PLL3_Config+0x12c>)
 80057ec:	4013      	ands	r3, r2
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	6892      	ldr	r2, [r2, #8]
 80057f2:	3a01      	subs	r2, #1
 80057f4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	68d2      	ldr	r2, [r2, #12]
 80057fc:	3a01      	subs	r2, #1
 80057fe:	0252      	lsls	r2, r2, #9
 8005800:	b292      	uxth	r2, r2
 8005802:	4311      	orrs	r1, r2
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	6912      	ldr	r2, [r2, #16]
 8005808:	3a01      	subs	r2, #1
 800580a:	0412      	lsls	r2, r2, #16
 800580c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005810:	4311      	orrs	r1, r2
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	6952      	ldr	r2, [r2, #20]
 8005816:	3a01      	subs	r2, #1
 8005818:	0612      	lsls	r2, r2, #24
 800581a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800581e:	430a      	orrs	r2, r1
 8005820:	4924      	ldr	r1, [pc, #144]	; (80058b4 <RCCEx_PLL3_Config+0x128>)
 8005822:	4313      	orrs	r3, r2
 8005824:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005826:	4b23      	ldr	r3, [pc, #140]	; (80058b4 <RCCEx_PLL3_Config+0x128>)
 8005828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582a:	f023 020c 	bic.w	r2, r3, #12
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	4920      	ldr	r1, [pc, #128]	; (80058b4 <RCCEx_PLL3_Config+0x128>)
 8005834:	4313      	orrs	r3, r2
 8005836:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005838:	4b1e      	ldr	r3, [pc, #120]	; (80058b4 <RCCEx_PLL3_Config+0x128>)
 800583a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	491c      	ldr	r1, [pc, #112]	; (80058b4 <RCCEx_PLL3_Config+0x128>)
 8005842:	4313      	orrs	r3, r2
 8005844:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005846:	4b1b      	ldr	r3, [pc, #108]	; (80058b4 <RCCEx_PLL3_Config+0x128>)
 8005848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584a:	4a1a      	ldr	r2, [pc, #104]	; (80058b4 <RCCEx_PLL3_Config+0x128>)
 800584c:	f023 0310 	bic.w	r3, r3, #16
 8005850:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005852:	4b18      	ldr	r3, [pc, #96]	; (80058b4 <RCCEx_PLL3_Config+0x128>)
 8005854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005856:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800585a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	69d2      	ldr	r2, [r2, #28]
 8005862:	00d2      	lsls	r2, r2, #3
 8005864:	4913      	ldr	r1, [pc, #76]	; (80058b4 <RCCEx_PLL3_Config+0x128>)
 8005866:	4313      	orrs	r3, r2
 8005868:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800586a:	4b12      	ldr	r3, [pc, #72]	; (80058b4 <RCCEx_PLL3_Config+0x128>)
 800586c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586e:	4a11      	ldr	r2, [pc, #68]	; (80058b4 <RCCEx_PLL3_Config+0x128>)
 8005870:	f043 0310 	orr.w	r3, r3, #16
 8005874:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8005876:	4b0f      	ldr	r3, [pc, #60]	; (80058b4 <RCCEx_PLL3_Config+0x128>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a0e      	ldr	r2, [pc, #56]	; (80058b4 <RCCEx_PLL3_Config+0x128>)
 800587c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005880:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005882:	f7fb fa3d 	bl	8000d00 <HAL_GetTick>
 8005886:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005888:	e008      	b.n	800589c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800588a:	f7fb fa39 	bl	8000d00 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d901      	bls.n	800589c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e006      	b.n	80058aa <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800589c:	4b05      	ldr	r3, [pc, #20]	; (80058b4 <RCCEx_PLL3_Config+0x128>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0f0      	beq.n	800588a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	46020c00 	.word	0x46020c00
 80058b8:	80800000 	.word	0x80800000

080058bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e042      	b.n	8005954 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d106      	bne.n	80058e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7fb f809 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2224      	movs	r2, #36	; 0x24
 80058ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0201 	bic.w	r2, r2, #1
 80058fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f982 	bl	8005c08 <UART_SetConfig>
 8005904:	4603      	mov	r3, r0
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e022      	b.n	8005954 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fb24 	bl	8005f64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800592a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800593a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f042 0201 	orr.w	r2, r2, #1
 800594a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fbab 	bl	80060a8 <UART_CheckIdleState>
 8005952:	4603      	mov	r3, r0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b08a      	sub	sp, #40	; 0x28
 8005960:	af02      	add	r7, sp, #8
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	4613      	mov	r3, r2
 800596a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005972:	2b20      	cmp	r3, #32
 8005974:	d17b      	bne.n	8005a6e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <HAL_UART_Transmit+0x26>
 800597c:	88fb      	ldrh	r3, [r7, #6]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e074      	b.n	8005a70 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2221      	movs	r2, #33	; 0x21
 8005992:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005996:	f7fb f9b3 	bl	8000d00 <HAL_GetTick>
 800599a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	88fa      	ldrh	r2, [r7, #6]
 80059a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	88fa      	ldrh	r2, [r7, #6]
 80059a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b4:	d108      	bne.n	80059c8 <HAL_UART_Transmit+0x6c>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d104      	bne.n	80059c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80059be:	2300      	movs	r3, #0
 80059c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	61bb      	str	r3, [r7, #24]
 80059c6:	e003      	b.n	80059d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059cc:	2300      	movs	r3, #0
 80059ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059d0:	e030      	b.n	8005a34 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2200      	movs	r2, #0
 80059da:	2180      	movs	r1, #128	; 0x80
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 fc0d 	bl	80061fc <UART_WaitOnFlagUntilTimeout>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d005      	beq.n	80059f4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e03d      	b.n	8005a70 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10b      	bne.n	8005a12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a08:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	3302      	adds	r3, #2
 8005a0e:	61bb      	str	r3, [r7, #24]
 8005a10:	e007      	b.n	8005a22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	781a      	ldrb	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1c8      	bne.n	80059d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	2200      	movs	r2, #0
 8005a48:	2140      	movs	r1, #64	; 0x40
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 fbd6 	bl	80061fc <UART_WaitOnFlagUntilTimeout>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d005      	beq.n	8005a62 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e006      	b.n	8005a70 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	e000      	b.n	8005a70 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005a6e:	2302      	movs	r3, #2
  }
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3720      	adds	r7, #32
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08a      	sub	sp, #40	; 0x28
 8005a7c:	af02      	add	r7, sp, #8
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	603b      	str	r3, [r7, #0]
 8005a84:	4613      	mov	r3, r2
 8005a86:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a8e:	2b20      	cmp	r3, #32
 8005a90:	f040 80b5 	bne.w	8005bfe <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <HAL_UART_Receive+0x28>
 8005a9a:	88fb      	ldrh	r3, [r7, #6]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e0ad      	b.n	8005c00 <HAL_UART_Receive+0x188>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2222      	movs	r2, #34	; 0x22
 8005ab0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aba:	f7fb f921 	bl	8000d00 <HAL_GetTick>
 8005abe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	88fa      	ldrh	r2, [r7, #6]
 8005ac4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	88fa      	ldrh	r2, [r7, #6]
 8005acc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad8:	d10e      	bne.n	8005af8 <HAL_UART_Receive+0x80>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d105      	bne.n	8005aee <HAL_UART_Receive+0x76>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005ae8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005aec:	e02d      	b.n	8005b4a <HAL_UART_Receive+0xd2>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	22ff      	movs	r2, #255	; 0xff
 8005af2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005af6:	e028      	b.n	8005b4a <HAL_UART_Receive+0xd2>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10d      	bne.n	8005b1c <HAL_UART_Receive+0xa4>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d104      	bne.n	8005b12 <HAL_UART_Receive+0x9a>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	22ff      	movs	r2, #255	; 0xff
 8005b0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b10:	e01b      	b.n	8005b4a <HAL_UART_Receive+0xd2>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	227f      	movs	r2, #127	; 0x7f
 8005b16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b1a:	e016      	b.n	8005b4a <HAL_UART_Receive+0xd2>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b24:	d10d      	bne.n	8005b42 <HAL_UART_Receive+0xca>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d104      	bne.n	8005b38 <HAL_UART_Receive+0xc0>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	227f      	movs	r2, #127	; 0x7f
 8005b32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b36:	e008      	b.n	8005b4a <HAL_UART_Receive+0xd2>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	223f      	movs	r2, #63	; 0x3f
 8005b3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b40:	e003      	b.n	8005b4a <HAL_UART_Receive+0xd2>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005b50:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b5a:	d108      	bne.n	8005b6e <HAL_UART_Receive+0xf6>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d104      	bne.n	8005b6e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005b64:	2300      	movs	r3, #0
 8005b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	61bb      	str	r3, [r7, #24]
 8005b6c:	e003      	b.n	8005b76 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005b76:	e036      	b.n	8005be6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	2120      	movs	r1, #32
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 fb3a 	bl	80061fc <UART_WaitOnFlagUntilTimeout>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d005      	beq.n	8005b9a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e032      	b.n	8005c00 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10c      	bne.n	8005bba <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	8a7b      	ldrh	r3, [r7, #18]
 8005baa:	4013      	ands	r3, r2
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	3302      	adds	r3, #2
 8005bb6:	61bb      	str	r3, [r7, #24]
 8005bb8:	e00c      	b.n	8005bd4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	8a7b      	ldrh	r3, [r7, #18]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1c2      	bne.n	8005b78 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	e000      	b.n	8005c00 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8005bfe:	2302      	movs	r3, #2
  }
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3720      	adds	r7, #32
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c0c:	b094      	sub	sp, #80	; 0x50
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	4b83      	ldr	r3, [pc, #524]	; (8005e2c <UART_SetConfig+0x224>)
 8005c1e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	497c      	ldr	r1, [pc, #496]	; (8005e30 <UART_SetConfig+0x228>)
 8005c40:	4019      	ands	r1, r3
 8005c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c48:	430b      	orrs	r3, r1
 8005c4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c58:	68d9      	ldr	r1, [r3, #12]
 8005c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	ea40 0301 	orr.w	r3, r0, r1
 8005c62:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	4b6f      	ldr	r3, [pc, #444]	; (8005e2c <UART_SetConfig+0x224>)
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d009      	beq.n	8005c88 <UART_SetConfig+0x80>
 8005c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	4b6e      	ldr	r3, [pc, #440]	; (8005e34 <UART_SetConfig+0x22c>)
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d004      	beq.n	8005c88 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c80:	6a1a      	ldr	r2, [r3, #32]
 8005c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c84:	4313      	orrs	r3, r2
 8005c86:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8005c92:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8005c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c9c:	430b      	orrs	r3, r1
 8005c9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca6:	f023 000f 	bic.w	r0, r3, #15
 8005caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	ea40 0301 	orr.w	r3, r0, r1
 8005cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	4b5e      	ldr	r3, [pc, #376]	; (8005e38 <UART_SetConfig+0x230>)
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d102      	bne.n	8005cc8 <UART_SetConfig+0xc0>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cc6:	e032      	b.n	8005d2e <UART_SetConfig+0x126>
 8005cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	4b5b      	ldr	r3, [pc, #364]	; (8005e3c <UART_SetConfig+0x234>)
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d102      	bne.n	8005cd8 <UART_SetConfig+0xd0>
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cd6:	e02a      	b.n	8005d2e <UART_SetConfig+0x126>
 8005cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	4b58      	ldr	r3, [pc, #352]	; (8005e40 <UART_SetConfig+0x238>)
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d102      	bne.n	8005ce8 <UART_SetConfig+0xe0>
 8005ce2:	2304      	movs	r3, #4
 8005ce4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ce6:	e022      	b.n	8005d2e <UART_SetConfig+0x126>
 8005ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	4b55      	ldr	r3, [pc, #340]	; (8005e44 <UART_SetConfig+0x23c>)
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d102      	bne.n	8005cf8 <UART_SetConfig+0xf0>
 8005cf2:	2308      	movs	r3, #8
 8005cf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cf6:	e01a      	b.n	8005d2e <UART_SetConfig+0x126>
 8005cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	4b52      	ldr	r3, [pc, #328]	; (8005e48 <UART_SetConfig+0x240>)
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d102      	bne.n	8005d08 <UART_SetConfig+0x100>
 8005d02:	2310      	movs	r3, #16
 8005d04:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d06:	e012      	b.n	8005d2e <UART_SetConfig+0x126>
 8005d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	4b4f      	ldr	r3, [pc, #316]	; (8005e4c <UART_SetConfig+0x244>)
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d103      	bne.n	8005d1a <UART_SetConfig+0x112>
 8005d12:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005d16:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d18:	e009      	b.n	8005d2e <UART_SetConfig+0x126>
 8005d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	4b43      	ldr	r3, [pc, #268]	; (8005e2c <UART_SetConfig+0x224>)
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d102      	bne.n	8005d2a <UART_SetConfig+0x122>
 8005d24:	2320      	movs	r3, #32
 8005d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d28:	e001      	b.n	8005d2e <UART_SetConfig+0x126>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	4b3e      	ldr	r3, [pc, #248]	; (8005e2c <UART_SetConfig+0x224>)
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d005      	beq.n	8005d44 <UART_SetConfig+0x13c>
 8005d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	4b3d      	ldr	r3, [pc, #244]	; (8005e34 <UART_SetConfig+0x22c>)
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	f040 8088 	bne.w	8005e54 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d46:	2200      	movs	r2, #0
 8005d48:	623b      	str	r3, [r7, #32]
 8005d4a:	627a      	str	r2, [r7, #36]	; 0x24
 8005d4c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005d50:	f7fe f924 	bl	8003f9c <HAL_RCCEx_GetPeriphCLKFreq>
 8005d54:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 80eb 	beq.w	8005f34 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	4a3b      	ldr	r2, [pc, #236]	; (8005e50 <UART_SetConfig+0x248>)
 8005d64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d70:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	4613      	mov	r3, r2
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	4413      	add	r3, r2
 8005d7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d305      	bcc.n	8005d8e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d903      	bls.n	8005d96 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005d94:	e048      	b.n	8005e28 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d98:	2200      	movs	r2, #0
 8005d9a:	61bb      	str	r3, [r7, #24]
 8005d9c:	61fa      	str	r2, [r7, #28]
 8005d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	4a2b      	ldr	r2, [pc, #172]	; (8005e50 <UART_SetConfig+0x248>)
 8005da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	2200      	movs	r2, #0
 8005dac:	613b      	str	r3, [r7, #16]
 8005dae:	617a      	str	r2, [r7, #20]
 8005db0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005db4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005db8:	f7fa fa72 	bl	80002a0 <__aeabi_uldivmod>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4610      	mov	r0, r2
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	020b      	lsls	r3, r1, #8
 8005dce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005dd2:	0202      	lsls	r2, r0, #8
 8005dd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dd6:	6849      	ldr	r1, [r1, #4]
 8005dd8:	0849      	lsrs	r1, r1, #1
 8005dda:	2000      	movs	r0, #0
 8005ddc:	460c      	mov	r4, r1
 8005dde:	4605      	mov	r5, r0
 8005de0:	eb12 0804 	adds.w	r8, r2, r4
 8005de4:	eb43 0905 	adc.w	r9, r3, r5
 8005de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	60bb      	str	r3, [r7, #8]
 8005df0:	60fa      	str	r2, [r7, #12]
 8005df2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005df6:	4640      	mov	r0, r8
 8005df8:	4649      	mov	r1, r9
 8005dfa:	f7fa fa51 	bl	80002a0 <__aeabi_uldivmod>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	4613      	mov	r3, r2
 8005e04:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e0c:	d308      	bcc.n	8005e20 <UART_SetConfig+0x218>
 8005e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e14:	d204      	bcs.n	8005e20 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8005e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e1c:	60da      	str	r2, [r3, #12]
 8005e1e:	e003      	b.n	8005e28 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8005e26:	e085      	b.n	8005f34 <UART_SetConfig+0x32c>
 8005e28:	e084      	b.n	8005f34 <UART_SetConfig+0x32c>
 8005e2a:	bf00      	nop
 8005e2c:	46002400 	.word	0x46002400
 8005e30:	cfff69f3 	.word	0xcfff69f3
 8005e34:	56002400 	.word	0x56002400
 8005e38:	40013800 	.word	0x40013800
 8005e3c:	40004400 	.word	0x40004400
 8005e40:	40004800 	.word	0x40004800
 8005e44:	40004c00 	.word	0x40004c00
 8005e48:	40005000 	.word	0x40005000
 8005e4c:	40006400 	.word	0x40006400
 8005e50:	08007070 	.word	0x08007070
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e5c:	d13c      	bne.n	8005ed8 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e60:	2200      	movs	r2, #0
 8005e62:	603b      	str	r3, [r7, #0]
 8005e64:	607a      	str	r2, [r7, #4]
 8005e66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e6a:	f7fe f897 	bl	8003f9c <HAL_RCCEx_GetPeriphCLKFreq>
 8005e6e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d05e      	beq.n	8005f34 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	4a39      	ldr	r2, [pc, #228]	; (8005f60 <UART_SetConfig+0x358>)
 8005e7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e80:	461a      	mov	r2, r3
 8005e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e84:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e88:	005a      	lsls	r2, r3, #1
 8005e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	085b      	lsrs	r3, r3, #1
 8005e90:	441a      	add	r2, r3
 8005e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e9e:	2b0f      	cmp	r3, #15
 8005ea0:	d916      	bls.n	8005ed0 <UART_SetConfig+0x2c8>
 8005ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea8:	d212      	bcs.n	8005ed0 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f023 030f 	bic.w	r3, r3, #15
 8005eb2:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb6:	085b      	lsrs	r3, r3, #1
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8005ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8005ecc:	60da      	str	r2, [r3, #12]
 8005ece:	e031      	b.n	8005f34 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005ed6:	e02d      	b.n	8005f34 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eda:	2200      	movs	r2, #0
 8005edc:	469a      	mov	sl, r3
 8005ede:	4693      	mov	fp, r2
 8005ee0:	4650      	mov	r0, sl
 8005ee2:	4659      	mov	r1, fp
 8005ee4:	f7fe f85a 	bl	8003f9c <HAL_RCCEx_GetPeriphCLKFreq>
 8005ee8:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8005eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d021      	beq.n	8005f34 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	4a1a      	ldr	r2, [pc, #104]	; (8005f60 <UART_SetConfig+0x358>)
 8005ef6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005efa:	461a      	mov	r2, r3
 8005efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005efe:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	085b      	lsrs	r3, r3, #1
 8005f08:	441a      	add	r2, r3
 8005f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f12:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f16:	2b0f      	cmp	r3, #15
 8005f18:	d909      	bls.n	8005f2e <UART_SetConfig+0x326>
 8005f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f20:	d205      	bcs.n	8005f2e <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	60da      	str	r2, [r3, #12]
 8005f2c:	e002      	b.n	8005f34 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f36:	2201      	movs	r2, #1
 8005f38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f46:	2200      	movs	r2, #0
 8005f48:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005f50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3750      	adds	r7, #80	; 0x50
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f5e:	bf00      	nop
 8005f60:	08007070 	.word	0x08007070

08005f64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00a      	beq.n	8005f8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00a      	beq.n	8005fb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00a      	beq.n	8005fd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd6:	f003 0308 	and.w	r3, r3, #8
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00a      	beq.n	8005ff4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff8:	f003 0310 	and.w	r3, r3, #16
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00a      	beq.n	8006016 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601a:	f003 0320 	and.w	r3, r3, #32
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00a      	beq.n	8006038 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006040:	2b00      	cmp	r3, #0
 8006042:	d01a      	beq.n	800607a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006062:	d10a      	bne.n	800607a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00a      	beq.n	800609c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	605a      	str	r2, [r3, #4]
  }
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b098      	sub	sp, #96	; 0x60
 80060ac:	af02      	add	r7, sp, #8
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060b8:	f7fa fe22 	bl	8000d00 <HAL_GetTick>
 80060bc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0308 	and.w	r3, r3, #8
 80060c8:	2b08      	cmp	r3, #8
 80060ca:	d12f      	bne.n	800612c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060d4:	2200      	movs	r2, #0
 80060d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f88e 	bl	80061fc <UART_WaitOnFlagUntilTimeout>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d022      	beq.n	800612c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ee:	e853 3f00 	ldrex	r3, [r3]
 80060f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060fa:	653b      	str	r3, [r7, #80]	; 0x50
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	461a      	mov	r2, r3
 8006102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006104:	647b      	str	r3, [r7, #68]	; 0x44
 8006106:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800610a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e6      	bne.n	80060e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2220      	movs	r2, #32
 800611c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e063      	b.n	80061f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0304 	and.w	r3, r3, #4
 8006136:	2b04      	cmp	r3, #4
 8006138:	d149      	bne.n	80061ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800613a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006142:	2200      	movs	r2, #0
 8006144:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 f857 	bl	80061fc <UART_WaitOnFlagUntilTimeout>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d03c      	beq.n	80061ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	e853 3f00 	ldrex	r3, [r3]
 8006160:	623b      	str	r3, [r7, #32]
   return(result);
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006168:	64fb      	str	r3, [r7, #76]	; 0x4c
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	461a      	mov	r2, r3
 8006170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006172:	633b      	str	r3, [r7, #48]	; 0x30
 8006174:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e6      	bne.n	8006154 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3308      	adds	r3, #8
 800618c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	60fb      	str	r3, [r7, #12]
   return(result);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f023 0301 	bic.w	r3, r3, #1
 800619c:	64bb      	str	r3, [r7, #72]	; 0x48
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3308      	adds	r3, #8
 80061a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061a6:	61fa      	str	r2, [r7, #28]
 80061a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061aa:	69b9      	ldr	r1, [r7, #24]
 80061ac:	69fa      	ldr	r2, [r7, #28]
 80061ae:	e841 2300 	strex	r3, r2, [r1]
 80061b2:	617b      	str	r3, [r7, #20]
   return(result);
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1e5      	bne.n	8006186 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2220      	movs	r2, #32
 80061be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e012      	b.n	80061f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2220      	movs	r2, #32
 80061da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3758      	adds	r7, #88	; 0x58
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	603b      	str	r3, [r7, #0]
 8006208:	4613      	mov	r3, r2
 800620a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800620c:	e049      	b.n	80062a2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006214:	d045      	beq.n	80062a2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006216:	f7fa fd73 	bl	8000d00 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	429a      	cmp	r2, r3
 8006224:	d302      	bcc.n	800622c <UART_WaitOnFlagUntilTimeout+0x30>
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e048      	b.n	80062c2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0304 	and.w	r3, r3, #4
 800623a:	2b00      	cmp	r3, #0
 800623c:	d031      	beq.n	80062a2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	f003 0308 	and.w	r3, r3, #8
 8006248:	2b08      	cmp	r3, #8
 800624a:	d110      	bne.n	800626e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2208      	movs	r2, #8
 8006252:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 f838 	bl	80062ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2208      	movs	r2, #8
 800625e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e029      	b.n	80062c2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800627c:	d111      	bne.n	80062a2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006286:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 f81e 	bl	80062ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2220      	movs	r2, #32
 8006292:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e00f      	b.n	80062c2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69da      	ldr	r2, [r3, #28]
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	4013      	ands	r3, r2
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	bf0c      	ite	eq
 80062b2:	2301      	moveq	r3, #1
 80062b4:	2300      	movne	r3, #0
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	461a      	mov	r2, r3
 80062ba:	79fb      	ldrb	r3, [r7, #7]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d0a6      	beq.n	800620e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b095      	sub	sp, #84	; 0x54
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062da:	e853 3f00 	ldrex	r3, [r3]
 80062de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	461a      	mov	r2, r3
 80062ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062f0:	643b      	str	r3, [r7, #64]	; 0x40
 80062f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062f8:	e841 2300 	strex	r3, r2, [r1]
 80062fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1e6      	bne.n	80062d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3308      	adds	r3, #8
 800630a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	e853 3f00 	ldrex	r3, [r3]
 8006312:	61fb      	str	r3, [r7, #28]
   return(result);
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800631a:	f023 0301 	bic.w	r3, r3, #1
 800631e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3308      	adds	r3, #8
 8006326:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006328:	62fa      	str	r2, [r7, #44]	; 0x2c
 800632a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800632e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006330:	e841 2300 	strex	r3, r2, [r1]
 8006334:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e3      	bne.n	8006304 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006340:	2b01      	cmp	r3, #1
 8006342:	d118      	bne.n	8006376 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	e853 3f00 	ldrex	r3, [r3]
 8006350:	60bb      	str	r3, [r7, #8]
   return(result);
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f023 0310 	bic.w	r3, r3, #16
 8006358:	647b      	str	r3, [r7, #68]	; 0x44
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006362:	61bb      	str	r3, [r7, #24]
 8006364:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006366:	6979      	ldr	r1, [r7, #20]
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	e841 2300 	strex	r3, r2, [r1]
 800636e:	613b      	str	r3, [r7, #16]
   return(result);
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1e6      	bne.n	8006344 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2220      	movs	r2, #32
 800637a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	675a      	str	r2, [r3, #116]	; 0x74
}
 800638a:	bf00      	nop
 800638c:	3754      	adds	r7, #84	; 0x54
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006396:	b480      	push	{r7}
 8006398:	b085      	sub	sp, #20
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d101      	bne.n	80063ac <HAL_UARTEx_DisableFifoMode+0x16>
 80063a8:	2302      	movs	r3, #2
 80063aa:	e027      	b.n	80063fc <HAL_UARTEx_DisableFifoMode+0x66>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2224      	movs	r2, #36	; 0x24
 80063b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 0201 	bic.w	r2, r2, #1
 80063d2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80063da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2220      	movs	r2, #32
 80063ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800641c:	2302      	movs	r3, #2
 800641e:	e02d      	b.n	800647c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2224      	movs	r2, #36	; 0x24
 800642c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 0201 	bic.w	r2, r2, #1
 8006446:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f84f 	bl	8006500 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2220      	movs	r2, #32
 800646e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006494:	2b01      	cmp	r3, #1
 8006496:	d101      	bne.n	800649c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006498:	2302      	movs	r3, #2
 800649a:	e02d      	b.n	80064f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2224      	movs	r2, #36	; 0x24
 80064a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 0201 	bic.w	r2, r2, #1
 80064c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f811 	bl	8006500 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800650c:	2b00      	cmp	r3, #0
 800650e:	d108      	bne.n	8006522 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006520:	e031      	b.n	8006586 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006522:	2308      	movs	r3, #8
 8006524:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006526:	2308      	movs	r3, #8
 8006528:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	0e5b      	lsrs	r3, r3, #25
 8006532:	b2db      	uxtb	r3, r3
 8006534:	f003 0307 	and.w	r3, r3, #7
 8006538:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	0f5b      	lsrs	r3, r3, #29
 8006542:	b2db      	uxtb	r3, r3
 8006544:	f003 0307 	and.w	r3, r3, #7
 8006548:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800654a:	7bbb      	ldrb	r3, [r7, #14]
 800654c:	7b3a      	ldrb	r2, [r7, #12]
 800654e:	4911      	ldr	r1, [pc, #68]	; (8006594 <UARTEx_SetNbDataToProcess+0x94>)
 8006550:	5c8a      	ldrb	r2, [r1, r2]
 8006552:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006556:	7b3a      	ldrb	r2, [r7, #12]
 8006558:	490f      	ldr	r1, [pc, #60]	; (8006598 <UARTEx_SetNbDataToProcess+0x98>)
 800655a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800655c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006560:	b29a      	uxth	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006568:	7bfb      	ldrb	r3, [r7, #15]
 800656a:	7b7a      	ldrb	r2, [r7, #13]
 800656c:	4909      	ldr	r1, [pc, #36]	; (8006594 <UARTEx_SetNbDataToProcess+0x94>)
 800656e:	5c8a      	ldrb	r2, [r1, r2]
 8006570:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006574:	7b7a      	ldrb	r2, [r7, #13]
 8006576:	4908      	ldr	r1, [pc, #32]	; (8006598 <UARTEx_SetNbDataToProcess+0x98>)
 8006578:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800657a:	fb93 f3f2 	sdiv	r3, r3, r2
 800657e:	b29a      	uxth	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006586:	bf00      	nop
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	08007088 	.word	0x08007088
 8006598:	08007090 	.word	0x08007090

0800659c <__errno>:
 800659c:	4b01      	ldr	r3, [pc, #4]	; (80065a4 <__errno+0x8>)
 800659e:	6818      	ldr	r0, [r3, #0]
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	2000000c 	.word	0x2000000c

080065a8 <__libc_init_array>:
 80065a8:	b570      	push	{r4, r5, r6, lr}
 80065aa:	4d0d      	ldr	r5, [pc, #52]	; (80065e0 <__libc_init_array+0x38>)
 80065ac:	2600      	movs	r6, #0
 80065ae:	4c0d      	ldr	r4, [pc, #52]	; (80065e4 <__libc_init_array+0x3c>)
 80065b0:	1b64      	subs	r4, r4, r5
 80065b2:	10a4      	asrs	r4, r4, #2
 80065b4:	42a6      	cmp	r6, r4
 80065b6:	d109      	bne.n	80065cc <__libc_init_array+0x24>
 80065b8:	4d0b      	ldr	r5, [pc, #44]	; (80065e8 <__libc_init_array+0x40>)
 80065ba:	2600      	movs	r6, #0
 80065bc:	4c0b      	ldr	r4, [pc, #44]	; (80065ec <__libc_init_array+0x44>)
 80065be:	f000 fcb1 	bl	8006f24 <_init>
 80065c2:	1b64      	subs	r4, r4, r5
 80065c4:	10a4      	asrs	r4, r4, #2
 80065c6:	42a6      	cmp	r6, r4
 80065c8:	d105      	bne.n	80065d6 <__libc_init_array+0x2e>
 80065ca:	bd70      	pop	{r4, r5, r6, pc}
 80065cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d0:	3601      	adds	r6, #1
 80065d2:	4798      	blx	r3
 80065d4:	e7ee      	b.n	80065b4 <__libc_init_array+0xc>
 80065d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065da:	3601      	adds	r6, #1
 80065dc:	4798      	blx	r3
 80065de:	e7f2      	b.n	80065c6 <__libc_init_array+0x1e>
 80065e0:	080070d4 	.word	0x080070d4
 80065e4:	080070d4 	.word	0x080070d4
 80065e8:	080070d4 	.word	0x080070d4
 80065ec:	080070d8 	.word	0x080070d8

080065f0 <memset>:
 80065f0:	4402      	add	r2, r0
 80065f2:	4603      	mov	r3, r0
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d100      	bne.n	80065fa <memset+0xa>
 80065f8:	4770      	bx	lr
 80065fa:	f803 1b01 	strb.w	r1, [r3], #1
 80065fe:	e7f9      	b.n	80065f4 <memset+0x4>

08006600 <sniprintf>:
 8006600:	b40c      	push	{r2, r3}
 8006602:	4b18      	ldr	r3, [pc, #96]	; (8006664 <sniprintf+0x64>)
 8006604:	b530      	push	{r4, r5, lr}
 8006606:	1e0c      	subs	r4, r1, #0
 8006608:	b09d      	sub	sp, #116	; 0x74
 800660a:	681d      	ldr	r5, [r3, #0]
 800660c:	da08      	bge.n	8006620 <sniprintf+0x20>
 800660e:	238b      	movs	r3, #139	; 0x8b
 8006610:	f04f 30ff 	mov.w	r0, #4294967295
 8006614:	602b      	str	r3, [r5, #0]
 8006616:	b01d      	add	sp, #116	; 0x74
 8006618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800661c:	b002      	add	sp, #8
 800661e:	4770      	bx	lr
 8006620:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006624:	9002      	str	r0, [sp, #8]
 8006626:	9006      	str	r0, [sp, #24]
 8006628:	a902      	add	r1, sp, #8
 800662a:	f8ad 3014 	strh.w	r3, [sp, #20]
 800662e:	bf14      	ite	ne
 8006630:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006634:	4623      	moveq	r3, r4
 8006636:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006638:	4628      	mov	r0, r5
 800663a:	9304      	str	r3, [sp, #16]
 800663c:	9307      	str	r3, [sp, #28]
 800663e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006642:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006646:	ab21      	add	r3, sp, #132	; 0x84
 8006648:	9301      	str	r3, [sp, #4]
 800664a:	f000 f869 	bl	8006720 <_svfiprintf_r>
 800664e:	1c43      	adds	r3, r0, #1
 8006650:	bfbc      	itt	lt
 8006652:	238b      	movlt	r3, #139	; 0x8b
 8006654:	602b      	strlt	r3, [r5, #0]
 8006656:	2c00      	cmp	r4, #0
 8006658:	d0dd      	beq.n	8006616 <sniprintf+0x16>
 800665a:	9b02      	ldr	r3, [sp, #8]
 800665c:	2200      	movs	r2, #0
 800665e:	701a      	strb	r2, [r3, #0]
 8006660:	e7d9      	b.n	8006616 <sniprintf+0x16>
 8006662:	bf00      	nop
 8006664:	2000000c 	.word	0x2000000c

08006668 <__ssputs_r>:
 8006668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800666c:	688e      	ldr	r6, [r1, #8]
 800666e:	4682      	mov	sl, r0
 8006670:	460c      	mov	r4, r1
 8006672:	4690      	mov	r8, r2
 8006674:	429e      	cmp	r6, r3
 8006676:	461f      	mov	r7, r3
 8006678:	d838      	bhi.n	80066ec <__ssputs_r+0x84>
 800667a:	898a      	ldrh	r2, [r1, #12]
 800667c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006680:	d032      	beq.n	80066e8 <__ssputs_r+0x80>
 8006682:	6825      	ldr	r5, [r4, #0]
 8006684:	3301      	adds	r3, #1
 8006686:	6909      	ldr	r1, [r1, #16]
 8006688:	eba5 0901 	sub.w	r9, r5, r1
 800668c:	6965      	ldr	r5, [r4, #20]
 800668e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006692:	444b      	add	r3, r9
 8006694:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006698:	106d      	asrs	r5, r5, #1
 800669a:	429d      	cmp	r5, r3
 800669c:	bf38      	it	cc
 800669e:	461d      	movcc	r5, r3
 80066a0:	0553      	lsls	r3, r2, #21
 80066a2:	d531      	bpl.n	8006708 <__ssputs_r+0xa0>
 80066a4:	4629      	mov	r1, r5
 80066a6:	f000 fb73 	bl	8006d90 <_malloc_r>
 80066aa:	4606      	mov	r6, r0
 80066ac:	b950      	cbnz	r0, 80066c4 <__ssputs_r+0x5c>
 80066ae:	230c      	movs	r3, #12
 80066b0:	f04f 30ff 	mov.w	r0, #4294967295
 80066b4:	f8ca 3000 	str.w	r3, [sl]
 80066b8:	89a3      	ldrh	r3, [r4, #12]
 80066ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066be:	81a3      	strh	r3, [r4, #12]
 80066c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066c4:	464a      	mov	r2, r9
 80066c6:	6921      	ldr	r1, [r4, #16]
 80066c8:	f000 face 	bl	8006c68 <memcpy>
 80066cc:	89a3      	ldrh	r3, [r4, #12]
 80066ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066d6:	81a3      	strh	r3, [r4, #12]
 80066d8:	6126      	str	r6, [r4, #16]
 80066da:	444e      	add	r6, r9
 80066dc:	6165      	str	r5, [r4, #20]
 80066de:	eba5 0509 	sub.w	r5, r5, r9
 80066e2:	6026      	str	r6, [r4, #0]
 80066e4:	463e      	mov	r6, r7
 80066e6:	60a5      	str	r5, [r4, #8]
 80066e8:	42be      	cmp	r6, r7
 80066ea:	d900      	bls.n	80066ee <__ssputs_r+0x86>
 80066ec:	463e      	mov	r6, r7
 80066ee:	4632      	mov	r2, r6
 80066f0:	4641      	mov	r1, r8
 80066f2:	6820      	ldr	r0, [r4, #0]
 80066f4:	f000 fac5 	bl	8006c82 <memmove>
 80066f8:	68a3      	ldr	r3, [r4, #8]
 80066fa:	2000      	movs	r0, #0
 80066fc:	1b9b      	subs	r3, r3, r6
 80066fe:	60a3      	str	r3, [r4, #8]
 8006700:	6823      	ldr	r3, [r4, #0]
 8006702:	4433      	add	r3, r6
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	e7db      	b.n	80066c0 <__ssputs_r+0x58>
 8006708:	462a      	mov	r2, r5
 800670a:	f000 fbb5 	bl	8006e78 <_realloc_r>
 800670e:	4606      	mov	r6, r0
 8006710:	2800      	cmp	r0, #0
 8006712:	d1e1      	bne.n	80066d8 <__ssputs_r+0x70>
 8006714:	6921      	ldr	r1, [r4, #16]
 8006716:	4650      	mov	r0, sl
 8006718:	f000 face 	bl	8006cb8 <_free_r>
 800671c:	e7c7      	b.n	80066ae <__ssputs_r+0x46>
	...

08006720 <_svfiprintf_r>:
 8006720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006724:	4698      	mov	r8, r3
 8006726:	898b      	ldrh	r3, [r1, #12]
 8006728:	b09d      	sub	sp, #116	; 0x74
 800672a:	4607      	mov	r7, r0
 800672c:	061b      	lsls	r3, r3, #24
 800672e:	460d      	mov	r5, r1
 8006730:	4614      	mov	r4, r2
 8006732:	d50e      	bpl.n	8006752 <_svfiprintf_r+0x32>
 8006734:	690b      	ldr	r3, [r1, #16]
 8006736:	b963      	cbnz	r3, 8006752 <_svfiprintf_r+0x32>
 8006738:	2140      	movs	r1, #64	; 0x40
 800673a:	f000 fb29 	bl	8006d90 <_malloc_r>
 800673e:	6028      	str	r0, [r5, #0]
 8006740:	6128      	str	r0, [r5, #16]
 8006742:	b920      	cbnz	r0, 800674e <_svfiprintf_r+0x2e>
 8006744:	230c      	movs	r3, #12
 8006746:	603b      	str	r3, [r7, #0]
 8006748:	f04f 30ff 	mov.w	r0, #4294967295
 800674c:	e0d1      	b.n	80068f2 <_svfiprintf_r+0x1d2>
 800674e:	2340      	movs	r3, #64	; 0x40
 8006750:	616b      	str	r3, [r5, #20]
 8006752:	2300      	movs	r3, #0
 8006754:	f8cd 800c 	str.w	r8, [sp, #12]
 8006758:	f04f 0901 	mov.w	r9, #1
 800675c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800690c <_svfiprintf_r+0x1ec>
 8006760:	9309      	str	r3, [sp, #36]	; 0x24
 8006762:	2320      	movs	r3, #32
 8006764:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006768:	2330      	movs	r3, #48	; 0x30
 800676a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800676e:	4623      	mov	r3, r4
 8006770:	469a      	mov	sl, r3
 8006772:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006776:	b10a      	cbz	r2, 800677c <_svfiprintf_r+0x5c>
 8006778:	2a25      	cmp	r2, #37	; 0x25
 800677a:	d1f9      	bne.n	8006770 <_svfiprintf_r+0x50>
 800677c:	ebba 0b04 	subs.w	fp, sl, r4
 8006780:	d00b      	beq.n	800679a <_svfiprintf_r+0x7a>
 8006782:	465b      	mov	r3, fp
 8006784:	4622      	mov	r2, r4
 8006786:	4629      	mov	r1, r5
 8006788:	4638      	mov	r0, r7
 800678a:	f7ff ff6d 	bl	8006668 <__ssputs_r>
 800678e:	3001      	adds	r0, #1
 8006790:	f000 80aa 	beq.w	80068e8 <_svfiprintf_r+0x1c8>
 8006794:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006796:	445a      	add	r2, fp
 8006798:	9209      	str	r2, [sp, #36]	; 0x24
 800679a:	f89a 3000 	ldrb.w	r3, [sl]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 80a2 	beq.w	80068e8 <_svfiprintf_r+0x1c8>
 80067a4:	2300      	movs	r3, #0
 80067a6:	f04f 32ff 	mov.w	r2, #4294967295
 80067aa:	f10a 0a01 	add.w	sl, sl, #1
 80067ae:	9304      	str	r3, [sp, #16]
 80067b0:	9307      	str	r3, [sp, #28]
 80067b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067b6:	931a      	str	r3, [sp, #104]	; 0x68
 80067b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067bc:	4654      	mov	r4, sl
 80067be:	2205      	movs	r2, #5
 80067c0:	4852      	ldr	r0, [pc, #328]	; (800690c <_svfiprintf_r+0x1ec>)
 80067c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067c6:	f000 fa41 	bl	8006c4c <memchr>
 80067ca:	9a04      	ldr	r2, [sp, #16]
 80067cc:	b9d8      	cbnz	r0, 8006806 <_svfiprintf_r+0xe6>
 80067ce:	06d0      	lsls	r0, r2, #27
 80067d0:	bf44      	itt	mi
 80067d2:	2320      	movmi	r3, #32
 80067d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067d8:	0711      	lsls	r1, r2, #28
 80067da:	bf44      	itt	mi
 80067dc:	232b      	movmi	r3, #43	; 0x2b
 80067de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067e2:	f89a 3000 	ldrb.w	r3, [sl]
 80067e6:	2b2a      	cmp	r3, #42	; 0x2a
 80067e8:	d015      	beq.n	8006816 <_svfiprintf_r+0xf6>
 80067ea:	9a07      	ldr	r2, [sp, #28]
 80067ec:	4654      	mov	r4, sl
 80067ee:	2000      	movs	r0, #0
 80067f0:	f04f 0c0a 	mov.w	ip, #10
 80067f4:	4621      	mov	r1, r4
 80067f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067fa:	3b30      	subs	r3, #48	; 0x30
 80067fc:	2b09      	cmp	r3, #9
 80067fe:	d94e      	bls.n	800689e <_svfiprintf_r+0x17e>
 8006800:	b1b0      	cbz	r0, 8006830 <_svfiprintf_r+0x110>
 8006802:	9207      	str	r2, [sp, #28]
 8006804:	e014      	b.n	8006830 <_svfiprintf_r+0x110>
 8006806:	eba0 0308 	sub.w	r3, r0, r8
 800680a:	46a2      	mov	sl, r4
 800680c:	fa09 f303 	lsl.w	r3, r9, r3
 8006810:	4313      	orrs	r3, r2
 8006812:	9304      	str	r3, [sp, #16]
 8006814:	e7d2      	b.n	80067bc <_svfiprintf_r+0x9c>
 8006816:	9b03      	ldr	r3, [sp, #12]
 8006818:	1d19      	adds	r1, r3, #4
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	9103      	str	r1, [sp, #12]
 8006820:	bfbb      	ittet	lt
 8006822:	425b      	neglt	r3, r3
 8006824:	f042 0202 	orrlt.w	r2, r2, #2
 8006828:	9307      	strge	r3, [sp, #28]
 800682a:	9307      	strlt	r3, [sp, #28]
 800682c:	bfb8      	it	lt
 800682e:	9204      	strlt	r2, [sp, #16]
 8006830:	7823      	ldrb	r3, [r4, #0]
 8006832:	2b2e      	cmp	r3, #46	; 0x2e
 8006834:	d10c      	bne.n	8006850 <_svfiprintf_r+0x130>
 8006836:	7863      	ldrb	r3, [r4, #1]
 8006838:	2b2a      	cmp	r3, #42	; 0x2a
 800683a:	d135      	bne.n	80068a8 <_svfiprintf_r+0x188>
 800683c:	9b03      	ldr	r3, [sp, #12]
 800683e:	3402      	adds	r4, #2
 8006840:	1d1a      	adds	r2, r3, #4
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	9203      	str	r2, [sp, #12]
 8006848:	bfb8      	it	lt
 800684a:	f04f 33ff 	movlt.w	r3, #4294967295
 800684e:	9305      	str	r3, [sp, #20]
 8006850:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800691c <_svfiprintf_r+0x1fc>
 8006854:	2203      	movs	r2, #3
 8006856:	7821      	ldrb	r1, [r4, #0]
 8006858:	4650      	mov	r0, sl
 800685a:	f000 f9f7 	bl	8006c4c <memchr>
 800685e:	b140      	cbz	r0, 8006872 <_svfiprintf_r+0x152>
 8006860:	2340      	movs	r3, #64	; 0x40
 8006862:	eba0 000a 	sub.w	r0, r0, sl
 8006866:	3401      	adds	r4, #1
 8006868:	fa03 f000 	lsl.w	r0, r3, r0
 800686c:	9b04      	ldr	r3, [sp, #16]
 800686e:	4303      	orrs	r3, r0
 8006870:	9304      	str	r3, [sp, #16]
 8006872:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006876:	2206      	movs	r2, #6
 8006878:	4825      	ldr	r0, [pc, #148]	; (8006910 <_svfiprintf_r+0x1f0>)
 800687a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800687e:	f000 f9e5 	bl	8006c4c <memchr>
 8006882:	2800      	cmp	r0, #0
 8006884:	d038      	beq.n	80068f8 <_svfiprintf_r+0x1d8>
 8006886:	4b23      	ldr	r3, [pc, #140]	; (8006914 <_svfiprintf_r+0x1f4>)
 8006888:	bb1b      	cbnz	r3, 80068d2 <_svfiprintf_r+0x1b2>
 800688a:	9b03      	ldr	r3, [sp, #12]
 800688c:	3307      	adds	r3, #7
 800688e:	f023 0307 	bic.w	r3, r3, #7
 8006892:	3308      	adds	r3, #8
 8006894:	9303      	str	r3, [sp, #12]
 8006896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006898:	4433      	add	r3, r6
 800689a:	9309      	str	r3, [sp, #36]	; 0x24
 800689c:	e767      	b.n	800676e <_svfiprintf_r+0x4e>
 800689e:	fb0c 3202 	mla	r2, ip, r2, r3
 80068a2:	460c      	mov	r4, r1
 80068a4:	2001      	movs	r0, #1
 80068a6:	e7a5      	b.n	80067f4 <_svfiprintf_r+0xd4>
 80068a8:	2300      	movs	r3, #0
 80068aa:	3401      	adds	r4, #1
 80068ac:	f04f 0c0a 	mov.w	ip, #10
 80068b0:	4619      	mov	r1, r3
 80068b2:	9305      	str	r3, [sp, #20]
 80068b4:	4620      	mov	r0, r4
 80068b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068ba:	3a30      	subs	r2, #48	; 0x30
 80068bc:	2a09      	cmp	r2, #9
 80068be:	d903      	bls.n	80068c8 <_svfiprintf_r+0x1a8>
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d0c5      	beq.n	8006850 <_svfiprintf_r+0x130>
 80068c4:	9105      	str	r1, [sp, #20]
 80068c6:	e7c3      	b.n	8006850 <_svfiprintf_r+0x130>
 80068c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80068cc:	4604      	mov	r4, r0
 80068ce:	2301      	movs	r3, #1
 80068d0:	e7f0      	b.n	80068b4 <_svfiprintf_r+0x194>
 80068d2:	ab03      	add	r3, sp, #12
 80068d4:	462a      	mov	r2, r5
 80068d6:	a904      	add	r1, sp, #16
 80068d8:	4638      	mov	r0, r7
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	4b0e      	ldr	r3, [pc, #56]	; (8006918 <_svfiprintf_r+0x1f8>)
 80068de:	e000      	b.n	80068e2 <_svfiprintf_r+0x1c2>
 80068e0:	bf00      	nop
 80068e2:	1c42      	adds	r2, r0, #1
 80068e4:	4606      	mov	r6, r0
 80068e6:	d1d6      	bne.n	8006896 <_svfiprintf_r+0x176>
 80068e8:	89ab      	ldrh	r3, [r5, #12]
 80068ea:	065b      	lsls	r3, r3, #25
 80068ec:	f53f af2c 	bmi.w	8006748 <_svfiprintf_r+0x28>
 80068f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068f2:	b01d      	add	sp, #116	; 0x74
 80068f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f8:	ab03      	add	r3, sp, #12
 80068fa:	462a      	mov	r2, r5
 80068fc:	a904      	add	r1, sp, #16
 80068fe:	4638      	mov	r0, r7
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	4b05      	ldr	r3, [pc, #20]	; (8006918 <_svfiprintf_r+0x1f8>)
 8006904:	f000 f87c 	bl	8006a00 <_printf_i>
 8006908:	e7eb      	b.n	80068e2 <_svfiprintf_r+0x1c2>
 800690a:	bf00      	nop
 800690c:	08007098 	.word	0x08007098
 8006910:	080070a2 	.word	0x080070a2
 8006914:	00000000 	.word	0x00000000
 8006918:	08006669 	.word	0x08006669
 800691c:	0800709e 	.word	0x0800709e

08006920 <_printf_common>:
 8006920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006924:	4616      	mov	r6, r2
 8006926:	4699      	mov	r9, r3
 8006928:	688a      	ldr	r2, [r1, #8]
 800692a:	4607      	mov	r7, r0
 800692c:	690b      	ldr	r3, [r1, #16]
 800692e:	460c      	mov	r4, r1
 8006930:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006934:	4293      	cmp	r3, r2
 8006936:	bfb8      	it	lt
 8006938:	4613      	movlt	r3, r2
 800693a:	6033      	str	r3, [r6, #0]
 800693c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006940:	b10a      	cbz	r2, 8006946 <_printf_common+0x26>
 8006942:	3301      	adds	r3, #1
 8006944:	6033      	str	r3, [r6, #0]
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	0699      	lsls	r1, r3, #26
 800694a:	bf42      	ittt	mi
 800694c:	6833      	ldrmi	r3, [r6, #0]
 800694e:	3302      	addmi	r3, #2
 8006950:	6033      	strmi	r3, [r6, #0]
 8006952:	6825      	ldr	r5, [r4, #0]
 8006954:	f015 0506 	ands.w	r5, r5, #6
 8006958:	d106      	bne.n	8006968 <_printf_common+0x48>
 800695a:	f104 0a19 	add.w	sl, r4, #25
 800695e:	68e3      	ldr	r3, [r4, #12]
 8006960:	6832      	ldr	r2, [r6, #0]
 8006962:	1a9b      	subs	r3, r3, r2
 8006964:	42ab      	cmp	r3, r5
 8006966:	dc29      	bgt.n	80069bc <_printf_common+0x9c>
 8006968:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800696c:	1e13      	subs	r3, r2, #0
 800696e:	6822      	ldr	r2, [r4, #0]
 8006970:	bf18      	it	ne
 8006972:	2301      	movne	r3, #1
 8006974:	0692      	lsls	r2, r2, #26
 8006976:	d42e      	bmi.n	80069d6 <_printf_common+0xb6>
 8006978:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800697c:	4649      	mov	r1, r9
 800697e:	4638      	mov	r0, r7
 8006980:	47c0      	blx	r8
 8006982:	3001      	adds	r0, #1
 8006984:	d021      	beq.n	80069ca <_printf_common+0xaa>
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	341a      	adds	r4, #26
 800698a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800698e:	f003 0306 	and.w	r3, r3, #6
 8006992:	6832      	ldr	r2, [r6, #0]
 8006994:	2600      	movs	r6, #0
 8006996:	2b04      	cmp	r3, #4
 8006998:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800699c:	bf08      	it	eq
 800699e:	1aad      	subeq	r5, r5, r2
 80069a0:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80069a4:	bf14      	ite	ne
 80069a6:	2500      	movne	r5, #0
 80069a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069ac:	4293      	cmp	r3, r2
 80069ae:	bfc4      	itt	gt
 80069b0:	1a9b      	subgt	r3, r3, r2
 80069b2:	18ed      	addgt	r5, r5, r3
 80069b4:	42b5      	cmp	r5, r6
 80069b6:	d11a      	bne.n	80069ee <_printf_common+0xce>
 80069b8:	2000      	movs	r0, #0
 80069ba:	e008      	b.n	80069ce <_printf_common+0xae>
 80069bc:	2301      	movs	r3, #1
 80069be:	4652      	mov	r2, sl
 80069c0:	4649      	mov	r1, r9
 80069c2:	4638      	mov	r0, r7
 80069c4:	47c0      	blx	r8
 80069c6:	3001      	adds	r0, #1
 80069c8:	d103      	bne.n	80069d2 <_printf_common+0xb2>
 80069ca:	f04f 30ff 	mov.w	r0, #4294967295
 80069ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d2:	3501      	adds	r5, #1
 80069d4:	e7c3      	b.n	800695e <_printf_common+0x3e>
 80069d6:	18e1      	adds	r1, r4, r3
 80069d8:	1c5a      	adds	r2, r3, #1
 80069da:	2030      	movs	r0, #48	; 0x30
 80069dc:	3302      	adds	r3, #2
 80069de:	4422      	add	r2, r4
 80069e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069ec:	e7c4      	b.n	8006978 <_printf_common+0x58>
 80069ee:	2301      	movs	r3, #1
 80069f0:	4622      	mov	r2, r4
 80069f2:	4649      	mov	r1, r9
 80069f4:	4638      	mov	r0, r7
 80069f6:	47c0      	blx	r8
 80069f8:	3001      	adds	r0, #1
 80069fa:	d0e6      	beq.n	80069ca <_printf_common+0xaa>
 80069fc:	3601      	adds	r6, #1
 80069fe:	e7d9      	b.n	80069b4 <_printf_common+0x94>

08006a00 <_printf_i>:
 8006a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a04:	7e0f      	ldrb	r7, [r1, #24]
 8006a06:	4691      	mov	r9, r2
 8006a08:	4680      	mov	r8, r0
 8006a0a:	460c      	mov	r4, r1
 8006a0c:	2f78      	cmp	r7, #120	; 0x78
 8006a0e:	469a      	mov	sl, r3
 8006a10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a16:	d807      	bhi.n	8006a28 <_printf_i+0x28>
 8006a18:	2f62      	cmp	r7, #98	; 0x62
 8006a1a:	d80a      	bhi.n	8006a32 <_printf_i+0x32>
 8006a1c:	2f00      	cmp	r7, #0
 8006a1e:	f000 80d8 	beq.w	8006bd2 <_printf_i+0x1d2>
 8006a22:	2f58      	cmp	r7, #88	; 0x58
 8006a24:	f000 80a3 	beq.w	8006b6e <_printf_i+0x16e>
 8006a28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a30:	e03a      	b.n	8006aa8 <_printf_i+0xa8>
 8006a32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a36:	2b15      	cmp	r3, #21
 8006a38:	d8f6      	bhi.n	8006a28 <_printf_i+0x28>
 8006a3a:	a101      	add	r1, pc, #4	; (adr r1, 8006a40 <_printf_i+0x40>)
 8006a3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a40:	08006a99 	.word	0x08006a99
 8006a44:	08006aad 	.word	0x08006aad
 8006a48:	08006a29 	.word	0x08006a29
 8006a4c:	08006a29 	.word	0x08006a29
 8006a50:	08006a29 	.word	0x08006a29
 8006a54:	08006a29 	.word	0x08006a29
 8006a58:	08006aad 	.word	0x08006aad
 8006a5c:	08006a29 	.word	0x08006a29
 8006a60:	08006a29 	.word	0x08006a29
 8006a64:	08006a29 	.word	0x08006a29
 8006a68:	08006a29 	.word	0x08006a29
 8006a6c:	08006bb9 	.word	0x08006bb9
 8006a70:	08006add 	.word	0x08006add
 8006a74:	08006b9b 	.word	0x08006b9b
 8006a78:	08006a29 	.word	0x08006a29
 8006a7c:	08006a29 	.word	0x08006a29
 8006a80:	08006bdb 	.word	0x08006bdb
 8006a84:	08006a29 	.word	0x08006a29
 8006a88:	08006add 	.word	0x08006add
 8006a8c:	08006a29 	.word	0x08006a29
 8006a90:	08006a29 	.word	0x08006a29
 8006a94:	08006ba3 	.word	0x08006ba3
 8006a98:	682b      	ldr	r3, [r5, #0]
 8006a9a:	1d1a      	adds	r2, r3, #4
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	602a      	str	r2, [r5, #0]
 8006aa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006aa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e0a3      	b.n	8006bf4 <_printf_i+0x1f4>
 8006aac:	6820      	ldr	r0, [r4, #0]
 8006aae:	6829      	ldr	r1, [r5, #0]
 8006ab0:	0606      	lsls	r6, r0, #24
 8006ab2:	f101 0304 	add.w	r3, r1, #4
 8006ab6:	d50a      	bpl.n	8006ace <_printf_i+0xce>
 8006ab8:	680e      	ldr	r6, [r1, #0]
 8006aba:	602b      	str	r3, [r5, #0]
 8006abc:	2e00      	cmp	r6, #0
 8006abe:	da03      	bge.n	8006ac8 <_printf_i+0xc8>
 8006ac0:	232d      	movs	r3, #45	; 0x2d
 8006ac2:	4276      	negs	r6, r6
 8006ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ac8:	485e      	ldr	r0, [pc, #376]	; (8006c44 <_printf_i+0x244>)
 8006aca:	230a      	movs	r3, #10
 8006acc:	e019      	b.n	8006b02 <_printf_i+0x102>
 8006ace:	680e      	ldr	r6, [r1, #0]
 8006ad0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ad4:	602b      	str	r3, [r5, #0]
 8006ad6:	bf18      	it	ne
 8006ad8:	b236      	sxthne	r6, r6
 8006ada:	e7ef      	b.n	8006abc <_printf_i+0xbc>
 8006adc:	682b      	ldr	r3, [r5, #0]
 8006ade:	6820      	ldr	r0, [r4, #0]
 8006ae0:	1d19      	adds	r1, r3, #4
 8006ae2:	6029      	str	r1, [r5, #0]
 8006ae4:	0601      	lsls	r1, r0, #24
 8006ae6:	d501      	bpl.n	8006aec <_printf_i+0xec>
 8006ae8:	681e      	ldr	r6, [r3, #0]
 8006aea:	e002      	b.n	8006af2 <_printf_i+0xf2>
 8006aec:	0646      	lsls	r6, r0, #25
 8006aee:	d5fb      	bpl.n	8006ae8 <_printf_i+0xe8>
 8006af0:	881e      	ldrh	r6, [r3, #0]
 8006af2:	2f6f      	cmp	r7, #111	; 0x6f
 8006af4:	4853      	ldr	r0, [pc, #332]	; (8006c44 <_printf_i+0x244>)
 8006af6:	bf0c      	ite	eq
 8006af8:	2308      	moveq	r3, #8
 8006afa:	230a      	movne	r3, #10
 8006afc:	2100      	movs	r1, #0
 8006afe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b02:	6865      	ldr	r5, [r4, #4]
 8006b04:	2d00      	cmp	r5, #0
 8006b06:	60a5      	str	r5, [r4, #8]
 8006b08:	bfa2      	ittt	ge
 8006b0a:	6821      	ldrge	r1, [r4, #0]
 8006b0c:	f021 0104 	bicge.w	r1, r1, #4
 8006b10:	6021      	strge	r1, [r4, #0]
 8006b12:	b90e      	cbnz	r6, 8006b18 <_printf_i+0x118>
 8006b14:	2d00      	cmp	r5, #0
 8006b16:	d04d      	beq.n	8006bb4 <_printf_i+0x1b4>
 8006b18:	4615      	mov	r5, r2
 8006b1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b1e:	fb03 6711 	mls	r7, r3, r1, r6
 8006b22:	5dc7      	ldrb	r7, [r0, r7]
 8006b24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b28:	4637      	mov	r7, r6
 8006b2a:	460e      	mov	r6, r1
 8006b2c:	42bb      	cmp	r3, r7
 8006b2e:	d9f4      	bls.n	8006b1a <_printf_i+0x11a>
 8006b30:	2b08      	cmp	r3, #8
 8006b32:	d10b      	bne.n	8006b4c <_printf_i+0x14c>
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	07de      	lsls	r6, r3, #31
 8006b38:	d508      	bpl.n	8006b4c <_printf_i+0x14c>
 8006b3a:	6923      	ldr	r3, [r4, #16]
 8006b3c:	6861      	ldr	r1, [r4, #4]
 8006b3e:	4299      	cmp	r1, r3
 8006b40:	bfde      	ittt	le
 8006b42:	2330      	movle	r3, #48	; 0x30
 8006b44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b4c:	1b52      	subs	r2, r2, r5
 8006b4e:	6122      	str	r2, [r4, #16]
 8006b50:	464b      	mov	r3, r9
 8006b52:	aa03      	add	r2, sp, #12
 8006b54:	4621      	mov	r1, r4
 8006b56:	4640      	mov	r0, r8
 8006b58:	f8cd a000 	str.w	sl, [sp]
 8006b5c:	f7ff fee0 	bl	8006920 <_printf_common>
 8006b60:	3001      	adds	r0, #1
 8006b62:	d14c      	bne.n	8006bfe <_printf_i+0x1fe>
 8006b64:	f04f 30ff 	mov.w	r0, #4294967295
 8006b68:	b004      	add	sp, #16
 8006b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b6e:	4835      	ldr	r0, [pc, #212]	; (8006c44 <_printf_i+0x244>)
 8006b70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b74:	6829      	ldr	r1, [r5, #0]
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b7c:	6029      	str	r1, [r5, #0]
 8006b7e:	061d      	lsls	r5, r3, #24
 8006b80:	d514      	bpl.n	8006bac <_printf_i+0x1ac>
 8006b82:	07df      	lsls	r7, r3, #31
 8006b84:	bf44      	itt	mi
 8006b86:	f043 0320 	orrmi.w	r3, r3, #32
 8006b8a:	6023      	strmi	r3, [r4, #0]
 8006b8c:	b91e      	cbnz	r6, 8006b96 <_printf_i+0x196>
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	f023 0320 	bic.w	r3, r3, #32
 8006b94:	6023      	str	r3, [r4, #0]
 8006b96:	2310      	movs	r3, #16
 8006b98:	e7b0      	b.n	8006afc <_printf_i+0xfc>
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	f043 0320 	orr.w	r3, r3, #32
 8006ba0:	6023      	str	r3, [r4, #0]
 8006ba2:	2378      	movs	r3, #120	; 0x78
 8006ba4:	4828      	ldr	r0, [pc, #160]	; (8006c48 <_printf_i+0x248>)
 8006ba6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006baa:	e7e3      	b.n	8006b74 <_printf_i+0x174>
 8006bac:	0659      	lsls	r1, r3, #25
 8006bae:	bf48      	it	mi
 8006bb0:	b2b6      	uxthmi	r6, r6
 8006bb2:	e7e6      	b.n	8006b82 <_printf_i+0x182>
 8006bb4:	4615      	mov	r5, r2
 8006bb6:	e7bb      	b.n	8006b30 <_printf_i+0x130>
 8006bb8:	682b      	ldr	r3, [r5, #0]
 8006bba:	6826      	ldr	r6, [r4, #0]
 8006bbc:	1d18      	adds	r0, r3, #4
 8006bbe:	6961      	ldr	r1, [r4, #20]
 8006bc0:	6028      	str	r0, [r5, #0]
 8006bc2:	0635      	lsls	r5, r6, #24
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	d501      	bpl.n	8006bcc <_printf_i+0x1cc>
 8006bc8:	6019      	str	r1, [r3, #0]
 8006bca:	e002      	b.n	8006bd2 <_printf_i+0x1d2>
 8006bcc:	0670      	lsls	r0, r6, #25
 8006bce:	d5fb      	bpl.n	8006bc8 <_printf_i+0x1c8>
 8006bd0:	8019      	strh	r1, [r3, #0]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	4615      	mov	r5, r2
 8006bd6:	6123      	str	r3, [r4, #16]
 8006bd8:	e7ba      	b.n	8006b50 <_printf_i+0x150>
 8006bda:	682b      	ldr	r3, [r5, #0]
 8006bdc:	2100      	movs	r1, #0
 8006bde:	1d1a      	adds	r2, r3, #4
 8006be0:	602a      	str	r2, [r5, #0]
 8006be2:	681d      	ldr	r5, [r3, #0]
 8006be4:	6862      	ldr	r2, [r4, #4]
 8006be6:	4628      	mov	r0, r5
 8006be8:	f000 f830 	bl	8006c4c <memchr>
 8006bec:	b108      	cbz	r0, 8006bf2 <_printf_i+0x1f2>
 8006bee:	1b40      	subs	r0, r0, r5
 8006bf0:	6060      	str	r0, [r4, #4]
 8006bf2:	6863      	ldr	r3, [r4, #4]
 8006bf4:	6123      	str	r3, [r4, #16]
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bfc:	e7a8      	b.n	8006b50 <_printf_i+0x150>
 8006bfe:	6923      	ldr	r3, [r4, #16]
 8006c00:	462a      	mov	r2, r5
 8006c02:	4649      	mov	r1, r9
 8006c04:	4640      	mov	r0, r8
 8006c06:	47d0      	blx	sl
 8006c08:	3001      	adds	r0, #1
 8006c0a:	d0ab      	beq.n	8006b64 <_printf_i+0x164>
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	079b      	lsls	r3, r3, #30
 8006c10:	d413      	bmi.n	8006c3a <_printf_i+0x23a>
 8006c12:	68e0      	ldr	r0, [r4, #12]
 8006c14:	9b03      	ldr	r3, [sp, #12]
 8006c16:	4298      	cmp	r0, r3
 8006c18:	bfb8      	it	lt
 8006c1a:	4618      	movlt	r0, r3
 8006c1c:	e7a4      	b.n	8006b68 <_printf_i+0x168>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	4632      	mov	r2, r6
 8006c22:	4649      	mov	r1, r9
 8006c24:	4640      	mov	r0, r8
 8006c26:	47d0      	blx	sl
 8006c28:	3001      	adds	r0, #1
 8006c2a:	d09b      	beq.n	8006b64 <_printf_i+0x164>
 8006c2c:	3501      	adds	r5, #1
 8006c2e:	68e3      	ldr	r3, [r4, #12]
 8006c30:	9903      	ldr	r1, [sp, #12]
 8006c32:	1a5b      	subs	r3, r3, r1
 8006c34:	42ab      	cmp	r3, r5
 8006c36:	dcf2      	bgt.n	8006c1e <_printf_i+0x21e>
 8006c38:	e7eb      	b.n	8006c12 <_printf_i+0x212>
 8006c3a:	2500      	movs	r5, #0
 8006c3c:	f104 0619 	add.w	r6, r4, #25
 8006c40:	e7f5      	b.n	8006c2e <_printf_i+0x22e>
 8006c42:	bf00      	nop
 8006c44:	080070a9 	.word	0x080070a9
 8006c48:	080070ba 	.word	0x080070ba

08006c4c <memchr>:
 8006c4c:	b2c9      	uxtb	r1, r1
 8006c4e:	4402      	add	r2, r0
 8006c50:	b510      	push	{r4, lr}
 8006c52:	4290      	cmp	r0, r2
 8006c54:	4603      	mov	r3, r0
 8006c56:	d101      	bne.n	8006c5c <memchr+0x10>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	e003      	b.n	8006c64 <memchr+0x18>
 8006c5c:	781c      	ldrb	r4, [r3, #0]
 8006c5e:	3001      	adds	r0, #1
 8006c60:	428c      	cmp	r4, r1
 8006c62:	d1f6      	bne.n	8006c52 <memchr+0x6>
 8006c64:	4618      	mov	r0, r3
 8006c66:	bd10      	pop	{r4, pc}

08006c68 <memcpy>:
 8006c68:	440a      	add	r2, r1
 8006c6a:	1e43      	subs	r3, r0, #1
 8006c6c:	4291      	cmp	r1, r2
 8006c6e:	d100      	bne.n	8006c72 <memcpy+0xa>
 8006c70:	4770      	bx	lr
 8006c72:	b510      	push	{r4, lr}
 8006c74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c78:	4291      	cmp	r1, r2
 8006c7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c7e:	d1f9      	bne.n	8006c74 <memcpy+0xc>
 8006c80:	bd10      	pop	{r4, pc}

08006c82 <memmove>:
 8006c82:	4288      	cmp	r0, r1
 8006c84:	b510      	push	{r4, lr}
 8006c86:	eb01 0402 	add.w	r4, r1, r2
 8006c8a:	d902      	bls.n	8006c92 <memmove+0x10>
 8006c8c:	4284      	cmp	r4, r0
 8006c8e:	4623      	mov	r3, r4
 8006c90:	d807      	bhi.n	8006ca2 <memmove+0x20>
 8006c92:	1e43      	subs	r3, r0, #1
 8006c94:	42a1      	cmp	r1, r4
 8006c96:	d008      	beq.n	8006caa <memmove+0x28>
 8006c98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c9c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ca0:	e7f8      	b.n	8006c94 <memmove+0x12>
 8006ca2:	4402      	add	r2, r0
 8006ca4:	4601      	mov	r1, r0
 8006ca6:	428a      	cmp	r2, r1
 8006ca8:	d100      	bne.n	8006cac <memmove+0x2a>
 8006caa:	bd10      	pop	{r4, pc}
 8006cac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cb0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cb4:	e7f7      	b.n	8006ca6 <memmove+0x24>
	...

08006cb8 <_free_r>:
 8006cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cba:	2900      	cmp	r1, #0
 8006cbc:	d043      	beq.n	8006d46 <_free_r+0x8e>
 8006cbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cc2:	1f0c      	subs	r4, r1, #4
 8006cc4:	9001      	str	r0, [sp, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	bfb8      	it	lt
 8006cca:	18e4      	addlt	r4, r4, r3
 8006ccc:	f000 f914 	bl	8006ef8 <__malloc_lock>
 8006cd0:	4a1e      	ldr	r2, [pc, #120]	; (8006d4c <_free_r+0x94>)
 8006cd2:	9801      	ldr	r0, [sp, #4]
 8006cd4:	6813      	ldr	r3, [r2, #0]
 8006cd6:	b933      	cbnz	r3, 8006ce6 <_free_r+0x2e>
 8006cd8:	6063      	str	r3, [r4, #4]
 8006cda:	6014      	str	r4, [r2, #0]
 8006cdc:	b003      	add	sp, #12
 8006cde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ce2:	f000 b90f 	b.w	8006f04 <__malloc_unlock>
 8006ce6:	42a3      	cmp	r3, r4
 8006ce8:	d908      	bls.n	8006cfc <_free_r+0x44>
 8006cea:	6825      	ldr	r5, [r4, #0]
 8006cec:	1961      	adds	r1, r4, r5
 8006cee:	428b      	cmp	r3, r1
 8006cf0:	bf01      	itttt	eq
 8006cf2:	6819      	ldreq	r1, [r3, #0]
 8006cf4:	685b      	ldreq	r3, [r3, #4]
 8006cf6:	1949      	addeq	r1, r1, r5
 8006cf8:	6021      	streq	r1, [r4, #0]
 8006cfa:	e7ed      	b.n	8006cd8 <_free_r+0x20>
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	b10b      	cbz	r3, 8006d06 <_free_r+0x4e>
 8006d02:	42a3      	cmp	r3, r4
 8006d04:	d9fa      	bls.n	8006cfc <_free_r+0x44>
 8006d06:	6811      	ldr	r1, [r2, #0]
 8006d08:	1855      	adds	r5, r2, r1
 8006d0a:	42a5      	cmp	r5, r4
 8006d0c:	d10b      	bne.n	8006d26 <_free_r+0x6e>
 8006d0e:	6824      	ldr	r4, [r4, #0]
 8006d10:	4421      	add	r1, r4
 8006d12:	1854      	adds	r4, r2, r1
 8006d14:	6011      	str	r1, [r2, #0]
 8006d16:	42a3      	cmp	r3, r4
 8006d18:	d1e0      	bne.n	8006cdc <_free_r+0x24>
 8006d1a:	681c      	ldr	r4, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	4421      	add	r1, r4
 8006d20:	6053      	str	r3, [r2, #4]
 8006d22:	6011      	str	r1, [r2, #0]
 8006d24:	e7da      	b.n	8006cdc <_free_r+0x24>
 8006d26:	d902      	bls.n	8006d2e <_free_r+0x76>
 8006d28:	230c      	movs	r3, #12
 8006d2a:	6003      	str	r3, [r0, #0]
 8006d2c:	e7d6      	b.n	8006cdc <_free_r+0x24>
 8006d2e:	6825      	ldr	r5, [r4, #0]
 8006d30:	1961      	adds	r1, r4, r5
 8006d32:	428b      	cmp	r3, r1
 8006d34:	bf02      	ittt	eq
 8006d36:	6819      	ldreq	r1, [r3, #0]
 8006d38:	685b      	ldreq	r3, [r3, #4]
 8006d3a:	1949      	addeq	r1, r1, r5
 8006d3c:	6063      	str	r3, [r4, #4]
 8006d3e:	bf08      	it	eq
 8006d40:	6021      	streq	r1, [r4, #0]
 8006d42:	6054      	str	r4, [r2, #4]
 8006d44:	e7ca      	b.n	8006cdc <_free_r+0x24>
 8006d46:	b003      	add	sp, #12
 8006d48:	bd30      	pop	{r4, r5, pc}
 8006d4a:	bf00      	nop
 8006d4c:	200003a8 	.word	0x200003a8

08006d50 <sbrk_aligned>:
 8006d50:	b570      	push	{r4, r5, r6, lr}
 8006d52:	4e0e      	ldr	r6, [pc, #56]	; (8006d8c <sbrk_aligned+0x3c>)
 8006d54:	460c      	mov	r4, r1
 8006d56:	4605      	mov	r5, r0
 8006d58:	6831      	ldr	r1, [r6, #0]
 8006d5a:	b911      	cbnz	r1, 8006d62 <sbrk_aligned+0x12>
 8006d5c:	f000 f8bc 	bl	8006ed8 <_sbrk_r>
 8006d60:	6030      	str	r0, [r6, #0]
 8006d62:	4621      	mov	r1, r4
 8006d64:	4628      	mov	r0, r5
 8006d66:	f000 f8b7 	bl	8006ed8 <_sbrk_r>
 8006d6a:	1c43      	adds	r3, r0, #1
 8006d6c:	d00a      	beq.n	8006d84 <sbrk_aligned+0x34>
 8006d6e:	1cc4      	adds	r4, r0, #3
 8006d70:	f024 0403 	bic.w	r4, r4, #3
 8006d74:	42a0      	cmp	r0, r4
 8006d76:	d007      	beq.n	8006d88 <sbrk_aligned+0x38>
 8006d78:	1a21      	subs	r1, r4, r0
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	f000 f8ac 	bl	8006ed8 <_sbrk_r>
 8006d80:	3001      	adds	r0, #1
 8006d82:	d101      	bne.n	8006d88 <sbrk_aligned+0x38>
 8006d84:	f04f 34ff 	mov.w	r4, #4294967295
 8006d88:	4620      	mov	r0, r4
 8006d8a:	bd70      	pop	{r4, r5, r6, pc}
 8006d8c:	200003ac 	.word	0x200003ac

08006d90 <_malloc_r>:
 8006d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d94:	1ccd      	adds	r5, r1, #3
 8006d96:	4607      	mov	r7, r0
 8006d98:	f025 0503 	bic.w	r5, r5, #3
 8006d9c:	3508      	adds	r5, #8
 8006d9e:	2d0c      	cmp	r5, #12
 8006da0:	bf38      	it	cc
 8006da2:	250c      	movcc	r5, #12
 8006da4:	2d00      	cmp	r5, #0
 8006da6:	db01      	blt.n	8006dac <_malloc_r+0x1c>
 8006da8:	42a9      	cmp	r1, r5
 8006daa:	d905      	bls.n	8006db8 <_malloc_r+0x28>
 8006dac:	230c      	movs	r3, #12
 8006dae:	2600      	movs	r6, #0
 8006db0:	603b      	str	r3, [r7, #0]
 8006db2:	4630      	mov	r0, r6
 8006db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006db8:	4e2e      	ldr	r6, [pc, #184]	; (8006e74 <_malloc_r+0xe4>)
 8006dba:	f000 f89d 	bl	8006ef8 <__malloc_lock>
 8006dbe:	6833      	ldr	r3, [r6, #0]
 8006dc0:	461c      	mov	r4, r3
 8006dc2:	bb34      	cbnz	r4, 8006e12 <_malloc_r+0x82>
 8006dc4:	4629      	mov	r1, r5
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	f7ff ffc2 	bl	8006d50 <sbrk_aligned>
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	4604      	mov	r4, r0
 8006dd0:	d14d      	bne.n	8006e6e <_malloc_r+0xde>
 8006dd2:	6834      	ldr	r4, [r6, #0]
 8006dd4:	4626      	mov	r6, r4
 8006dd6:	2e00      	cmp	r6, #0
 8006dd8:	d140      	bne.n	8006e5c <_malloc_r+0xcc>
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	4631      	mov	r1, r6
 8006dde:	4638      	mov	r0, r7
 8006de0:	eb04 0803 	add.w	r8, r4, r3
 8006de4:	f000 f878 	bl	8006ed8 <_sbrk_r>
 8006de8:	4580      	cmp	r8, r0
 8006dea:	d13a      	bne.n	8006e62 <_malloc_r+0xd2>
 8006dec:	6821      	ldr	r1, [r4, #0]
 8006dee:	3503      	adds	r5, #3
 8006df0:	4638      	mov	r0, r7
 8006df2:	1a6d      	subs	r5, r5, r1
 8006df4:	f025 0503 	bic.w	r5, r5, #3
 8006df8:	3508      	adds	r5, #8
 8006dfa:	2d0c      	cmp	r5, #12
 8006dfc:	bf38      	it	cc
 8006dfe:	250c      	movcc	r5, #12
 8006e00:	4629      	mov	r1, r5
 8006e02:	f7ff ffa5 	bl	8006d50 <sbrk_aligned>
 8006e06:	3001      	adds	r0, #1
 8006e08:	d02b      	beq.n	8006e62 <_malloc_r+0xd2>
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	442b      	add	r3, r5
 8006e0e:	6023      	str	r3, [r4, #0]
 8006e10:	e00e      	b.n	8006e30 <_malloc_r+0xa0>
 8006e12:	6822      	ldr	r2, [r4, #0]
 8006e14:	1b52      	subs	r2, r2, r5
 8006e16:	d41e      	bmi.n	8006e56 <_malloc_r+0xc6>
 8006e18:	2a0b      	cmp	r2, #11
 8006e1a:	d916      	bls.n	8006e4a <_malloc_r+0xba>
 8006e1c:	1961      	adds	r1, r4, r5
 8006e1e:	42a3      	cmp	r3, r4
 8006e20:	6025      	str	r5, [r4, #0]
 8006e22:	bf18      	it	ne
 8006e24:	6059      	strne	r1, [r3, #4]
 8006e26:	6863      	ldr	r3, [r4, #4]
 8006e28:	bf08      	it	eq
 8006e2a:	6031      	streq	r1, [r6, #0]
 8006e2c:	5162      	str	r2, [r4, r5]
 8006e2e:	604b      	str	r3, [r1, #4]
 8006e30:	f104 060b 	add.w	r6, r4, #11
 8006e34:	4638      	mov	r0, r7
 8006e36:	f000 f865 	bl	8006f04 <__malloc_unlock>
 8006e3a:	1d23      	adds	r3, r4, #4
 8006e3c:	f026 0607 	bic.w	r6, r6, #7
 8006e40:	1af2      	subs	r2, r6, r3
 8006e42:	d0b6      	beq.n	8006db2 <_malloc_r+0x22>
 8006e44:	1b9b      	subs	r3, r3, r6
 8006e46:	50a3      	str	r3, [r4, r2]
 8006e48:	e7b3      	b.n	8006db2 <_malloc_r+0x22>
 8006e4a:	6862      	ldr	r2, [r4, #4]
 8006e4c:	42a3      	cmp	r3, r4
 8006e4e:	bf0c      	ite	eq
 8006e50:	6032      	streq	r2, [r6, #0]
 8006e52:	605a      	strne	r2, [r3, #4]
 8006e54:	e7ec      	b.n	8006e30 <_malloc_r+0xa0>
 8006e56:	4623      	mov	r3, r4
 8006e58:	6864      	ldr	r4, [r4, #4]
 8006e5a:	e7b2      	b.n	8006dc2 <_malloc_r+0x32>
 8006e5c:	4634      	mov	r4, r6
 8006e5e:	6876      	ldr	r6, [r6, #4]
 8006e60:	e7b9      	b.n	8006dd6 <_malloc_r+0x46>
 8006e62:	230c      	movs	r3, #12
 8006e64:	4638      	mov	r0, r7
 8006e66:	603b      	str	r3, [r7, #0]
 8006e68:	f000 f84c 	bl	8006f04 <__malloc_unlock>
 8006e6c:	e7a1      	b.n	8006db2 <_malloc_r+0x22>
 8006e6e:	6025      	str	r5, [r4, #0]
 8006e70:	e7de      	b.n	8006e30 <_malloc_r+0xa0>
 8006e72:	bf00      	nop
 8006e74:	200003a8 	.word	0x200003a8

08006e78 <_realloc_r>:
 8006e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e7c:	4680      	mov	r8, r0
 8006e7e:	4614      	mov	r4, r2
 8006e80:	460e      	mov	r6, r1
 8006e82:	b921      	cbnz	r1, 8006e8e <_realloc_r+0x16>
 8006e84:	4611      	mov	r1, r2
 8006e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e8a:	f7ff bf81 	b.w	8006d90 <_malloc_r>
 8006e8e:	b92a      	cbnz	r2, 8006e9c <_realloc_r+0x24>
 8006e90:	4625      	mov	r5, r4
 8006e92:	f7ff ff11 	bl	8006cb8 <_free_r>
 8006e96:	4628      	mov	r0, r5
 8006e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e9c:	f000 f838 	bl	8006f10 <_malloc_usable_size_r>
 8006ea0:	4284      	cmp	r4, r0
 8006ea2:	4607      	mov	r7, r0
 8006ea4:	d802      	bhi.n	8006eac <_realloc_r+0x34>
 8006ea6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006eaa:	d812      	bhi.n	8006ed2 <_realloc_r+0x5a>
 8006eac:	4621      	mov	r1, r4
 8006eae:	4640      	mov	r0, r8
 8006eb0:	f7ff ff6e 	bl	8006d90 <_malloc_r>
 8006eb4:	4605      	mov	r5, r0
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	d0ed      	beq.n	8006e96 <_realloc_r+0x1e>
 8006eba:	42bc      	cmp	r4, r7
 8006ebc:	4622      	mov	r2, r4
 8006ebe:	4631      	mov	r1, r6
 8006ec0:	bf28      	it	cs
 8006ec2:	463a      	movcs	r2, r7
 8006ec4:	f7ff fed0 	bl	8006c68 <memcpy>
 8006ec8:	4631      	mov	r1, r6
 8006eca:	4640      	mov	r0, r8
 8006ecc:	f7ff fef4 	bl	8006cb8 <_free_r>
 8006ed0:	e7e1      	b.n	8006e96 <_realloc_r+0x1e>
 8006ed2:	4635      	mov	r5, r6
 8006ed4:	e7df      	b.n	8006e96 <_realloc_r+0x1e>
	...

08006ed8 <_sbrk_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	2300      	movs	r3, #0
 8006edc:	4d05      	ldr	r5, [pc, #20]	; (8006ef4 <_sbrk_r+0x1c>)
 8006ede:	4604      	mov	r4, r0
 8006ee0:	4608      	mov	r0, r1
 8006ee2:	602b      	str	r3, [r5, #0]
 8006ee4:	f7f9 fdfc 	bl	8000ae0 <_sbrk>
 8006ee8:	1c43      	adds	r3, r0, #1
 8006eea:	d102      	bne.n	8006ef2 <_sbrk_r+0x1a>
 8006eec:	682b      	ldr	r3, [r5, #0]
 8006eee:	b103      	cbz	r3, 8006ef2 <_sbrk_r+0x1a>
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	bd38      	pop	{r3, r4, r5, pc}
 8006ef4:	200003b0 	.word	0x200003b0

08006ef8 <__malloc_lock>:
 8006ef8:	4801      	ldr	r0, [pc, #4]	; (8006f00 <__malloc_lock+0x8>)
 8006efa:	f000 b811 	b.w	8006f20 <__retarget_lock_acquire_recursive>
 8006efe:	bf00      	nop
 8006f00:	200003b4 	.word	0x200003b4

08006f04 <__malloc_unlock>:
 8006f04:	4801      	ldr	r0, [pc, #4]	; (8006f0c <__malloc_unlock+0x8>)
 8006f06:	f000 b80c 	b.w	8006f22 <__retarget_lock_release_recursive>
 8006f0a:	bf00      	nop
 8006f0c:	200003b4 	.word	0x200003b4

08006f10 <_malloc_usable_size_r>:
 8006f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f14:	1f18      	subs	r0, r3, #4
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	bfbc      	itt	lt
 8006f1a:	580b      	ldrlt	r3, [r1, r0]
 8006f1c:	18c0      	addlt	r0, r0, r3
 8006f1e:	4770      	bx	lr

08006f20 <__retarget_lock_acquire_recursive>:
 8006f20:	4770      	bx	lr

08006f22 <__retarget_lock_release_recursive>:
 8006f22:	4770      	bx	lr

08006f24 <_init>:
 8006f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f26:	bf00      	nop
 8006f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f2a:	bc08      	pop	{r3}
 8006f2c:	469e      	mov	lr, r3
 8006f2e:	4770      	bx	lr

08006f30 <_fini>:
 8006f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f32:	bf00      	nop
 8006f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f36:	bc08      	pop	{r3}
 8006f38:	469e      	mov	lr, r3
 8006f3a:	4770      	bx	lr
